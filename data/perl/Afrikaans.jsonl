{"task_id": "perl/0", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 'n lys van deposito en onttrekking operasies op 'n bankrekening wat begin met 'n nul balans. Jou taak is om te bepaal of die balans van die rekening op enige punt onder nul val, en op daardie punt moet die funksie True teruggee. Anders moet dit False teruggee.\n# >>> below_zero([1, 2, 3])\n# False\n# >>> below_zero([1, 2, -4, 5])\n# True\n#\nsub below_zero\n{\n  my ($operations) = @_;\n", "entry_point": "below_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = below_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, -3, 1, 2, -3];\nmy $x1 = below_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, -4, 5, 6];\nmy $x2 = below_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -1, 2, -2, 5, -5, 4, -4];\nmy $x3 = below_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, -1, 2, -2, 5, -5, 4, -5];\nmy $x4 = below_zero($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, -2, 2, -2, 5, -5, 4, -4];\nmy $x5 = below_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Jy kry 'n lys van deposito en onttrekking operasies op 'n bankrekening wat begin met 'n nul balans. Jou taak is om te bepaal of die balans van die rekening op enige punt onder nul val, en op daardie punt moet die funksie True teruggee. Anders moet dit False teruggee.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/1", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Vir 'n gegewe lys van heelgetalle, gee 'n tuple terug wat bestaan uit 'n som en 'n produk van al die heelgetalle in die lys.\n#     Leë som moet gelyk wees aan 0 en leë produk moet gelyk wees aan 1.\n# >>> sum_product([])\n# (0, 1)\n# >>> sum_product([1, 2, 3, 4])\n# (10, 24)\n#\nsub sum_product\n{\n  my ($numbers) = @_;\n", "entry_point": "sum_product", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = sum_product($arg00);\nmy $v0 = [0, 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 1, 1];\nmy $x1 = sum_product($arg10);\nmy $v1 = [3, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [100, 0];\nmy $x2 = sum_product($arg20);\nmy $v2 = [100, 0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 7];\nmy $x3 = sum_product($arg30);\nmy $v3 = [15, 105];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [10];\nmy $x4 = sum_product($arg40);\nmy $v4 = [10, 10];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Vir 'n gegewe lys van heelgetalle, gee 'n tuple terug wat bestaan uit 'n som en 'n produk van al die heelgetalle in die lys.\n    Leë som moet gelyk wees aan 0 en leë produk moet gelyk wees aan 1.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/2", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Die insette is twee reekse a en b wat slegs uit 1's en 0's bestaan.\n# Voer binêre XOR op hierdie insette uit en gee die resultaat ook terug as 'n string.\n# >>> string_xor('010', '110')\n# '100'\n#\nsub string_xor\n{\n  my ($a, $b) = @_;\n", "entry_point": "string_xor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"111000\";\nmy $arg01 = \"101010\";\nmy $x0 = string_xor($arg00, $arg01);\nmy $v0 = \"010010\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1\";\nmy $arg11 = \"1\";\nmy $x1 = string_xor($arg10, $arg11);\nmy $v1 = \"0\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"0101\";\nmy $arg21 = \"0000\";\nmy $x2 = string_xor($arg20, $arg21);\nmy $v2 = \"0101\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Die insette is twee reekse a en b wat slegs uit 1's en 0's bestaan.\nVoer binêre XOR op hierdie insette uit en gee die resultaat ook terug as 'n string.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/3", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Uit 'n lys van strings, gee die langste een terug. Gee die eerste een terug in die geval van meerdere strings van dieselfde lengte. Gee null terug in die geval dat die invoerlys leeg is.\n# >>> longest([])\n\n# >>> longest(['a', 'b', 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\nsub longest\n{\n  my ($strings) = @_;\n", "entry_point": "longest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = longest($arg00);\nmy $v0 = \"none\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [\"x\", \"y\", \"z\"];\nmy $x1 = longest($arg10);\nmy $v1 = \"x\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"];\nmy $x2 = longest($arg20);\nmy $v2 = \"zzzz\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Uit 'n lys van strings, gee die langste een terug. Gee die eerste een terug in die geval van meerdere strings van dieselfde lengte. Gee null terug in die geval dat die invoerlys leeg is.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/4", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee die grootste gemeenskaplike deler van twee heelgetalle a en b terug.\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\n#\nsub greatest_common_divisor\n{\n  my ($a, $b) = @_;\n", "entry_point": "greatest_common_divisor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 7;\nmy $x0 = greatest_common_divisor($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 15;\nmy $x1 = greatest_common_divisor($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 49;\nmy $arg21 = 14;\nmy $x2 = greatest_common_divisor($arg20, $arg21);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 144;\nmy $arg31 = 60;\nmy $x3 = greatest_common_divisor($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Gee die grootste gemeenskaplike deler van twee heelgetalle a en b terug.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/5", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Die inset is 'n spasie-gedeelde string van getalle van 'nul' tot 'nege'.\n#     Geldige keuses is 'nul', 'een', 'twee', 'drie', 'vier', 'vyf', 'ses', 'sewe', 'agt' en 'nege'.\n#     Gee die string terug met die getalle gesorteer van die kleinste tot die grootste.\n# >>> sort_numbers('three one five')\n# 'one three five'\n#\nsub sort_numbers\n{\n  my ($numbers) = @_;\n", "entry_point": "sort_numbers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = sort_numbers($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"three\";\nmy $x1 = sort_numbers($arg10);\nmy $v1 = \"three\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"three five nine\";\nmy $x2 = sort_numbers($arg20);\nmy $v2 = \"three five nine\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"five zero four seven nine eight\";\nmy $x3 = sort_numbers($arg30);\nmy $v3 = \"zero four five seven eight nine\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"six five four three two one zero\";\nmy $x4 = sort_numbers($arg40);\nmy $v4 = \"zero one two three four five six\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Die inset is 'n spasie-gedeelde string van getalle van 'nul' tot 'nege'.\n    Geldige keuses is 'nul', 'een', 'twee', 'drie', 'vier', 'vyf', 'ses', 'sewe', 'agt' en 'nege'.\n    Gee die string terug met die getalle gesorteer van die kleinste tot die grootste.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/6", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gegee 'n lys van getalle (van ten minste twee elemente), pas 'n lineêre transformasie toe op daardie lys,\n# sodat die kleinste getal 0 sal word en die grootste 1 sal word.\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\n#\nsub rescale_to_unit\n{\n  my ($numbers) = @_;\n", "entry_point": "rescale_to_unit", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2.0, 49.9];\nmy $x0 = rescale_to_unit($arg00);\nmy $v0 = [0.0, 1.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [100.0, 49.9];\nmy $x1 = rescale_to_unit($arg10);\nmy $v1 = [1.0, 0.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1.0, 2.0, 3.0, 4.0, 5.0];\nmy $x2 = rescale_to_unit($arg20);\nmy $v2 = [0.0, 0.25, 0.5, 0.75, 1.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2.0, 1.0, 5.0, 3.0, 4.0];\nmy $x3 = rescale_to_unit($arg30);\nmy $v3 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [12.0, 11.0, 15.0, 13.0, 14.0];\nmy $x4 = rescale_to_unit($arg40);\nmy $v4 = [0.25, 0.0, 1.0, 0.5, 0.75];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gegee 'n lys van getalle (van ten minste twee elemente), pas 'n lineêre transformasie toe op daardie lys,\nsodat die kleinste getal 0 sal word en die grootste 1 sal word.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/7", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Vir 'n gegewe string, draai kleinletters na hoofletters en hoofletters na kleinletters.\n# >>> flip_case('Hello')\n# 'hELLO'\n#\nsub flip_case\n{\n  my ($string) = @_;\n", "entry_point": "flip_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = flip_case($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Hello!\";\nmy $x1 = flip_case($arg10);\nmy $v1 = \"hELLO!\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"These violent delights have violent ends\";\nmy $x2 = flip_case($arg20);\nmy $v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Vir 'n gegewe string, draai kleinletters na hoofletters en hoofletters na kleinletters.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/8", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee slegs positiewe getalle terug in die lys.\n# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\nsub get_positive\n{\n  my ($l) = @_;\n", "entry_point": "get_positive", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-1, -2, 4, 5, 6];\nmy $x0 = get_positive($arg00);\nmy $v0 = [4, 5, 6];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10];\nmy $x1 = get_positive($arg10);\nmy $v1 = [5, 3, 2, 3, 3, 9, 123, 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-1, -2];\nmy $x2 = get_positive($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [];\nmy $x3 = get_positive($arg30);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Gee slegs positiewe getalle terug in die lys.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/9", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee waar terug as 'n gegewe nommer 'n priemgetal is, en vals andersins.\n# >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n# False\n#\nsub is_prime\n{\n  my ($n) = @_;\n", "entry_point": "is_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 6;\nmy $x0 = is_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 101;\nmy $x1 = is_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = is_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 13441;\nmy $x3 = is_prime($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 61;\nmy $x4 = is_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 4;\nmy $x5 = is_prime($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 1;\nmy $x6 = is_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 5;\nmy $x7 = is_prime($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 11;\nmy $x8 = is_prime($arg80);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 17;\nmy $x9 = is_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 85;\nmy $x10 = is_prime($arg100);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 77;\nmy $x11 = is_prime($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 255379;\nmy $x12 = is_prime($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "Gee waar terug as 'n gegewe nommer 'n priemgetal is, en vals andersins.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/10", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee gesorteerde unieke elemente terug in 'n lys.\n# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n#\nsub unique\n{\n  my ($l) = @_;\n", "entry_point": "unique", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 3, 5, 2, 3, 3, 9, 0, 123];\nmy $x0 = unique($arg00);\nmy $v0 = [0, 2, 3, 5, 9, 123];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\n", "description": "Gee gesorteerde unieke elemente terug in 'n lys.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/11", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # prime_fib gee terug die n-de nommer wat 'n Fibonacci-nommer is en ook 'n priemgetal is.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\n#\nsub prime_fib\n{\n  my ($n) = @_;\n", "entry_point": "prime_fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = prime_fib($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 2;\nmy $x1 = prime_fib($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = prime_fib($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 4;\nmy $x3 = prime_fib($arg30);\nmy $v3 = 13;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 5;\nmy $x4 = prime_fib($arg40);\nmy $v4 = 89;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 6;\nmy $x5 = prime_fib($arg50);\nmy $v5 = 233;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $x6 = prime_fib($arg60);\nmy $v6 = 1597;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 8;\nmy $x7 = prime_fib($arg70);\nmy $v7 = 28657;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 9;\nmy $x8 = prime_fib($arg80);\nmy $v8 = 514229;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 10;\nmy $x9 = prime_fib($arg90);\nmy $v9 = 433494437;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "prime_fib gee terug die n-de nommer wat 'n Fibonacci-nommer is en ook 'n priemgetal is.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/12", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # triples_sum_to_zero neem 'n lys van heelgetalle as 'n inset en gee 'n waarde van Waar terug as daar drie onderskeie elemente in die lys is wat saam tot nul optel, en vals andersins.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# True\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# True\n# >>> triples_sum_to_zero([1])\n# False\n#\nsub triples_sum_to_zero\n{\n  my ($l) = @_;\n", "entry_point": "triples_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = triples_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, 5, -1];\nmy $x1 = triples_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, -2, 1];\nmy $x2 = triples_sum_to_zero($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 2, 3, 7];\nmy $x3 = triples_sum_to_zero($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 5, 7];\nmy $x4 = triples_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 4, -5, 3, 9, 7];\nmy $x5 = triples_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1];\nmy $x6 = triples_sum_to_zero($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 3, 5, -100];\nmy $x7 = triples_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [100, 3, 5, -100];\nmy $x8 = triples_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "triples_sum_to_zero neem 'n lys van heelgetalle as 'n inset en gee 'n waarde van Waar terug as daar drie onderskeie elemente in die lys is wat saam tot nul optel, en vals andersins.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/13", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # pairs_sum_to_zero neem 'n lys van heelgetalle as 'n inset en gee True terug as daar twee onderskeie elemente in die lys is wat tot nul optel, en False andersins.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\n#\nsub pairs_sum_to_zero\n{\n  my ($l) = @_;\n", "entry_point": "pairs_sum_to_zero", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 3, 5, 0];\nmy $x0 = pairs_sum_to_zero($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 3, -2, 1];\nmy $x1 = pairs_sum_to_zero($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 7];\nmy $x2 = pairs_sum_to_zero($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [2, 4, -5, 3, 5, 7];\nmy $x3 = pairs_sum_to_zero($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = pairs_sum_to_zero($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [-3, 9, -1, 3, 2, 30];\nmy $x5 = pairs_sum_to_zero($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-3, 9, -1, 3, 2, 31];\nmy $x6 = pairs_sum_to_zero($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-3, 9, -1, 4, 2, 30];\nmy $x7 = pairs_sum_to_zero($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-3, 9, -1, 4, 2, 31];\nmy $x8 = pairs_sum_to_zero($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "pairs_sum_to_zero neem 'n lys van heelgetalle as 'n inset en gee True terug as daar twee onderskeie elemente in die lys is wat tot nul optel, en False andersins.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/14", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Die Fib4-getalreeks is 'n reeks soortgelyk aan die Fibbonacci-reeks wat as volg gedefinieer word:\n#     fib4(0) -> 0\n#     fib4(1) -> 0\n#     fib4(2) -> 2\n#     fib4(3) -> 0\n#     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n#     Skryf asseblief 'n funksie om die n-de element van die fib4-getalreeks doeltreffend te bereken. Moenie herhaling gebruik nie.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\n#\nsub fib4\n{\n  my ($n) = @_;\n", "entry_point": "fib4", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = fib4($arg00);\nmy $v0 = 4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 8;\nmy $x1 = fib4($arg10);\nmy $v1 = 28;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = fib4($arg20);\nmy $v2 = 104;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 12;\nmy $x3 = fib4($arg30);\nmy $v3 = 386;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Die Fib4-getalreeks is 'n reeks soortgelyk aan die Fibbonacci-reeks wat as volg gedefinieer word:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Skryf asseblief 'n funksie om die n-de element van die fib4-getalreeks doeltreffend te bereken. Moenie herhaling gebruik nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/15", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee die mediaan van elemente in die lys l terug.\n# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\nsub median\n{\n  my ($l) = @_;\n", "entry_point": "median", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = median($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-10, 4, 6, 1000, 10, 20];\nmy $x1 = median($arg10);\nmy $v1 = 8.0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [5];\nmy $x2 = median($arg20);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [6, 5];\nmy $x3 = median($arg30);\nmy $v3 = 5.5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [8, 1, 3, 9, 9, 2, 7];\nmy $x4 = median($arg40);\nmy $v4 = 7;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gee die mediaan van elemente in die lys l terug.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/16", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Kyk of die gegewe string 'n palindroom is.\n# >>> is_palindrome('')\n# True\n# >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>> is_palindrome('zbcd')\n# False\n#\nsub is_palindrome\n{\n  my ($text) = @_;\n", "entry_point": "is_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = is_palindrome($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aba\";\nmy $x1 = is_palindrome($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"aaaaa\";\nmy $x2 = is_palindrome($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"zbcd\";\nmy $x3 = is_palindrome($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"xywyx\";\nmy $x4 = is_palindrome($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xywyz\";\nmy $x5 = is_palindrome($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"xywzx\";\nmy $x6 = is_palindrome($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Kyk of die gegewe string 'n palindroom is.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/17", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # \"remove_vowels\" is 'n funksie wat 'n string neem en 'n string sonder klinkers teruggee.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels(\"abcdef\\nghijklm\")\n# 'bcdf\\nghjklm'\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\n#\nsub remove_vowels\n{\n  my ($text) = @_;\n", "entry_point": "remove_vowels", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"\";\nmy $x0 = remove_vowels($arg00);\nmy $v0 = \"\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\\nghijklm\";\nmy $x1 = remove_vowels($arg10);\nmy $v1 = \"bcdf\\nghjklm\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"fedcba\";\nmy $x2 = remove_vowels($arg20);\nmy $v2 = \"fdcb\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eeeee\";\nmy $x3 = remove_vowels($arg30);\nmy $v3 = \"\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"acBAA\";\nmy $x4 = remove_vowels($arg40);\nmy $v4 = \"cB\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"EcBOO\";\nmy $x5 = remove_vowels($arg50);\nmy $v5 = \"cB\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ybcd\";\nmy $x6 = remove_vowels($arg60);\nmy $v6 = \"ybcd\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "\"remove_vowels\" is 'n funksie wat 'n string neem en 'n string sonder klinkers teruggee.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/18", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee Waar terug as alle getalle in die lys l onder die drempelwaarde t is.\n# >>> below_threshold([1, 2, 4, 10], 100)\n# True\n# >>> below_threshold([1, 20, 4, 10], 5)\n# False\n#\nsub below_threshold\n{\n  my ($l, $t) = @_;\n", "entry_point": "below_threshold", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 10];\nmy $arg01 = 100;\nmy $x0 = below_threshold($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 20, 4, 10];\nmy $arg11 = 5;\nmy $x1 = below_threshold($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 20, 4, 10];\nmy $arg21 = 21;\nmy $x2 = below_threshold($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 20, 4, 10];\nmy $arg31 = 22;\nmy $x3 = below_threshold($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 8, 4, 10];\nmy $arg41 = 11;\nmy $x4 = below_threshold($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 8, 4, 10];\nmy $arg51 = 10;\nmy $x5 = below_threshold($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Gee Waar terug as alle getalle in die lys l onder die drempelwaarde t is.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/19", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Voeg twee getalle x en y by.\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n#\nsub add\n{\n  my ($x, $y) = @_;\n", "entry_point": "add", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $arg01 = 1;\nmy $x0 = add($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 0;\nmy $x1 = add($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 2;\nmy $arg21 = 3;\nmy $x2 = add($arg20, $arg21);\nmy $v2 = 5;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5;\nmy $arg31 = 7;\nmy $x3 = add($arg30, $arg31);\nmy $v3 = 12;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 5;\nmy $x4 = add($arg40, $arg41);\nmy $v4 = 12;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 572;\nmy $arg51 = 725;\nmy $x5 = add($arg50, $arg51);\nmy $v5 = 1297;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 51;\nmy $arg61 = 804;\nmy $x6 = add($arg60, $arg61);\nmy $v6 = 855;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 645;\nmy $arg71 = 96;\nmy $x7 = add($arg70, $arg71);\nmy $v7 = 741;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 712;\nmy $arg81 = 853;\nmy $x8 = add($arg80, $arg81);\nmy $v8 = 1565;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 223;\nmy $arg91 = 101;\nmy $x9 = add($arg90, $arg91);\nmy $v9 = 324;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 76;\nmy $arg101 = 29;\nmy $x10 = add($arg100, $arg101);\nmy $v10 = 105;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 416;\nmy $arg111 = 149;\nmy $x11 = add($arg110, $arg111);\nmy $v11 = 565;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 145;\nmy $arg121 = 409;\nmy $x12 = add($arg120, $arg121);\nmy $v12 = 554;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 535;\nmy $arg131 = 430;\nmy $x13 = add($arg130, $arg131);\nmy $v13 = 965;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = 118;\nmy $arg141 = 303;\nmy $x14 = add($arg140, $arg141);\nmy $v14 = 421;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = 287;\nmy $arg151 = 94;\nmy $x15 = add($arg150, $arg151);\nmy $v15 = 381;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = 768;\nmy $arg161 = 257;\nmy $x16 = add($arg160, $arg161);\nmy $v16 = 1025;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = 421;\nmy $arg171 = 677;\nmy $x17 = add($arg170, $arg171);\nmy $v17 = 1098;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = 802;\nmy $arg181 = 814;\nmy $x18 = add($arg180, $arg181);\nmy $v18 = 1616;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = 510;\nmy $arg191 = 922;\nmy $x19 = add($arg190, $arg191);\nmy $v19 = 1432;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = 345;\nmy $arg201 = 819;\nmy $x20 = add($arg200, $arg201);\nmy $v20 = 1164;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = 895;\nmy $arg211 = 436;\nmy $x21 = add($arg210, $arg211);\nmy $v21 = 1331;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = 123;\nmy $arg221 = 424;\nmy $x22 = add($arg220, $arg221);\nmy $v22 = 547;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = 923;\nmy $arg231 = 245;\nmy $x23 = add($arg230, $arg231);\nmy $v23 = 1168;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = 23;\nmy $arg241 = 438;\nmy $x24 = add($arg240, $arg241);\nmy $v24 = 461;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\nmy $arg250 = 565;\nmy $arg251 = 133;\nmy $x25 = add($arg250, $arg251);\nmy $v25 = 698;\nunless(Compare($x25, $v25)) {\n    die \"Exception -- test case 25 did not pass.\";\n}\nmy $arg260 = 945;\nmy $arg261 = 925;\nmy $x26 = add($arg260, $arg261);\nmy $v26 = 1870;\nunless(Compare($x26, $v26)) {\n    die \"Exception -- test case 26 did not pass.\";\n}\nmy $arg270 = 261;\nmy $arg271 = 983;\nmy $x27 = add($arg270, $arg271);\nmy $v27 = 1244;\nunless(Compare($x27, $v27)) {\n    die \"Exception -- test case 27 did not pass.\";\n}\nmy $arg280 = 139;\nmy $arg281 = 577;\nmy $x28 = add($arg280, $arg281);\nmy $v28 = 716;\nunless(Compare($x28, $v28)) {\n    die \"Exception -- test case 28 did not pass.\";\n}\nmy $arg290 = 763;\nmy $arg291 = 178;\nmy $x29 = add($arg290, $arg291);\nmy $v29 = 941;\nunless(Compare($x29, $v29)) {\n    die \"Exception -- test case 29 did not pass.\";\n}\nmy $arg300 = 147;\nmy $arg301 = 892;\nmy $x30 = add($arg300, $arg301);\nmy $v30 = 1039;\nunless(Compare($x30, $v30)) {\n    die \"Exception -- test case 30 did not pass.\";\n}\nmy $arg310 = 436;\nmy $arg311 = 402;\nmy $x31 = add($arg310, $arg311);\nmy $v31 = 838;\nunless(Compare($x31, $v31)) {\n    die \"Exception -- test case 31 did not pass.\";\n}\nmy $arg320 = 610;\nmy $arg321 = 581;\nmy $x32 = add($arg320, $arg321);\nmy $v32 = 1191;\nunless(Compare($x32, $v32)) {\n    die \"Exception -- test case 32 did not pass.\";\n}\nmy $arg330 = 103;\nmy $arg331 = 416;\nmy $x33 = add($arg330, $arg331);\nmy $v33 = 519;\nunless(Compare($x33, $v33)) {\n    die \"Exception -- test case 33 did not pass.\";\n}\nmy $arg340 = 339;\nmy $arg341 = 990;\nmy $x34 = add($arg340, $arg341);\nmy $v34 = 1329;\nunless(Compare($x34, $v34)) {\n    die \"Exception -- test case 34 did not pass.\";\n}\nmy $arg350 = 130;\nmy $arg351 = 504;\nmy $x35 = add($arg350, $arg351);\nmy $v35 = 634;\nunless(Compare($x35, $v35)) {\n    die \"Exception -- test case 35 did not pass.\";\n}\nmy $arg360 = 242;\nmy $arg361 = 717;\nmy $x36 = add($arg360, $arg361);\nmy $v36 = 959;\nunless(Compare($x36, $v36)) {\n    die \"Exception -- test case 36 did not pass.\";\n}\nmy $arg370 = 562;\nmy $arg371 = 110;\nmy $x37 = add($arg370, $arg371);\nmy $v37 = 672;\nunless(Compare($x37, $v37)) {\n    die \"Exception -- test case 37 did not pass.\";\n}\nmy $arg380 = 396;\nmy $arg381 = 909;\nmy $x38 = add($arg380, $arg381);\nmy $v38 = 1305;\nunless(Compare($x38, $v38)) {\n    die \"Exception -- test case 38 did not pass.\";\n}\nmy $arg390 = 887;\nmy $arg391 = 703;\nmy $x39 = add($arg390, $arg391);\nmy $v39 = 1590;\nunless(Compare($x39, $v39)) {\n    die \"Exception -- test case 39 did not pass.\";\n}\nmy $arg400 = 870;\nmy $arg401 = 551;\nmy $x40 = add($arg400, $arg401);\nmy $v40 = 1421;\nunless(Compare($x40, $v40)) {\n    die \"Exception -- test case 40 did not pass.\";\n}\nmy $arg410 = 422;\nmy $arg411 = 391;\nmy $x41 = add($arg410, $arg411);\nmy $v41 = 813;\nunless(Compare($x41, $v41)) {\n    die \"Exception -- test case 41 did not pass.\";\n}\nmy $arg420 = 299;\nmy $arg421 = 505;\nmy $x42 = add($arg420, $arg421);\nmy $v42 = 804;\nunless(Compare($x42, $v42)) {\n    die \"Exception -- test case 42 did not pass.\";\n}\nmy $arg430 = 346;\nmy $arg431 = 56;\nmy $x43 = add($arg430, $arg431);\nmy $v43 = 402;\nunless(Compare($x43, $v43)) {\n    die \"Exception -- test case 43 did not pass.\";\n}\nmy $arg440 = 36;\nmy $arg441 = 706;\nmy $x44 = add($arg440, $arg441);\nmy $v44 = 742;\nunless(Compare($x44, $v44)) {\n    die \"Exception -- test case 44 did not pass.\";\n}\nmy $arg450 = 738;\nmy $arg451 = 411;\nmy $x45 = add($arg450, $arg451);\nmy $v45 = 1149;\nunless(Compare($x45, $v45)) {\n    die \"Exception -- test case 45 did not pass.\";\n}\nmy $arg460 = 679;\nmy $arg461 = 87;\nmy $x46 = add($arg460, $arg461);\nmy $v46 = 766;\nunless(Compare($x46, $v46)) {\n    die \"Exception -- test case 46 did not pass.\";\n}\nmy $arg470 = 25;\nmy $arg471 = 303;\nmy $x47 = add($arg470, $arg471);\nmy $v47 = 328;\nunless(Compare($x47, $v47)) {\n    die \"Exception -- test case 47 did not pass.\";\n}\nmy $arg480 = 161;\nmy $arg481 = 612;\nmy $x48 = add($arg480, $arg481);\nmy $v48 = 773;\nunless(Compare($x48, $v48)) {\n    die \"Exception -- test case 48 did not pass.\";\n}\nmy $arg490 = 306;\nmy $arg491 = 841;\nmy $x49 = add($arg490, $arg491);\nmy $v49 = 1147;\nunless(Compare($x49, $v49)) {\n    die \"Exception -- test case 49 did not pass.\";\n}\nmy $arg500 = 973;\nmy $arg501 = 411;\nmy $x50 = add($arg500, $arg501);\nmy $v50 = 1384;\nunless(Compare($x50, $v50)) {\n    die \"Exception -- test case 50 did not pass.\";\n}\nmy $arg510 = 711;\nmy $arg511 = 157;\nmy $x51 = add($arg510, $arg511);\nmy $v51 = 868;\nunless(Compare($x51, $v51)) {\n    die \"Exception -- test case 51 did not pass.\";\n}\nmy $arg520 = 471;\nmy $arg521 = 27;\nmy $x52 = add($arg520, $arg521);\nmy $v52 = 498;\nunless(Compare($x52, $v52)) {\n    die \"Exception -- test case 52 did not pass.\";\n}\nmy $arg530 = 714;\nmy $arg531 = 792;\nmy $x53 = add($arg530, $arg531);\nmy $v53 = 1506;\nunless(Compare($x53, $v53)) {\n    die \"Exception -- test case 53 did not pass.\";\n}\nmy $arg540 = 38;\nmy $arg541 = 206;\nmy $x54 = add($arg540, $arg541);\nmy $v54 = 244;\nunless(Compare($x54, $v54)) {\n    die \"Exception -- test case 54 did not pass.\";\n}\nmy $arg550 = 907;\nmy $arg551 = 343;\nmy $x55 = add($arg550, $arg551);\nmy $v55 = 1250;\nunless(Compare($x55, $v55)) {\n    die \"Exception -- test case 55 did not pass.\";\n}\nmy $arg560 = 23;\nmy $arg561 = 760;\nmy $x56 = add($arg560, $arg561);\nmy $v56 = 783;\nunless(Compare($x56, $v56)) {\n    die \"Exception -- test case 56 did not pass.\";\n}\nmy $arg570 = 524;\nmy $arg571 = 859;\nmy $x57 = add($arg570, $arg571);\nmy $v57 = 1383;\nunless(Compare($x57, $v57)) {\n    die \"Exception -- test case 57 did not pass.\";\n}\nmy $arg580 = 30;\nmy $arg581 = 529;\nmy $x58 = add($arg580, $arg581);\nmy $v58 = 559;\nunless(Compare($x58, $v58)) {\n    die \"Exception -- test case 58 did not pass.\";\n}\nmy $arg590 = 341;\nmy $arg591 = 691;\nmy $x59 = add($arg590, $arg591);\nmy $v59 = 1032;\nunless(Compare($x59, $v59)) {\n    die \"Exception -- test case 59 did not pass.\";\n}\nmy $arg600 = 167;\nmy $arg601 = 729;\nmy $x60 = add($arg600, $arg601);\nmy $v60 = 896;\nunless(Compare($x60, $v60)) {\n    die \"Exception -- test case 60 did not pass.\";\n}\nmy $arg610 = 636;\nmy $arg611 = 289;\nmy $x61 = add($arg610, $arg611);\nmy $v61 = 925;\nunless(Compare($x61, $v61)) {\n    die \"Exception -- test case 61 did not pass.\";\n}\nmy $arg620 = 503;\nmy $arg621 = 144;\nmy $x62 = add($arg620, $arg621);\nmy $v62 = 647;\nunless(Compare($x62, $v62)) {\n    die \"Exception -- test case 62 did not pass.\";\n}\nmy $arg630 = 51;\nmy $arg631 = 985;\nmy $x63 = add($arg630, $arg631);\nmy $v63 = 1036;\nunless(Compare($x63, $v63)) {\n    die \"Exception -- test case 63 did not pass.\";\n}\nmy $arg640 = 287;\nmy $arg641 = 149;\nmy $x64 = add($arg640, $arg641);\nmy $v64 = 436;\nunless(Compare($x64, $v64)) {\n    die \"Exception -- test case 64 did not pass.\";\n}\nmy $arg650 = 659;\nmy $arg651 = 75;\nmy $x65 = add($arg650, $arg651);\nmy $v65 = 734;\nunless(Compare($x65, $v65)) {\n    die \"Exception -- test case 65 did not pass.\";\n}\nmy $arg660 = 462;\nmy $arg661 = 797;\nmy $x66 = add($arg660, $arg661);\nmy $v66 = 1259;\nunless(Compare($x66, $v66)) {\n    die \"Exception -- test case 66 did not pass.\";\n}\nmy $arg670 = 406;\nmy $arg671 = 141;\nmy $x67 = add($arg670, $arg671);\nmy $v67 = 547;\nunless(Compare($x67, $v67)) {\n    die \"Exception -- test case 67 did not pass.\";\n}\nmy $arg680 = 106;\nmy $arg681 = 44;\nmy $x68 = add($arg680, $arg681);\nmy $v68 = 150;\nunless(Compare($x68, $v68)) {\n    die \"Exception -- test case 68 did not pass.\";\n}\nmy $arg690 = 300;\nmy $arg691 = 934;\nmy $x69 = add($arg690, $arg691);\nmy $v69 = 1234;\nunless(Compare($x69, $v69)) {\n    die \"Exception -- test case 69 did not pass.\";\n}\nmy $arg700 = 471;\nmy $arg701 = 524;\nmy $x70 = add($arg700, $arg701);\nmy $v70 = 995;\nunless(Compare($x70, $v70)) {\n    die \"Exception -- test case 70 did not pass.\";\n}\nmy $arg710 = 122;\nmy $arg711 = 429;\nmy $x71 = add($arg710, $arg711);\nmy $v71 = 551;\nunless(Compare($x71, $v71)) {\n    die \"Exception -- test case 71 did not pass.\";\n}\nmy $arg720 = 735;\nmy $arg721 = 195;\nmy $x72 = add($arg720, $arg721);\nmy $v72 = 930;\nunless(Compare($x72, $v72)) {\n    die \"Exception -- test case 72 did not pass.\";\n}\nmy $arg730 = 335;\nmy $arg731 = 484;\nmy $x73 = add($arg730, $arg731);\nmy $v73 = 819;\nunless(Compare($x73, $v73)) {\n    die \"Exception -- test case 73 did not pass.\";\n}\nmy $arg740 = 28;\nmy $arg741 = 809;\nmy $x74 = add($arg740, $arg741);\nmy $v74 = 837;\nunless(Compare($x74, $v74)) {\n    die \"Exception -- test case 74 did not pass.\";\n}\nmy $arg750 = 430;\nmy $arg751 = 20;\nmy $x75 = add($arg750, $arg751);\nmy $v75 = 450;\nunless(Compare($x75, $v75)) {\n    die \"Exception -- test case 75 did not pass.\";\n}\nmy $arg760 = 916;\nmy $arg761 = 635;\nmy $x76 = add($arg760, $arg761);\nmy $v76 = 1551;\nunless(Compare($x76, $v76)) {\n    die \"Exception -- test case 76 did not pass.\";\n}\nmy $arg770 = 301;\nmy $arg771 = 999;\nmy $x77 = add($arg770, $arg771);\nmy $v77 = 1300;\nunless(Compare($x77, $v77)) {\n    die \"Exception -- test case 77 did not pass.\";\n}\nmy $arg780 = 454;\nmy $arg781 = 466;\nmy $x78 = add($arg780, $arg781);\nmy $v78 = 920;\nunless(Compare($x78, $v78)) {\n    die \"Exception -- test case 78 did not pass.\";\n}\nmy $arg790 = 905;\nmy $arg791 = 259;\nmy $x79 = add($arg790, $arg791);\nmy $v79 = 1164;\nunless(Compare($x79, $v79)) {\n    die \"Exception -- test case 79 did not pass.\";\n}\nmy $arg800 = 168;\nmy $arg801 = 205;\nmy $x80 = add($arg800, $arg801);\nmy $v80 = 373;\nunless(Compare($x80, $v80)) {\n    die \"Exception -- test case 80 did not pass.\";\n}\nmy $arg810 = 570;\nmy $arg811 = 434;\nmy $x81 = add($arg810, $arg811);\nmy $v81 = 1004;\nunless(Compare($x81, $v81)) {\n    die \"Exception -- test case 81 did not pass.\";\n}\nmy $arg820 = 64;\nmy $arg821 = 959;\nmy $x82 = add($arg820, $arg821);\nmy $v82 = 1023;\nunless(Compare($x82, $v82)) {\n    die \"Exception -- test case 82 did not pass.\";\n}\nmy $arg830 = 957;\nmy $arg831 = 510;\nmy $x83 = add($arg830, $arg831);\nmy $v83 = 1467;\nunless(Compare($x83, $v83)) {\n    die \"Exception -- test case 83 did not pass.\";\n}\nmy $arg840 = 722;\nmy $arg841 = 598;\nmy $x84 = add($arg840, $arg841);\nmy $v84 = 1320;\nunless(Compare($x84, $v84)) {\n    die \"Exception -- test case 84 did not pass.\";\n}\nmy $arg850 = 770;\nmy $arg851 = 226;\nmy $x85 = add($arg850, $arg851);\nmy $v85 = 996;\nunless(Compare($x85, $v85)) {\n    die \"Exception -- test case 85 did not pass.\";\n}\nmy $arg860 = 579;\nmy $arg861 = 66;\nmy $x86 = add($arg860, $arg861);\nmy $v86 = 645;\nunless(Compare($x86, $v86)) {\n    die \"Exception -- test case 86 did not pass.\";\n}\nmy $arg870 = 117;\nmy $arg871 = 674;\nmy $x87 = add($arg870, $arg871);\nmy $v87 = 791;\nunless(Compare($x87, $v87)) {\n    die \"Exception -- test case 87 did not pass.\";\n}\nmy $arg880 = 530;\nmy $arg881 = 30;\nmy $x88 = add($arg880, $arg881);\nmy $v88 = 560;\nunless(Compare($x88, $v88)) {\n    die \"Exception -- test case 88 did not pass.\";\n}\nmy $arg890 = 776;\nmy $arg891 = 345;\nmy $x89 = add($arg890, $arg891);\nmy $v89 = 1121;\nunless(Compare($x89, $v89)) {\n    die \"Exception -- test case 89 did not pass.\";\n}\nmy $arg900 = 327;\nmy $arg901 = 389;\nmy $x90 = add($arg900, $arg901);\nmy $v90 = 716;\nunless(Compare($x90, $v90)) {\n    die \"Exception -- test case 90 did not pass.\";\n}\nmy $arg910 = 596;\nmy $arg911 = 12;\nmy $x91 = add($arg910, $arg911);\nmy $v91 = 608;\nunless(Compare($x91, $v91)) {\n    die \"Exception -- test case 91 did not pass.\";\n}\nmy $arg920 = 599;\nmy $arg921 = 511;\nmy $x92 = add($arg920, $arg921);\nmy $v92 = 1110;\nunless(Compare($x92, $v92)) {\n    die \"Exception -- test case 92 did not pass.\";\n}\nmy $arg930 = 936;\nmy $arg931 = 476;\nmy $x93 = add($arg930, $arg931);\nmy $v93 = 1412;\nunless(Compare($x93, $v93)) {\n    die \"Exception -- test case 93 did not pass.\";\n}\nmy $arg940 = 461;\nmy $arg941 = 14;\nmy $x94 = add($arg940, $arg941);\nmy $v94 = 475;\nunless(Compare($x94, $v94)) {\n    die \"Exception -- test case 94 did not pass.\";\n}\nmy $arg950 = 966;\nmy $arg951 = 157;\nmy $x95 = add($arg950, $arg951);\nmy $v95 = 1123;\nunless(Compare($x95, $v95)) {\n    die \"Exception -- test case 95 did not pass.\";\n}\nmy $arg960 = 326;\nmy $arg961 = 91;\nmy $x96 = add($arg960, $arg961);\nmy $v96 = 417;\nunless(Compare($x96, $v96)) {\n    die \"Exception -- test case 96 did not pass.\";\n}\nmy $arg970 = 392;\nmy $arg971 = 455;\nmy $x97 = add($arg970, $arg971);\nmy $v97 = 847;\nunless(Compare($x97, $v97)) {\n    die \"Exception -- test case 97 did not pass.\";\n}\nmy $arg980 = 446;\nmy $arg981 = 477;\nmy $x98 = add($arg980, $arg981);\nmy $v98 = 923;\nunless(Compare($x98, $v98)) {\n    die \"Exception -- test case 98 did not pass.\";\n}\nmy $arg990 = 324;\nmy $arg991 = 860;\nmy $x99 = add($arg990, $arg991);\nmy $v99 = 1184;\nunless(Compare($x99, $v99)) {\n    die \"Exception -- test case 99 did not pass.\";\n}\nmy $arg1000 = 945;\nmy $arg1001 = 85;\nmy $x100 = add($arg1000, $arg1001);\nmy $v100 = 1030;\nunless(Compare($x100, $v100)) {\n    die \"Exception -- test case 100 did not pass.\";\n}\nmy $arg1010 = 886;\nmy $arg1011 = 582;\nmy $x101 = add($arg1010, $arg1011);\nmy $v101 = 1468;\nunless(Compare($x101, $v101)) {\n    die \"Exception -- test case 101 did not pass.\";\n}\nmy $arg1020 = 886;\nmy $arg1021 = 712;\nmy $x102 = add($arg1020, $arg1021);\nmy $v102 = 1598;\nunless(Compare($x102, $v102)) {\n    die \"Exception -- test case 102 did not pass.\";\n}\nmy $arg1030 = 842;\nmy $arg1031 = 953;\nmy $x103 = add($arg1030, $arg1031);\nmy $v103 = 1795;\nunless(Compare($x103, $v103)) {\n    die \"Exception -- test case 103 did not pass.\";\n}\n", "description": "Voeg twee getalle x en y by.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/20", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Kyk of twee woorde dieselfde karakters het.\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# True\n# >>> same_chars('abcd', 'dddddddabc')\n# True\n# >>> same_chars('dddddddabc', 'abcd')\n# True\n# >>> same_chars('eabcd', 'dddddddabc')\n# False\n# >>> same_chars('abcd', 'dddddddabce')\n# False\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# False\n#\nsub same_chars\n{\n  my ($s0, $s1) = @_;\n", "entry_point": "same_chars", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"eabcdzzzz\";\nmy $arg01 = \"dddzzzzzzzddeddabc\";\nmy $x0 = same_chars($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcd\";\nmy $arg11 = \"dddddddabc\";\nmy $x1 = same_chars($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"dddddddabc\";\nmy $arg21 = \"abcd\";\nmy $x2 = same_chars($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"eabcd\";\nmy $arg31 = \"dddddddabc\";\nmy $x3 = same_chars($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abcd\";\nmy $arg41 = \"dddddddabcf\";\nmy $x4 = same_chars($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"eabcdzzzz\";\nmy $arg51 = \"dddzzzzzzzddddabc\";\nmy $x5 = same_chars($arg50, $arg51);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"aabb\";\nmy $arg61 = \"aaccc\";\nmy $x6 = same_chars($arg60, $arg61);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Kyk of twee woorde dieselfde karakters het.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/21", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee die n-de Fibonacci-getal terug.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\n#\nsub fib\n{\n  my ($n) = @_;\n", "entry_point": "fib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 10;\nmy $x0 = fib($arg00);\nmy $v0 = 55;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fib($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = fib($arg20);\nmy $v2 = 21;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 11;\nmy $x3 = fib($arg30);\nmy $v3 = 89;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 12;\nmy $x4 = fib($arg40);\nmy $v4 = 144;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gee die n-de Fibonacci-getal terug.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/22", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee gesorteerde unieke gemeenskaplike elemente vir twee lys.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\n\n#\nsub common\n{\n  my ($l1, $l2) = @_;\n", "entry_point": "common", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 4, 3, 34, 653, 2, 5];\nmy $arg01 = [5, 7, 1, 5, 9, 653, 121];\nmy $x0 = common($arg00, $arg01);\nmy $v0 = [1, 5, 653];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 3, 2, 8];\nmy $arg11 = [3, 2];\nmy $x1 = common($arg10, $arg11);\nmy $v1 = [2, 3];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 2, 8];\nmy $arg21 = [3, 2, 4];\nmy $x2 = common($arg20, $arg21);\nmy $v2 = [2, 3, 4];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 3, 2, 8];\nmy $arg31 = [];\nmy $x3 = common($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Gee gesorteerde unieke gemeenskaplike elemente vir twee lys.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/23", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gee die grootste priemfaktor van n terug. Aanvaar dat n > 1 en nie 'n priemgetal is nie.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n#\nsub largest_prime_factor\n{\n  my ($n) = @_;\n", "entry_point": "largest_prime_factor", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 15;\nmy $x0 = largest_prime_factor($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 27;\nmy $x1 = largest_prime_factor($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 63;\nmy $x2 = largest_prime_factor($arg20);\nmy $v2 = 7;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 330;\nmy $x3 = largest_prime_factor($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 13195;\nmy $x4 = largest_prime_factor($arg40);\nmy $v4 = 29;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gee die grootste priemfaktor van n terug. Aanvaar dat n > 1 en nie 'n priemgetal is nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/24", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# sum_to_n is 'n funksie wat getalle van 1 tot n optel.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\n#\nsub sum_to_n\n{\n  my ($n) = @_;\n", "entry_point": "sum_to_n", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $x0 = sum_to_n($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = sum_to_n($arg10);\nmy $v1 = 21;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 11;\nmy $x2 = sum_to_n($arg20);\nmy $v2 = 66;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 30;\nmy $x3 = sum_to_n($arg30);\nmy $v3 = 465;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 100;\nmy $x4 = sum_to_n($arg40);\nmy $v4 = 5050;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "sum_to_n is 'n funksie wat getalle van 1 tot n optel.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/25", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# xs verteenwoordig koëffisiënte van 'n polinoom.\n#     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#     Gee die afgeleide van hierdie polinoom terug in dieselfde vorm.\n# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\n#\nsub derivative\n{\n  my ($xs) = @_;\n", "entry_point": "derivative", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 1, 2, 4, 5];\nmy $x0 = derivative($arg00);\nmy $v0 = [1, 4, 12, 20];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3];\nmy $x1 = derivative($arg10);\nmy $v1 = [2, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 2, 1];\nmy $x2 = derivative($arg20);\nmy $v2 = [2, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 1, 0, 4];\nmy $x3 = derivative($arg30);\nmy $v3 = [2, 2, 0, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $x4 = derivative($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "xs verteenwoordig koëffisiënte van 'n polinoom.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Gee die afgeleide van hierdie polinoom terug in dieselfde vorm.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/26", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Die FibFib getalreeks is 'n reeks soortgelyk aan die Fibbonacci-reeks wat as volg gedefinieer word:\n#     fibfib(0) == 0\n#     fibfib(1) == 0\n#     fibfib(2) == 1\n#     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n#     Skryf asseblief 'n funksie om die n-de element van die fibfib getalreeks effektief te bereken.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\n#\nsub fibfib\n{\n  my ($n) = @_;\n", "entry_point": "fibfib", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $x0 = fibfib($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $x1 = fibfib($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = fibfib($arg20);\nmy $v2 = 4;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 8;\nmy $x3 = fibfib($arg30);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 10;\nmy $x4 = fibfib($arg40);\nmy $v4 = 81;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 12;\nmy $x5 = fibfib($arg50);\nmy $v5 = 274;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 14;\nmy $x6 = fibfib($arg60);\nmy $v6 = 927;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Die FibFib getalreeks is 'n reeks soortgelyk aan die Fibbonacci-reeks wat as volg gedefinieer word:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Skryf asseblief 'n funksie om die n-de element van die fibfib getalreeks effektief te bereken.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/27", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Skryf 'n funksie vowels_count wat 'n string wat 'n woord voorstel as inset neem en die aantal klinkers in die string teruggee. Klinkers in hierdie geval is 'a', 'e', 'i', 'o', 'u'. Hier is 'y' ook 'n klinker, maar slegs as dit aan die einde van die gegewe woord is.\n# \n# Voorbeeld:\n# >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\n#\nsub vowels_count\n{\n  my ($s) = @_;\n", "entry_point": "vowels_count", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $x0 = vowels_count($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Alone\";\nmy $x1 = vowels_count($arg10);\nmy $v1 = 3;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"key\";\nmy $x2 = vowels_count($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bye\";\nmy $x3 = vowels_count($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"keY\";\nmy $x4 = vowels_count($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"bYe\";\nmy $x5 = vowels_count($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"ACEDY\";\nmy $x6 = vowels_count($arg60);\nmy $v6 = 3;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Skryf 'n funksie vowels_count wat 'n string wat 'n woord voorstel as inset neem en die aantal klinkers in die string teruggee. Klinkers in hierdie geval is 'a', 'e', 'i', 'o', 'u'. Hier is 'y' ook 'n klinker, maar slegs as dit aan die einde van die gegewe woord is.\n\nVoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/28", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n nie-leë lys van positiewe heelgetalle. Gee die grootste heelgetal terug wat groter is as nul en 'n frekwensie het wat groter is as of gelyk is aan die waarde van die heelgetal self. Die frekwensie van 'n heelgetal is die aantal kere wat dit in die lys voorkom. As daar geen sulke waarde bestaan nie, gee -1 terug. Voorbeelde:\n# \n#     search([4, 1, 2, 2, 3, 1]) == 2\n#     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n#     search([5, 5, 4, 4, 4]) == -1\n#\nsub search\n{\n  my ($lst) = @_;\n", "entry_point": "search", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, 5, 5, 5, 1];\nmy $x0 = search($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, 1, 4, 1, 4, 4];\nmy $x1 = search($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3, 3];\nmy $x2 = search($arg20);\nmy $v2 = -1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [8, 8, 8, 8, 8, 8, 8, 8];\nmy $x3 = search($arg30);\nmy $v3 = 8;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [2, 3, 3, 2, 2];\nmy $x4 = search($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1];\nmy $x5 = search($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [3, 2, 8, 2];\nmy $x6 = search($arg60);\nmy $v6 = 2;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10];\nmy $x7 = search($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [8, 8, 3, 6, 5, 6, 4];\nmy $x8 = search($arg80);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9];\nmy $x9 = search($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 9, 10, 1, 3];\nmy $x10 = search($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10];\nmy $x11 = search($arg110);\nmy $v11 = 5;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = [1];\nmy $x12 = search($arg120);\nmy $v12 = 1;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5];\nmy $x13 = search($arg130);\nmy $v13 = 4;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10];\nmy $x14 = search($arg140);\nmy $v14 = 2;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3];\nmy $x15 = search($arg150);\nmy $v15 = 1;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\nmy $arg160 = [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4];\nmy $x16 = search($arg160);\nmy $v16 = 4;\nunless(Compare($x16, $v16)) {\n    die \"Exception -- test case 16 did not pass.\";\n}\nmy $arg170 = [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7];\nmy $x17 = search($arg170);\nmy $v17 = 4;\nunless(Compare($x17, $v17)) {\n    die \"Exception -- test case 17 did not pass.\";\n}\nmy $arg180 = [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1];\nmy $x18 = search($arg180);\nmy $v18 = 2;\nunless(Compare($x18, $v18)) {\n    die \"Exception -- test case 18 did not pass.\";\n}\nmy $arg190 = [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8];\nmy $x19 = search($arg190);\nmy $v19 = -1;\nunless(Compare($x19, $v19)) {\n    die \"Exception -- test case 19 did not pass.\";\n}\nmy $arg200 = [10];\nmy $x20 = search($arg200);\nmy $v20 = -1;\nunless(Compare($x20, $v20)) {\n    die \"Exception -- test case 20 did not pass.\";\n}\nmy $arg210 = [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2];\nmy $x21 = search($arg210);\nmy $v21 = 2;\nunless(Compare($x21, $v21)) {\n    die \"Exception -- test case 21 did not pass.\";\n}\nmy $arg220 = [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8];\nmy $x22 = search($arg220);\nmy $v22 = 1;\nunless(Compare($x22, $v22)) {\n    die \"Exception -- test case 22 did not pass.\";\n}\nmy $arg230 = [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6];\nmy $x23 = search($arg230);\nmy $v23 = 1;\nunless(Compare($x23, $v23)) {\n    die \"Exception -- test case 23 did not pass.\";\n}\nmy $arg240 = [3, 10, 10, 9, 2];\nmy $x24 = search($arg240);\nmy $v24 = -1;\nunless(Compare($x24, $v24)) {\n    die \"Exception -- test case 24 did not pass.\";\n}\n", "description": "Jy kry 'n nie-leë lys van positiewe heelgetalle. Gee die grootste heelgetal terug wat groter is as nul en 'n frekwensie het wat groter is as of gelyk is aan die waarde van die heelgetal self. Die frekwensie van 'n heelgetal is die aantal kere wat dit in die lys voorkom. As daar geen sulke waarde bestaan nie, gee -1 terug. Voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/29", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee die lengtes van die drie sye van 'n driehoek. Gee die oppervlakte van die driehoek terug afgerond tot 2 desimale punte as die drie sye 'n geldige driehoek vorm. Anders gee -1 terug. Drie sye maak 'n geldige driehoek wanneer die som van enige twee sye groter is as die derde sy. Voorbeeld:\n# \n# triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\n#\nsub triangle_area\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "triangle_area", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = triangle_area($arg00, $arg01, $arg02);\nmy $v0 = 6.0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 10;\nmy $x1 = triangle_area($arg10, $arg11, $arg12);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 4;\nmy $arg21 = 8;\nmy $arg22 = 5;\nmy $x2 = triangle_area($arg20, $arg21, $arg22);\nmy $v2 = 8.18;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = triangle_area($arg30, $arg31, $arg32);\nmy $v3 = 1.73;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 1;\nmy $arg41 = 2;\nmy $arg42 = 3;\nmy $x4 = triangle_area($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = triangle_area($arg50, $arg51, $arg52);\nmy $v5 = 16.25;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2;\nmy $arg61 = 6;\nmy $arg62 = 3;\nmy $x6 = triangle_area($arg60, $arg61, $arg62);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $arg71 = 1;\nmy $arg72 = 1;\nmy $x7 = triangle_area($arg70, $arg71, $arg72);\nmy $v7 = 0.43;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 2;\nmy $arg81 = 2;\nmy $arg82 = 10;\nmy $x8 = triangle_area($arg80, $arg81, $arg82);\nmy $v8 = -1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Gegee die lengtes van die drie sye van 'n driehoek. Gee die oppervlakte van die driehoek terug afgerond tot 2 desimale punte as die drie sye 'n geldige driehoek vorm. Anders gee -1 terug. Drie sye maak 'n geldige driehoek wanneer die som van enige twee sye groter is as die derde sy. Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/30", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skryf 'n funksie wat True teruggee as die voorwerp q sal vlieg, en andersins False.\n# Die voorwerp q sal vlieg as dit gebalanseerd is (dit is 'n palindromiese lys) en die som van sy elemente minder as of gelyk aan die maksimum moontlike gewig w is.\n# \n# Voorbeeld:\n# will_it_fly([1, 2], 5) ➞ False\n# # 1+2 is minder as die maksimum moontlike gewig, maar dit is ongebalanseerd.\n# \n# will_it_fly([3, 2, 3], 1) ➞ False\n# # dit is gebalanseerd, maar 3+2+3 is meer as die maksimum moontlike gewig.\n# \n# will_it_fly([3, 2, 3], 9) ➞ True\n# # 3+2+3 is minder as die maksimum moontlike gewig, en dit is gebalanseerd.\n# \n# will_it_fly([3], 5) ➞ True\n# # 3 is minder as die maksimum moontlike gewig, en dit is gebalanseerd.\n# \n#\nsub will_it_fly\n{\n  my ($q, $w) = @_;\n", "entry_point": "will_it_fly", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 2, 3];\nmy $arg01 = 9;\nmy $x0 = will_it_fly($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2];\nmy $arg11 = 5;\nmy $x1 = will_it_fly($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [3];\nmy $arg21 = 5;\nmy $x2 = will_it_fly($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 2, 3];\nmy $arg31 = 1;\nmy $x3 = will_it_fly($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3];\nmy $arg41 = 6;\nmy $x4 = will_it_fly($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5];\nmy $arg51 = 5;\nmy $x5 = will_it_fly($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Skryf 'n funksie wat True teruggee as die voorwerp q sal vlieg, en andersins False.\nDie voorwerp q sal vlieg as dit gebalanseerd is (dit is 'n palindromiese lys) en die som van sy elemente minder as of gelyk aan die maksimum moontlike gewig w is.\n\nVoorbeeld:\nwill_it_fly([1, 2], 5) ➞ False\n# 1+2 is minder as die maksimum moontlike gewig, maar dit is ongebalanseerd.\n\nwill_it_fly([3, 2, 3], 1) ➞ False\n# dit is gebalanseerd, maar 3+2+3 is meer as die maksimum moontlike gewig.\n\nwill_it_fly([3, 2, 3], 9) ➞ True\n# 3+2+3 is minder as die maksimum moontlike gewig, en dit is gebalanseerd.\n\nwill_it_fly([3], 5) ➞ True\n# 3 is minder as die maksimum moontlike gewig, en dit is gebalanseerd.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/31", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Skryf 'n funksie wat waar teruggee as die gegewe getal die vermenigvuldiging van 3 priemgetalle is en vals andersins. Wetende dat (a) minder as 100 is. Voorbeeld:\n# \n# is_multiply_prime(30) == True\n# 30 = 2 * 3 * 5\n#\nsub is_multiply_prime\n{\n  my ($a) = @_;\n", "entry_point": "is_multiply_prime", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = is_multiply_prime($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 30;\nmy $x1 = is_multiply_prime($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 8;\nmy $x2 = is_multiply_prime($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 10;\nmy $x3 = is_multiply_prime($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 125;\nmy $x4 = is_multiply_prime($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 105;\nmy $x5 = is_multiply_prime($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 126;\nmy $x6 = is_multiply_prime($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 729;\nmy $x7 = is_multiply_prime($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 891;\nmy $x8 = is_multiply_prime($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1001;\nmy $x9 = is_multiply_prime($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Skryf 'n funksie wat waar teruggee as die gegewe getal die vermenigvuldiging van 3 priemgetalle is en vals andersins. Wetende dat (a) minder as 100 is. Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/32", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy sal 'n nommer in desimale vorm ontvang en jou taak is om dit na binêre formaat te omskep. Die funksie moet 'n string teruggee, met elke karakter wat 'n binêre nommer voorstel. Elke karakter in die string sal 'n '0' of '1' wees.\n# \n# Daar sal 'n paar ekstra karakters 'db' aan die begin en einde van die string wees. Die ekstra karakters is daar om met die formaat te help.\n# \n# Voorbeelde:\n# \n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns \"db100000db\"\n#\nsub decimal_to_binary\n{\n  my ($decimal) = @_;\n", "entry_point": "decimal_to_binary", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 0;\nmy $x0 = decimal_to_binary($arg00);\nmy $v0 = \"db0db\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 32;\nmy $x1 = decimal_to_binary($arg10);\nmy $v1 = \"db100000db\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 103;\nmy $x2 = decimal_to_binary($arg20);\nmy $v2 = \"db1100111db\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 15;\nmy $x3 = decimal_to_binary($arg30);\nmy $v3 = \"db1111db\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Jy sal 'n nommer in desimale vorm ontvang en jou taak is om dit na binêre formaat te omskep. Die funksie moet 'n string teruggee, met elke karakter wat 'n binêre nommer voorstel. Elke karakter in die string sal 'n '0' of '1' wees.\n\nDaar sal 'n paar ekstra karakters 'db' aan die begin en einde van die string wees. Die ekstra karakters is daar om met die formaat te help.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/33", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 'n string s.\n#     Jou taak is om te kyk of die string gelukkig is of nie.\n#     'n String is gelukkig as sy lengte ten minste 3 is en elke 3 opeenvolgende letters verskillend is.\n#     Byvoorbeeld:\n# \n# is_happy(a) => False\n# is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb) => True\n# is_happy(xyy) => False\n#\nsub is_happy\n{\n  my ($s) = @_;\n", "entry_point": "is_happy", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"a\";\nmy $x0 = is_happy($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"aa\";\nmy $x1 = is_happy($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcd\";\nmy $x2 = is_happy($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"aabb\";\nmy $x3 = is_happy($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"adb\";\nmy $x4 = is_happy($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"xyy\";\nmy $x5 = is_happy($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"iopaxpoi\";\nmy $x6 = is_happy($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"iopaxioi\";\nmy $x7 = is_happy($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Jy kry 'n string s.\n    Jou taak is om te kyk of die string gelukkig is of nie.\n    'n String is gelukkig as sy lengte ten minste 3 is en elke 3 opeenvolgende letters verskillend is.\n    Byvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/34", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Dit is die laaste week van die semester en die onderwyser moet die punte aan die studente gee. Die onderwyser het haar eie algoritme vir gradering gemaak. Die enigste probleem is dat sy die kode wat sy vir gradering gebruik het, verloor het. Sy het 'n lys van GPAs vir sommige studente gegee en jy moet 'n funksie skryf wat 'n lys van lettergrade kan uitvoer deur die volgende tabel te gebruik: \n#              GPA       |    Letter grade\n#               4.0                A+\n#             > 3.7                A \n#             > 3.3                A- \n#             > 3.0                B+\n#             > 2.7                B \n#             > 2.3                B-\n#             > 2.0                C+\n#             > 1.7                C\n#             > 1.3                C-\n#             > 1.0                D+ \n#             > 0.7                D \n#             > 0.0                D-\n#               0.0                E\n#     \n#     Voorbeeld:\n# \n# grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n#\nsub numerical_letter_grade\n{\n  my ($grades) = @_;\n", "entry_point": "numerical_letter_grade", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [4.0, 3, 1.7, 2, 3.5];\nmy $x0 = numerical_letter_grade($arg00);\nmy $v0 = [\"A+\", \"B\", \"C-\", \"C\", \"A-\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.2];\nmy $x1 = numerical_letter_grade($arg10);\nmy $v1 = [\"D+\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.5];\nmy $x2 = numerical_letter_grade($arg20);\nmy $v2 = [\"D-\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0.0];\nmy $x3 = numerical_letter_grade($arg30);\nmy $v3 = [\"E\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 0.3, 1.5, 2.8, 3.3];\nmy $x4 = numerical_letter_grade($arg40);\nmy $v4 = [\"D\", \"D-\", \"C-\", \"B\", \"B+\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 0.7];\nmy $x5 = numerical_letter_grade($arg50);\nmy $v5 = [\"E\", \"D-\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Dit is die laaste week van die semester en die onderwyser moet die punte aan die studente gee. Die onderwyser het haar eie algoritme vir gradering gemaak. Die enigste probleem is dat sy die kode wat sy vir gradering gebruik het, verloor het. Sy het 'n lys van GPAs vir sommige studente gegee en jy moet 'n funksie skryf wat 'n lys van lettergrade kan uitvoer deur die volgende tabel te gebruik: \n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/35", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Skryf 'n funksie wat 'n string neem en True teruggee as die stringlengte 'n priemgetal is of andersins vals teruggee\n#     Voorbeelde\n# \n# prime_length('Hello') == True\n# prime_length('abcdcba') == True\n# prime_length('kittens') == True\n# prime_length('orange') == False\n#\nsub prime_length\n{\n  my ($string) = @_;\n", "entry_point": "prime_length", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello\";\nmy $x0 = prime_length($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdcba\";\nmy $x1 = prime_length($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"kittens\";\nmy $x2 = prime_length($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"orange\";\nmy $x3 = prime_length($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"wow\";\nmy $x4 = prime_length($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"world\";\nmy $x5 = prime_length($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"MadaM\";\nmy $x6 = prime_length($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"Wow\";\nmy $x7 = prime_length($arg70);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"\";\nmy $x8 = prime_length($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"HI\";\nmy $x9 = prime_length($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"go\";\nmy $x10 = prime_length($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"gogo\";\nmy $x11 = prime_length($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"aaaaaaaaaaaaaaa\";\nmy $x12 = prime_length($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"Madam\";\nmy $x13 = prime_length($arg130);\nmy $v13 = 1;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\nmy $arg140 = \"M\";\nmy $x14 = prime_length($arg140);\nmy $v14 = 0;\nunless(Compare($x14, $v14)) {\n    die \"Exception -- test case 14 did not pass.\";\n}\nmy $arg150 = \"0\";\nmy $x15 = prime_length($arg150);\nmy $v15 = 0;\nunless(Compare($x15, $v15)) {\n    die \"Exception -- test case 15 did not pass.\";\n}\n", "description": "Skryf 'n funksie wat 'n string neem en True teruggee as die stringlengte 'n priemgetal is of andersins vals teruggee\n    Voorbeelde", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/36", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gegee 'n positiewe heelgetal N, gee die totale som van sy syfers in binêre vorm terug.\n# \n#     Voorbeeld\n#         Vir N = 1000, sal die som van syfers 1 wees en die uitset moet \"1\" wees.\n#         Vir N = 150, sal die som van syfers 6 wees en die uitset moet \"110\" wees.\n#         Vir N = 147, sal die som van syfers 12 wees en die uitset moet \"1100\" wees.\n#     \n#     Veranderlikes:\n#         @N heelgetal\n#              Beperkings: 0 ≤ N ≤ 10000.\n#     Uitset:\n#          'n string van binêre nommer.\n# \n#\nsub solve\n{\n  my ($n) = @_;\n", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1000;\nmy $x0 = solve($arg00);\nmy $v0 = \"1\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 150;\nmy $x1 = solve($arg10);\nmy $v1 = \"110\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 147;\nmy $x2 = solve($arg20);\nmy $v2 = \"1100\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 333;\nmy $x3 = solve($arg30);\nmy $v3 = \"1001\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 963;\nmy $x4 = solve($arg40);\nmy $v4 = \"10010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gegee 'n positiewe heelgetal N, gee die totale som van sy syfers in binêre vorm terug.\n\n    Voorbeeld\n        Vir N = 1000, sal die som van syfers 1 wees en die uitset moet \"1\" wees.\n        Vir N = 150, sal die som van syfers 6 wees en die uitset moet \"110\" wees.\n        Vir N = 147, sal die som van syfers 12 wees en die uitset moet \"1100\" wees.\n    \n    Veranderlikes:\n        @N heelgetal\n             Beperkings: 0 ≤ N ≤ 10000.\n    Uitset:\n         'n string van binêre nommer.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/37", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n 2-dimensionele data, as 'n geneste lys,\n# wat soortgelyk is aan 'n matriks, maar anders as matrikse,\n# kan elke ry 'n ander aantal kolomme bevat.\n# Gegee lst en 'n heelgetal x, vind heelgetalle x in die lys,\n# en gee 'n lys van tuples terug, [(x1, y1), (x2, y2) ...] sodat\n# elke tuple 'n koördinaat is - (ry, kolomme), beginnende met 0.\n# Sorteer koördinate aanvanklik volgens rye in oplopende volgorde.\n# Sorteer ook koördinate van die ry volgens kolomme in aflopende volgorde.\n# \n# Voorbeelde:\n# \n# get_row([\n#   [1,2,3,4,5,6],\n#   [1,2,3,4,1,6],\n#   [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([], 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n#\nsub get_row\n{\n  my ($lst, $x) = @_;\n", "entry_point": "get_row", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $arg01 = 1;\nmy $x0 = get_row($arg00, $arg01);\nmy $v0 = [];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[1]];\nmy $arg11 = 2;\nmy $x1 = get_row($arg10, $arg11);\nmy $v1 = [];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[], [1], [1, 2, 3]];\nmy $arg21 = 3;\nmy $x2 = get_row($arg20, $arg21);\nmy $v2 = [[2, 2]];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\n", "description": "Jy kry 'n 2-dimensionele data, as 'n geneste lys,\nwat soortgelyk is aan 'n matriks, maar anders as matrikse,\nkan elke ry 'n ander aantal kolomme bevat.\nGegee lst en 'n heelgetal x, vind heelgetalle x in die lys,\nen gee 'n lys van tuples terug, [(x1, y1), (x2, y2) ...] sodat\nelke tuple 'n koördinaat is - (ry, kolomme), beginnende met 0.\nSorteer koördinate aanvanklik volgens rye in oplopende volgorde.\nSorteer ook koördinate van die ry volgens kolomme in aflopende volgorde.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/38", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n lys van heelgetalle.\n#     Skryf 'n funksie next_smallest() wat die tweede kleinste element van die lys teruggee.\n#     Gee null terug as daar geen sulke element is nie.\n# next_smallest([1, 2, 3, 4, 5]) == 2\n# next_smallest([5, 1, 4, 3, 2]) == 2\n# next_smallest([]) == None\n# next_smallest([1, 1]) == None\n#\nsub next_smallest\n{\n  my ($lst) = @_;\n", "entry_point": "next_smallest", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4, 5];\nmy $x0 = next_smallest($arg00);\nmy $v0 = 2;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 1, 4, 3, 2];\nmy $x1 = next_smallest($arg10);\nmy $v1 = 2;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = next_smallest($arg20);\nmy $v2 = \"none\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, 1];\nmy $x3 = next_smallest($arg30);\nmy $v3 = \"none\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 1, 1, 1, 0];\nmy $x4 = next_smallest($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 1];\nmy $x5 = next_smallest($arg50);\nmy $v5 = \"none\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-35, 34, 12, -45];\nmy $x6 = next_smallest($arg60);\nmy $v6 = -35;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Jy kry 'n lys van heelgetalle.\n    Skryf 'n funksie next_smallest() wat die tweede kleinste element van die lys teruggee.\n    Gee null terug as daar geen sulke element is nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/39", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy sal 'n string van woorde gegee word, en jou taak is om die aantal vervelings te tel. 'n Verveling is 'n sin wat met die woord \"Ek\" begin. Sinne word afgebaken deur '.', '?' of '!'. \n# \n# Byvoorbeeld:\n# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\n#\nsub is_bored\n{\n  my ($s) = @_;\n", "entry_point": "is_bored", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = is_bored($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Is the sky blue?\";\nmy $x1 = is_bored($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"I love It !\";\nmy $x2 = is_bored($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"bIt\";\nmy $x3 = is_bored($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"I feel good today. I will be productive. will kill It\";\nmy $x4 = is_bored($arg40);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"You and I are going for a walk\";\nmy $x5 = is_bored($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Jy sal 'n string van woorde gegee word, en jou taak is om die aantal vervelings te tel. 'n Verveling is 'n sin wat met die woord \"Ek\" begin. Sinne word afgebaken deur '.', '?' of '!'. \n\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/40", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 'n lys van heelgetalle.\n#     Jy moet die grootste priemgetal vind en die som van sy syfers teruggee.\n# \n#     Voorbeelde:\n# \n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For lst = [0,8,1,2,1,7] the output should be 7\n#\nsub skjkasdkd\n{\n  my ($lst) = @_;\n", "entry_point": "skjkasdkd", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nmy $x0 = skjkasdkd($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\nmy $x1 = skjkasdkd($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\nmy $x2 = skjkasdkd($arg20);\nmy $v2 = 13;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\nmy $x3 = skjkasdkd($arg30);\nmy $v3 = 11;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [0, 81, 12, 3, 1, 21];\nmy $x4 = skjkasdkd($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 8, 1, 2, 1, 7];\nmy $x5 = skjkasdkd($arg50);\nmy $v5 = 7;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [8191];\nmy $x6 = skjkasdkd($arg60);\nmy $v6 = 19;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [8191, 123456, 127, 7];\nmy $x7 = skjkasdkd($arg70);\nmy $v7 = 19;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [127, 97, 8192];\nmy $x8 = skjkasdkd($arg80);\nmy $v8 = 10;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Jy kry 'n lys van heelgetalle.\n    Jy moet die grootste priemgetal vind en die som van sy syfers teruggee.\n\n    Voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/41", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n woordeboek, gee waar as alle sleutels strings in kleinletters is of alle sleutels strings in hoofletters is, anders gee vals terug. Die funksie moet vals teruggee as die gegee woordeboek leeg is. Voorbeelde:\n# \n# check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\nsub check_dict_case\n{\n  my ($dict) = @_;\n", "entry_point": "check_dict_case", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = {\"p\" => \"pineapple\", \"b\" => \"banana\"};\nmy $x0 = check_dict_case($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = {\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"};\nmy $x1 = check_dict_case($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = {\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"};\nmy $x2 = check_dict_case($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = {\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"};\nmy $x3 = check_dict_case($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = {\"STATE\" => \"NC\", \"ZIP\" => \"12345\"};\nmy $x4 = check_dict_case($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = {\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"};\nmy $x5 = check_dict_case($arg50);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = {};\nmy $x6 = check_dict_case($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Gegee 'n woordeboek, gee waar as alle sleutels strings in kleinletters is of alle sleutels strings in hoofletters is, anders gee vals terug. Die funksie moet vals teruggee as die gegee woordeboek leeg is. Voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/42", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skep 'n funksie wat 'n waarde (string) wat 'n nommer voorstel, aanvaar en die naaste heelgetal daaraan teruggee. As die nommer ewe ver van twee heelgetalle af is, rond dit weg van nul af.\n# \n# Voorbeelde\n# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\nsub closest_integer\n{\n  my ($value) = @_;\n", "entry_point": "closest_integer", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"10\";\nmy $x0 = closest_integer($arg00);\nmy $v0 = 10;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"14.5\";\nmy $x1 = closest_integer($arg10);\nmy $v1 = 15;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"-15.5\";\nmy $x2 = closest_integer($arg20);\nmy $v2 = -16;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"15.3\";\nmy $x3 = closest_integer($arg30);\nmy $v3 = 15;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"0\";\nmy $x4 = closest_integer($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Skep 'n funksie wat 'n waarde (string) wat 'n nommer voorstel, aanvaar en die naaste heelgetal daaraan teruggee. As die nommer ewe ver van twee heelgetalle af is, rond dit weg van nul af.\n\nVoorbeelde", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/43", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n positiewe heelgetal n, moet jy 'n hoop van n vlakke klippe maak.\n#     Die eerste vlak het n klippe.\n#     Die aantal klippe in die volgende vlak is:\n#         - die volgende onewe getal as n onewe is.\n#         - die volgende ewe getal as n ewe is.\n#     Gee die aantal klippe in elke vlak terug in 'n lys, waar die element by indeks\n#     i die aantal klippe in vlak (i+1) verteenwoordig.\n# \n#     Voorbeelde:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\nsub make_a_pile\n{\n  my ($n) = @_;\n", "entry_point": "make_a_pile", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = make_a_pile($arg00);\nmy $v0 = [3, 5, 7];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = make_a_pile($arg10);\nmy $v1 = [4, 6, 8, 10];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = make_a_pile($arg20);\nmy $v2 = [5, 7, 9, 11, 13];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = make_a_pile($arg30);\nmy $v3 = [6, 8, 10, 12, 14, 16];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 8;\nmy $x4 = make_a_pile($arg40);\nmy $v4 = [8, 10, 12, 14, 16, 18, 20, 22];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gegee 'n positiewe heelgetal n, moet jy 'n hoop van n vlakke klippe maak.\n    Die eerste vlak het n klippe.\n    Die aantal klippe in die volgende vlak is:\n        - die volgende onewe getal as n onewe is.\n        - die volgende ewe getal as n ewe is.\n    Gee die aantal klippe in elke vlak terug in 'n lys, waar die element by indeks\n    i die aantal klippe in vlak (i+1) verteenwoordig.\n\n    Voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/44", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy sal 'n string van woorde gekommaseer of geskei deur spasies ontvang. Jou taak is om die string in woorde te verdeel en 'n array van die woorde terug te gee.\n# \n# Byvoorbeeld:\n# \n# words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n#\nsub words_string\n{\n  my ($s) = @_;\n", "entry_point": "words_string", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hi, my name is John\";\nmy $x0 = words_string($arg00);\nmy $v0 = [\"Hi\", \"my\", \"name\", \"is\", \"John\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"One, two, three, four, five, six\";\nmy $x1 = words_string($arg10);\nmy $v1 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Hi, my name\";\nmy $x2 = words_string($arg20);\nmy $v2 = [\"Hi\", \"my\", \"name\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"One,, two, three, four, five, six,\";\nmy $x3 = words_string($arg30);\nmy $v3 = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"\";\nmy $x4 = words_string($arg40);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"ahmed     , gamal\";\nmy $x5 = words_string($arg50);\nmy $v5 = [\"ahmed\", \"gamal\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Jy sal 'n string van woorde gekommaseer of geskei deur spasies ontvang. Jou taak is om die string in woorde te verdeel en 'n array van die woorde terug te gee.\n\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/45", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Hierdie funksie neem twee positiewe getalle, x en y, en gee die grootste ewe heelgetal terug wat in die interval [x, y] insluitend is. As daar geen sulke getal is nie, moet die funksie -1 teruggee.\n# \n# Byvoorbeeld:\n# \n# choose_num(12, 15) = 14\n# choose_num(13, 12) = -1\n#\nsub choose_num\n{\n  my ($x, $y) = @_;\n", "entry_point": "choose_num", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 12;\nmy $arg01 = 15;\nmy $x0 = choose_num($arg00, $arg01);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 13;\nmy $arg11 = 12;\nmy $x1 = choose_num($arg10, $arg11);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 33;\nmy $arg21 = 12354;\nmy $x2 = choose_num($arg20, $arg21);\nmy $v2 = 12354;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5234;\nmy $arg31 = 5233;\nmy $x3 = choose_num($arg30, $arg31);\nmy $v3 = -1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 6;\nmy $arg41 = 29;\nmy $x4 = choose_num($arg40, $arg41);\nmy $v4 = 28;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 27;\nmy $arg51 = 10;\nmy $x5 = choose_num($arg50, $arg51);\nmy $v5 = -1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 7;\nmy $arg61 = 7;\nmy $x6 = choose_num($arg60, $arg61);\nmy $v6 = -1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 546;\nmy $arg71 = 546;\nmy $x7 = choose_num($arg70, $arg71);\nmy $v7 = 546;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Hierdie funksie neem twee positiewe getalle, x en y, en gee die grootste ewe heelgetal terug wat in die interval [x, y] insluitend is. As daar geen sulke getal is nie, moet die funksie -1 teruggee.\n\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/46", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry twee positiewe heelgetalle n en m, en jou taak is om die gemiddelde van die heelgetalle vanaf n tot m (insluitend n en m) te bereken. Rond die antwoord af na die naaste heelgetal en omskep dit na binêre. As n groter is as m, gee -1 terug. Voorbeeld:\n# \n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7, 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\n#\nsub rounded_avg\n{\n  my ($n, $m) = @_;\n", "entry_point": "rounded_avg", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 1;\nmy $arg01 = 5;\nmy $x0 = rounded_avg($arg00, $arg01);\nmy $v0 = \"0b11\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $arg11 = 13;\nmy $x1 = rounded_avg($arg10, $arg11);\nmy $v1 = \"0b1010\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 964;\nmy $arg21 = 977;\nmy $x2 = rounded_avg($arg20, $arg21);\nmy $v2 = \"0b1111001010\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 996;\nmy $arg31 = 997;\nmy $x3 = rounded_avg($arg30, $arg31);\nmy $v3 = \"0b1111100100\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 560;\nmy $arg41 = 851;\nmy $x4 = rounded_avg($arg40, $arg41);\nmy $v4 = \"0b1011000010\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 185;\nmy $arg51 = 546;\nmy $x5 = rounded_avg($arg50, $arg51);\nmy $v5 = \"0b101101110\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 362;\nmy $arg61 = 496;\nmy $x6 = rounded_avg($arg60, $arg61);\nmy $v6 = \"0b110101101\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 350;\nmy $arg71 = 902;\nmy $x7 = rounded_avg($arg70, $arg71);\nmy $v7 = \"0b1001110010\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 197;\nmy $arg81 = 233;\nmy $x8 = rounded_avg($arg80, $arg81);\nmy $v8 = \"0b11010111\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 7;\nmy $arg91 = 5;\nmy $x9 = rounded_avg($arg90, $arg91);\nmy $v9 = -1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 5;\nmy $arg101 = 1;\nmy $x10 = rounded_avg($arg100, $arg101);\nmy $v10 = -1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 5;\nmy $arg111 = 5;\nmy $x11 = rounded_avg($arg110, $arg111);\nmy $v11 = \"0b101\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "Jy kry twee positiewe heelgetalle n en m, en jou taak is om die gemiddelde van die heelgetalle vanaf n tot m (insluitend n en m) te bereken. Rond die antwoord af na die naaste heelgetal en omskep dit na binêre. As n groter is as m, gee -1 terug. Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/47", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Implementeer die funksie f wat n as 'n parameter neem,\n# en 'n lys van grootte n teruggee, sodat die waarde van die element by indeks i die faktoriaal van i is as i ewe is,\n# of die som van getalle van 1 tot i andersins.\n# i begin by 1.\n# Die faktoriaal van i is die vermenigvuldiging van die getalle van 1 tot i (1 * 2 * ... * i).\n# Voorbeeld:\n# \n# f(5) == [1, 2, 6, 24, 15]\n#\nsub f\n{\n  my ($n) = @_;\n", "entry_point": "f", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = f($arg00);\nmy $v0 = [1, 2, 6, 24, 15];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 7;\nmy $x1 = f($arg10);\nmy $v1 = [1, 2, 6, 24, 15, 720, 28];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 1;\nmy $x2 = f($arg20);\nmy $v2 = [1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 3;\nmy $x3 = f($arg30);\nmy $v3 = [1, 2, 6];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Implementeer die funksie f wat n as 'n parameter neem,\nen 'n lys van grootte n teruggee, sodat die waarde van die element by indeks i die faktoriaal van i is as i ewe is,\nof die som van getalle van 1 tot i andersins.\ni begin by 1.\nDie faktoriaal van i is die vermenigvuldiging van die getalle van 1 tot i (1 * 2 * ... * i).\nVoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/48", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n positiewe heelgetal n, gee 'n tuple terug wat die aantal ewe en onewe heelgetal palindromes bevat wat binne die reeks (1, n) val, insluitend.\n# \n# Voorbeeld 1:\n# \n#     Inset: 3\n#     Uitset: (1, 2)\n#     Verduideliking:\n#     Heelgetal palindroom is 1, 2, 3. Een van hulle is ewe, en twee van hulle is onewe.\n# \n# Voorbeeld 2:\n# \n#     Inset: 12\n#     Uitset: (4, 6)\n#     Verduideliking:\n#     Heelgetal palindroom is 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier van hulle is ewe, en 6 van hulle is onewe.\n# \n# Nota:\n#     1. 1 <= n <= 10^3\n#     2. Die teruggekeerde tuple het onderskeidelik die aantal ewe en onewe heelgetal palindromes.\n# \n#\nsub even_odd_palindrome\n{\n  my ($n) = @_;\n", "entry_point": "even_odd_palindrome", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 123;\nmy $x0 = even_odd_palindrome($arg00);\nmy $v0 = [8, 13];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 12;\nmy $x1 = even_odd_palindrome($arg10);\nmy $v1 = [4, 6];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $x2 = even_odd_palindrome($arg20);\nmy $v2 = [1, 2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 63;\nmy $x3 = even_odd_palindrome($arg30);\nmy $v3 = [6, 8];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 25;\nmy $x4 = even_odd_palindrome($arg40);\nmy $v4 = [5, 6];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 19;\nmy $x5 = even_odd_palindrome($arg50);\nmy $v5 = [4, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = even_odd_palindrome($arg60);\nmy $v6 = [4, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 1;\nmy $x7 = even_odd_palindrome($arg70);\nmy $v7 = [0, 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Gegee 'n positiewe heelgetal n, gee 'n tuple terug wat die aantal ewe en onewe heelgetal palindromes bevat wat binne die reeks (1, n) val, insluitend.\n\nVoorbeeld 1:\n\n    Inset: 3\n    Uitset: (1, 2)\n    Verduideliking:\n    Heelgetal palindroom is 1, 2, 3. Een van hulle is ewe, en twee van hulle is onewe.\n\nVoorbeeld 2:\n\n    Inset: 12\n    Uitset: (4, 6)\n    Verduideliking:\n    Heelgetal palindroom is 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier van hulle is ewe, en 6 van hulle is onewe.\n\nNota:\n    1. 1 <= n <= 10^3\n    2. Die teruggekeerde tuple het onderskeidelik die aantal ewe en onewe heelgetal palindromes.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/49", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Ons het 'n reeks 'arr' van N heelgetalle arr[1], arr[2], ..., arr[N]. Die getalle in die reeks sal willekeurig wees. Jou taak is om te bepaal of dit moontlik is om 'n reeks gesorteer in nie-afnemende volgorde te kry deur die volgende operasie op die gegewe reeks uit te voer:\n#         Jy mag enige aantal regsverskuiwingsoperasies uitvoer.\n#     \n#     Een regsverskuiwingsoperasie beteken dat alle elemente van die reeks een posisie regs verskuif word. Die laaste element van die reeks sal na die beginposisie in die reeks geskuif word, d.w.s. na die 0-indeks.\n# \n#     As dit moontlik is om die gesorteerde reeks te verkry deur die bogenoemde operasie uit te voer, gee dan True terug, anders gee False terug. As die gegewe reeks leeg is, gee dan True terug.\n# \n#     Let wel: Daar word gewaarborg dat die gegewe lys unieke elemente bevat.\n# \n#     Byvoorbeeld:\n# \n#     move_one_ball([3, 4, 5, 1, 2])==>True\n#     Verduideliking: Deur 2 regsverskuiwingsoperasies uit te voer, kan nie-afnemende volgorde vir die gegewe reeks bereik word.\n#     move_one_ball([3, 5, 4, 1, 2])==>False\n#     Verduideliking: Dit is nie moontlik om nie-afnemende volgorde vir die gegewe reeks te kry deur enige aantal regsverskuiwingsoperasies uit te voer nie.\n# \n#             \n#\nsub move_one_ball\n{\n  my ($arr) = @_;\n", "entry_point": "move_one_ball", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [3, 4, 5, 1, 2];\nmy $x0 = move_one_ball($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [3, 5, 10, 1, 2];\nmy $x1 = move_one_ball($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [4, 3, 1, 2];\nmy $x2 = move_one_ball($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [3, 5, 4, 1, 2];\nmy $x3 = move_one_ball($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = move_one_ball($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Ons het 'n reeks 'arr' van N heelgetalle arr[1], arr[2], ..., arr[N]. Die getalle in die reeks sal willekeurig wees. Jou taak is om te bepaal of dit moontlik is om 'n reeks gesorteer in nie-afnemende volgorde te kry deur die volgende operasie op die gegewe reeks uit te voer:\n        Jy mag enige aantal regsverskuiwingsoperasies uitvoer.\n    \n    Een regsverskuiwingsoperasie beteken dat alle elemente van die reeks een posisie regs verskuif word. Die laaste element van die reeks sal na die beginposisie in die reeks geskuif word, d.w.s. na die 0-indeks.\n\n    As dit moontlik is om die gesorteerde reeks te verkry deur die bogenoemde operasie uit te voer, gee dan True terug, anders gee False terug. As die gegewe reeks leeg is, gee dan True terug.\n\n    Let wel: Daar word gewaarborg dat die gegewe lys unieke elemente bevat.\n\n    Byvoorbeeld:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Verduideliking: Deur 2 regsverskuiwingsoperasies uit te voer, kan nie-afnemende volgorde vir die gegewe reeks bereik word.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Verduideliking: Dit is nie moontlik om nie-afnemende volgorde vir die gegewe reeks te kry deur enige aantal regsverskuiwingsoperasies uit te voer nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/50", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# In hierdie probleem, sal jy 'n funksie implementeer wat twee lyste van getalle neem,\n# en bepaal of dit moontlik is om 'n uitruiling van elemente tussen hulle te doen om lst1 'n lys van net ewe getalle te maak.\n# Daar is geen limiet op die aantal uitgeruilde elemente tussen lst1 en lst2 nie.\n# As dit moontlik is om elemente tussen lst1 en lst2 uit te ruil om\n# alle elemente van lst1 ewe te maak, gee \"JA\" terug.\n# Andersins, gee \"NEE\" terug.\n# Byvoorbeeld:\n# uitruil([1, 2, 3, 4], [1, 2, 3, 4]) => \"JA\"\n# uitruil([1, 2, 3, 4], [1, 5, 3, 4]) => \"NEE\"\n# Daar word aanvaar dat die insetlyste nie leeg sal wees nie.\n# \n#\nsub exchange\n{\n  my ($lst1, $lst2) = @_;\n", "entry_point": "exchange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3, 4];\nmy $arg01 = [1, 2, 3, 4];\nmy $x0 = exchange($arg00, $arg01);\nmy $v0 = \"YES\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 3, 4];\nmy $arg11 = [1, 5, 3, 4];\nmy $x1 = exchange($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 2, 3, 4];\nmy $arg21 = [2, 1, 4, 3];\nmy $x2 = exchange($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [5, 7, 3];\nmy $arg31 = [2, 6, 4];\nmy $x3 = exchange($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [5, 7, 3];\nmy $arg41 = [2, 6, 3];\nmy $x4 = exchange($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [3, 2, 6, 1, 8, 9];\nmy $arg51 = [3, 5, 5, 1, 1, 1];\nmy $x5 = exchange($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [100, 200];\nmy $arg61 = [200, 200];\nmy $x6 = exchange($arg60, $arg61);\nmy $v6 = \"YES\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "In hierdie probleem, sal jy 'n funksie implementeer wat twee lyste van getalle neem,\nen bepaal of dit moontlik is om 'n uitruiling van elemente tussen hulle te doen om lst1 'n lys van net ewe getalle te maak.\nDaar is geen limiet op die aantal uitgeruilde elemente tussen lst1 en lst2 nie.\nAs dit moontlik is om elemente tussen lst1 en lst2 uit te ruil om\nalle elemente van lst1 ewe te maak, gee \"JA\" terug.\nAndersins, gee \"NEE\" terug.\nByvoorbeeld:\nuitruil([1, 2, 3, 4], [1, 2, 3, 4]) => \"JA\"\nuitruil([1, 2, 3, 4], [1, 5, 3, 4]) => \"NEE\"\nDaar word aanvaar dat die insetlyste nie leeg sal wees nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/51", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Taak\n#     Ons het twee strings s en c gekry, jy moet alle karakters in s wat gelyk is aan enige karakter in c verwyder\n#     en dan moet jy kyk of die resultaat string 'n palindroom is.\n#     'n String word 'n palindroom genoem as dit dieselfde agteruit as vorentoe lees.\n#     Jy moet 'n tuple teruggee wat die resultaat string en True/False vir die toets bevat.\n#     Voorbeeld\n#     Vir s = \"abcde\", c = \"ae\", moet die resultaat wees ('bcd',False)\n#     Vir s = \"abcdef\", c = \"b\" moet die resultaat wees ('acdef',False)\n#     Vir s = \"abcdedcba\", c = \"ab\", moet die resultaat wees ('cdedc',True)\n# \n#\nsub reverse_delete\n{\n  my ($s, $c) = @_;\n", "entry_point": "reverse_delete", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"abcde\";\nmy $arg01 = \"ae\";\nmy $x0 = reverse_delete($arg00, $arg01);\nmy $v0 = [\"bcd\", 0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"abcdef\";\nmy $arg11 = \"b\";\nmy $x1 = reverse_delete($arg10, $arg11);\nmy $v1 = [\"acdef\", 0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"abcdedcba\";\nmy $arg21 = \"ab\";\nmy $x2 = reverse_delete($arg20, $arg21);\nmy $v2 = [\"cdedc\", 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"dwik\";\nmy $arg31 = \"w\";\nmy $x3 = reverse_delete($arg30, $arg31);\nmy $v3 = [\"dik\", 0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"a\";\nmy $arg41 = \"a\";\nmy $x4 = reverse_delete($arg40, $arg41);\nmy $v4 = [\"\", 1];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"abcdedcba\";\nmy $arg51 = \"\";\nmy $x5 = reverse_delete($arg50, $arg51);\nmy $v5 = [\"abcdedcba\", 1];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"abcdedcba\";\nmy $arg61 = \"v\";\nmy $x6 = reverse_delete($arg60, $arg61);\nmy $v6 = [\"abcdedcba\", 1];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"vabba\";\nmy $arg71 = \"v\";\nmy $x7 = reverse_delete($arg70, $arg71);\nmy $v7 = [\"abba\", 1];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"mamma\";\nmy $arg81 = \"mia\";\nmy $x8 = reverse_delete($arg80, $arg81);\nmy $v8 = [\"\", 1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Taak\n    Ons het twee strings s en c gekry, jy moet alle karakters in s wat gelyk is aan enige karakter in c verwyder\n    en dan moet jy kyk of die resultaat string 'n palindroom is.\n    'n String word 'n palindroom genoem as dit dieselfde agteruit as vorentoe lees.\n    Jy moet 'n tuple teruggee wat die resultaat string en True/False vir die toets bevat.\n    Voorbeeld\n    Vir s = \"abcde\", c = \"ae\", moet die resultaat wees ('bcd',False)\n    Vir s = \"abcdef\", c = \"b\" moet die resultaat wees ('acdef',False)\n    Vir s = \"abcdedcba\", c = \"ab\", moet die resultaat wees ('cdedc',True)", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/52", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n reghoekige rooster van putte. Elke ry verteenwoordig 'n enkele put, en elke 1 in 'n ry verteenwoordig 'n enkele eenheid water. Elke put het 'n ooreenstemmende emmer wat gebruik kan word om water daaruit te onttrek, en alle emmers het dieselfde kapasiteit. Jou taak is om die emmers te gebruik om die putte leeg te maak. Gee as uitset die aantal kere wat jy die emmers moet laat sak. \n# \n# Voorbeeld 1:\n#     Insette:\n#         rooster: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n#         emmer_kapasiteit: 1\n#     Uitset: 6\n# \n# Voorbeeld 2:\n#     Insette:\n#         rooster: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n#         emmer_kapasiteit: 2\n#     Uitset: 5\n# \n# Voorbeeld 3:\n#     Insette:\n#         rooster: [[0,0,0], [0,0,0]]\n#         emmer_kapasiteit: 5\n#     Uitset: 0\n# \n# Beperkings:\n#     * alle putte het dieselfde lengte\n#     * 1 <= rooster.lengte <= 10^2\n#     * 1 <= rooster[:,1].lengte <= 10^2\n#     * rooster[i][j] -> 0 | 1\n#     * 1 <= kapasiteit <= 10\n# \n#\nsub max_fill\n{\n  my ($grid, $capacity) = @_;\n", "entry_point": "max_fill", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nmy $arg01 = 1;\nmy $x0 = max_fill($arg00, $arg01);\nmy $v0 = 6;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nmy $arg11 = 2;\nmy $x1 = max_fill($arg10, $arg11);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [[0, 0, 0], [0, 0, 0]];\nmy $arg21 = 5;\nmy $x2 = max_fill($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg31 = 2;\nmy $x3 = max_fill($arg30, $arg31);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [[1, 1, 1, 1], [1, 1, 1, 1]];\nmy $arg41 = 9;\nmy $x4 = max_fill($arg40, $arg41);\nmy $v4 = 2;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Jy kry 'n reghoekige rooster van putte. Elke ry verteenwoordig 'n enkele put, en elke 1 in 'n ry verteenwoordig 'n enkele eenheid water. Elke put het 'n ooreenstemmende emmer wat gebruik kan word om water daaruit te onttrek, en alle emmers het dieselfde kapasiteit. Jou taak is om die emmers te gebruik om die putte leeg te maak. Gee as uitset die aantal kere wat jy die emmers moet laat sak. \n\nVoorbeeld 1:\n    Insette:\n        rooster: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        emmer_kapasiteit: 1\n    Uitset: 6\n\nVoorbeeld 2:\n    Insette:\n        rooster: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        emmer_kapasiteit: 2\n    Uitset: 5\n\nVoorbeeld 3:\n    Insette:\n        rooster: [[0,0,0], [0,0,0]]\n        emmer_kapasiteit: 5\n    Uitset: 0\n\nBeperkings:\n    * alle putte het dieselfde lengte\n    * 1 <= rooster.lengte <= 10^2\n    * 1 <= rooster[:,1].lengte <= 10^2\n    * rooster[i][j] -> 0 | 1\n    * 1 <= kapasiteit <= 10", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/53", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gegee 'n string s en 'n natuurlike getal n, is jy opdrag gegee om 'n funksie te implementeer wat 'n lys van alle woorde uit string s teruggee wat presies n medeklinkers bevat, in die volgorde waarin hierdie woorde in string s voorkom. As die string s leeg is, moet die funksie 'n leë lys teruggee. Let daarop: jy mag aanvaar dat die invoerstring slegs letters en spasies bevat. Voorbeelde:\n# \n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\nsub select_words\n{\n  my ($s, $n) = @_;\n", "entry_point": "select_words", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Mary had a little lamb\";\nmy $arg01 = 4;\nmy $x0 = select_words($arg00, $arg01);\nmy $v0 = [\"little\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Mary had a little lamb\";\nmy $arg11 = 3;\nmy $x1 = select_words($arg10, $arg11);\nmy $v1 = [\"Mary\", \"lamb\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"simple white space\";\nmy $arg21 = 2;\nmy $x2 = select_words($arg20, $arg21);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hello world\";\nmy $arg31 = 4;\nmy $x3 = select_words($arg30, $arg31);\nmy $v3 = [\"world\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Uncle sam\";\nmy $arg41 = 3;\nmy $x4 = select_words($arg40, $arg41);\nmy $v4 = [\"Uncle\"];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"\";\nmy $arg51 = 4;\nmy $x5 = select_words($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"a b c d e f\";\nmy $arg61 = 1;\nmy $x6 = select_words($arg60, $arg61);\nmy $v6 = [\"b\", \"c\", \"d\", \"f\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Gegee 'n string s en 'n natuurlike getal n, is jy opdrag gegee om 'n funksie te implementeer wat 'n lys van alle woorde uit string s teruggee wat presies n medeklinkers bevat, in die volgorde waarin hierdie woorde in string s voorkom. As die string s leeg is, moet die funksie 'n leë lys teruggee. Let daarop: jy mag aanvaar dat die invoerstring slegs letters en spasies bevat. Voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/54", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n reeks arr van heelgetalle en 'n positiewe heelgetal k, gee 'n gesorteerde lys terug van lengte k met die maksimum k getalle in arr.\n# \n# Voorbeeld 1:\n# \n#     Inset: arr = [-3, -4, 5], k = 3\n#     Uitset: [-4, -3, 5]\n# \n# Voorbeeld 2:\n# \n#     Inset: arr = [4, -4, 4], k = 2\n#     Uitset: [4, 4]\n# \n# Voorbeeld 3:\n# \n#     Inset: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n#     Uitset: [2]\n# \n# Nota:\n#     1. Die lengte van die reeks sal in die omvang van [1, 1000] wees.\n#     2. Die elemente in die reeks sal in die omvang van [-1000, 1000] wees.\n#     3. 0 <= k <= len(arr)\n# \n#\nsub maximum\n{\n  my ($arr, $k) = @_;\n", "entry_point": "maximum", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [-3, -4, 5];\nmy $arg01 = 3;\nmy $x0 = maximum($arg00, $arg01);\nmy $v0 = [-4, -3, 5];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [4, -4, 4];\nmy $arg11 = 2;\nmy $x1 = maximum($arg10, $arg11);\nmy $v1 = [4, 4];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, 2, 1, 2, -1, -2, 1];\nmy $arg21 = 1;\nmy $x2 = maximum($arg20, $arg21);\nmy $v2 = [2];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [123, -123, 20, 0, 1, 2, -3];\nmy $arg31 = 3;\nmy $x3 = maximum($arg30, $arg31);\nmy $v3 = [2, 20, 123];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-123, 20, 0, 1, 2, -3];\nmy $arg41 = 4;\nmy $x4 = maximum($arg40, $arg41);\nmy $v4 = [0, 1, 2, 20];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [5, 15, 0, 3, -13, -8, 0];\nmy $arg51 = 7;\nmy $x5 = maximum($arg50, $arg51);\nmy $v5 = [-13, -8, 0, 0, 3, 5, 15];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-1, 0, 2, 5, 3, -10];\nmy $arg61 = 2;\nmy $x6 = maximum($arg60, $arg61);\nmy $v6 = [3, 5];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [1, 0, 5, -7];\nmy $arg71 = 1;\nmy $x7 = maximum($arg70, $arg71);\nmy $v7 = [5];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [4, -4];\nmy $arg81 = 2;\nmy $x8 = maximum($arg80, $arg81);\nmy $v8 = [-4, 4];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-10, 10];\nmy $arg91 = 2;\nmy $x9 = maximum($arg90, $arg91);\nmy $v9 = [-10, 10];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [1, 2, 3, -23, 243, -400, 0];\nmy $arg101 = 0;\nmy $x10 = maximum($arg100, $arg101);\nmy $v10 = [];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Gegee 'n reeks arr van heelgetalle en 'n positiewe heelgetal k, gee 'n gesorteerde lys terug van lengte k met die maksimum k getalle in arr.\n\nVoorbeeld 1:\n\n    Inset: arr = [-3, -4, 5], k = 3\n    Uitset: [-4, -3, 5]\n\nVoorbeeld 2:\n\n    Inset: arr = [4, -4, 4], k = 2\n    Uitset: [4, 4]\n\nVoorbeeld 3:\n\n    Inset: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Uitset: [2]\n\nNota:\n    1. Die lengte van die reeks sal in die omvang van [1, 1000] wees.\n    2. Die elemente in die reeks sal in die omvang van [-1000, 1000] wees.\n    3. 0 <= k <= len(arr)", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/55", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n nie-leë reeks van heelgetalle arr en 'n heelgetal k, gee terug die som van die elemente met hoogstens twee syfers van die eerste k elemente van arr.\n# \n# Voorbeeld:\n# \n#     Inset: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n#     Uitset: 24 # som van 21 + 3\n# \n# Beperkings:\n#     1. 1 <= len(arr) <= 100\n#     2. 1 <= k <= len(arr)\n# \n#\nsub add_elements\n{\n  my ($arr, $k) = @_;\n", "entry_point": "add_elements", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, -2, -3, 41, 57, 76, 87, 88, 99];\nmy $arg01 = 3;\nmy $x0 = add_elements($arg00, $arg01);\nmy $v0 = -4;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [111, 121, 3, 4000, 5, 6];\nmy $arg11 = 2;\nmy $x1 = add_elements($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [11, 21, 3, 90, 5, 6, 7, 8, 9];\nmy $arg21 = 4;\nmy $x2 = add_elements($arg20, $arg21);\nmy $v2 = 125;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nmy $arg31 = 4;\nmy $x3 = add_elements($arg30, $arg31);\nmy $v3 = 24;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1];\nmy $arg41 = 1;\nmy $x4 = add_elements($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Gegee 'n nie-leë reeks van heelgetalle arr en 'n heelgetal k, gee terug die som van die elemente met hoogstens twee syfers van die eerste k elemente van arr.\n\nVoorbeeld:\n\n    Inset: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Uitset: 24 # som van 21 + 3\n\nBeperkings:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/56", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry twee intervalle,\n#     waar elke interval 'n paar van heelgetalle is. Byvoorbeeld, interval = (begin, einde) = (1, 2).\n#     Die gegee intervalle is geslote wat beteken dat die interval (begin, einde)\n#     beide begin en einde insluit.\n#     Vir elke gegee interval word aanvaar dat sy begin minder of gelyk aan sy einde is.\n#     Jou taak is om te bepaal of die lengte van die kruising van hierdie twee\n#     intervalle 'n priemgetal is.\n#     Byvoorbeeld, die kruising van die intervalle (1, 3), (2, 4) is (2, 3)\n#     wat 'n lengte van 1 het, wat nie 'n priemgetal is nie.\n#     As die lengte van die kruising 'n priemgetal is, gee \"JA\" terug,\n#     anders, gee \"NEE\" terug.\n#     As die twee intervalle nie kruis nie, gee \"NEE\" terug.\n# \n# \n#     [invoer/uitvoer] voorbeelde:\n# \n# intersection((1, 2), (2, 3)) ==> \"NO\"\n# intersection((-1, 1), (0, 4)) ==> \"NO\"\n# intersection((-3, -1), (-5, 5)) ==> \"YES\"\n#\nsub intersection\n{\n  my ($interval1, $interval2) = @_;\n", "entry_point": "intersection", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2];\nmy $arg01 = [2, 3];\nmy $x0 = intersection($arg00, $arg01);\nmy $v0 = \"NO\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [-1, 1];\nmy $arg11 = [0, 4];\nmy $x1 = intersection($arg10, $arg11);\nmy $v1 = \"NO\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [-3, -1];\nmy $arg21 = [-5, 5];\nmy $x2 = intersection($arg20, $arg21);\nmy $v2 = \"YES\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-2, 2];\nmy $arg31 = [-4, 0];\nmy $x3 = intersection($arg30, $arg31);\nmy $v3 = \"YES\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-11, 2];\nmy $arg41 = [-1, -1];\nmy $x4 = intersection($arg40, $arg41);\nmy $v4 = \"NO\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1, 2];\nmy $arg51 = [3, 5];\nmy $x5 = intersection($arg50, $arg51);\nmy $v5 = \"NO\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [1, 2];\nmy $arg61 = [1, 2];\nmy $x6 = intersection($arg60, $arg61);\nmy $v6 = \"NO\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-2, -2];\nmy $arg71 = [-3, -2];\nmy $x7 = intersection($arg70, $arg71);\nmy $v7 = \"NO\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Jy kry twee intervalle,\n    waar elke interval 'n paar van heelgetalle is. Byvoorbeeld, interval = (begin, einde) = (1, 2).\n    Die gegee intervalle is geslote wat beteken dat die interval (begin, einde)\n    beide begin en einde insluit.\n    Vir elke gegee interval word aanvaar dat sy begin minder of gelyk aan sy einde is.\n    Jou taak is om te bepaal of die lengte van die kruising van hierdie twee\n    intervalle 'n priemgetal is.\n    Byvoorbeeld, die kruising van die intervalle (1, 3), (2, 4) is (2, 3)\n    wat 'n lengte van 1 het, wat nie 'n priemgetal is nie.\n    As die lengte van die kruising 'n priemgetal is, gee \"JA\" terug,\n    anders, gee \"NEE\" terug.\n    As die twee intervalle nie kruis nie, gee \"NEE\" terug.\n\n\n    [invoer/uitvoer] voorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/57", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Almal weet van die Fibonacci-reeks, dit is diep bestudeer deur wiskundiges in die laaste paar eeue. Wat mense egter nie weet nie, is die Tribonacci-reeks. Die Tribonacci-reeks word gedefinieer deur die herhaling:\n#     tri(1) = 3\n#     tri(n) = 1 + n / 2, as n ewe is.\n#     tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), as n onewe is.\n#     Byvoorbeeld:\n#     tri(2) = 1 + (2 / 2) = 2\n#     tri(4) = 3\n#     tri(3) = tri(2) + tri(1) + tri(4)\n#            = 2 + 3 + 3 = 8 \n#     Jy kry 'n nie-negatiewe heelgetal n, jy moet 'n lys van die eerste n + 1 getalle van die Tribonacci-reeks teruggee.\n#     Voorbeelde:\n#     tri(3) = [1, 3, 2, 8]\n# \n#\nsub tri\n{\n  my ($n) = @_;\n", "entry_point": "tri", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $x0 = tri($arg00);\nmy $v0 = [1, 3, 2.0, 8.0];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 4;\nmy $x1 = tri($arg10);\nmy $v1 = [1, 3, 2.0, 8.0, 3.0];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 5;\nmy $x2 = tri($arg20);\nmy $v2 = [1, 3, 2.0, 8.0, 3.0, 15.0];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 6;\nmy $x3 = tri($arg30);\nmy $v3 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $x4 = tri($arg40);\nmy $v4 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 8;\nmy $x5 = tri($arg50);\nmy $v5 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 9;\nmy $x6 = tri($arg60);\nmy $v6 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 20;\nmy $x7 = tri($arg70);\nmy $v7 = [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 0;\nmy $x8 = tri($arg80);\nmy $v8 = [1];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $x9 = tri($arg90);\nmy $v9 = [1, 3];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Almal weet van die Fibonacci-reeks, dit is diep bestudeer deur wiskundiges in die laaste paar eeue. Wat mense egter nie weet nie, is die Tribonacci-reeks. Die Tribonacci-reeks word gedefinieer deur die herhaling:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, as n ewe is.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), as n onewe is.\n    Byvoorbeeld:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    Jy kry 'n nie-negatiewe heelgetal n, jy moet 'n lys van die eerste n + 1 getalle van die Tribonacci-reeks teruggee.\n    Voorbeelde:\n    tri(3) = [1, 3, 2, 8]", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/58", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Gegee 'n positiewe heelgetal n, gee die produk van die onewe syfers terug.\n# Gee 0 terug as al die syfers ewe is.\n# Byvoorbeeld:\n# \n# digits(1)  == 1\n# digits(4)  == 0\n# digits(235) == 15\n#\nsub digits\n{\n  my ($n) = @_;\n", "entry_point": "digits", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = digits($arg00);\nmy $v0 = 5;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 54;\nmy $x1 = digits($arg10);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 120;\nmy $x2 = digits($arg20);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 5014;\nmy $x3 = digits($arg30);\nmy $v3 = 5;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 98765;\nmy $x4 = digits($arg40);\nmy $v4 = 315;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 5576543;\nmy $x5 = digits($arg50);\nmy $v5 = 2625;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 2468;\nmy $x6 = digits($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Gegee 'n positiewe heelgetal n, gee die produk van die onewe syfers terug.\nGee 0 terug as al die syfers ewe is.\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/59", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skep 'n funksie wat 'n string as inset neem wat slegs vierkantige hakies bevat.\n# Die funksie moet waar wees as en slegs as daar 'n geldige subsekvens van hakies is waar ten minste een hakie in die subsekvens genestel is.\n# is_nested('[[]]') ➞ True\n# is_nested('[]]]]]]][[[[[]') ➞ False\n# is_nested('[][]') ➞ False\n# is_nested('[]') ➞ False\n# is_nested('[[][]]') ➞ True\n# is_nested('[[]][[') ➞ True\n#\nsub is_nested\n{\n  my ($string) = @_;\n", "entry_point": "is_nested", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"[[]]\";\nmy $x0 = is_nested($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"[]]]]]]][[[[[]\";\nmy $x1 = is_nested($arg10);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"[][]\";\nmy $x2 = is_nested($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"[]\";\nmy $x3 = is_nested($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"[[[[]]]]\";\nmy $x4 = is_nested($arg40);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"[]]]]]]]]]]\";\nmy $x5 = is_nested($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"[][][[]]\";\nmy $x6 = is_nested($arg60);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"[[]\";\nmy $x7 = is_nested($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"[]]\";\nmy $x8 = is_nested($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"[[]][[\";\nmy $x9 = is_nested($arg90);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"[[][]]\";\nmy $x10 = is_nested($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"\";\nmy $x11 = is_nested($arg110);\nmy $v11 = 0;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"[[[[[[[[\";\nmy $x12 = is_nested($arg120);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = \"]]]]]]]]\";\nmy $x13 = is_nested($arg130);\nmy $v13 = 0;\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "Skep 'n funksie wat 'n string as inset neem wat slegs vierkantige hakies bevat.\nDie funksie moet waar wees as en slegs as daar 'n geldige subsekvens van hakies is waar ten minste een hakie in die subsekvens genestel is.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/60", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 'n lys van getalle.\n#     Jy moet die som van die gekwadreerde getalle in die lys gee,\n#     rond elke element in die lys af na die naaste heelgetal (Ceiling).\n#     Voorbeelde:\n#     Vir lst = [1,2,3] moet die uitvoer 14 wees\n#     Vir lst = [1,4,9] moet die uitvoer 98 wees\n#     Vir lst = [1,3,5,7] moet die uitvoer 84 wees\n#     Vir lst = [1.4,4.2,0] moet die uitvoer 29 wees\n#     Vir lst = [-2.4,1,1] moet die uitvoer 6 wees\n# \n# \n\n#\nsub sum_squares\n{\n  my ($lst) = @_;\n", "entry_point": "sum_squares", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 3];\nmy $x0 = sum_squares($arg00);\nmy $v0 = 14;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1.0, 2, 3];\nmy $x1 = sum_squares($arg10);\nmy $v1 = 14;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 5, 7];\nmy $x2 = sum_squares($arg20);\nmy $v2 = 84;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1.4, 4.2, 0];\nmy $x3 = sum_squares($arg30);\nmy $v3 = 29;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-2.4, 1, 1];\nmy $x4 = sum_squares($arg40);\nmy $v4 = 6;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [100, 1, 15, 2];\nmy $x5 = sum_squares($arg50);\nmy $v5 = 10230;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [10000, 10000];\nmy $x6 = sum_squares($arg60);\nmy $v6 = 200000000;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1.4, 4.6, 6.3];\nmy $x7 = sum_squares($arg70);\nmy $v7 = 75;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1.4, 17.9, 18.9, 19.9];\nmy $x8 = sum_squares($arg80);\nmy $v8 = 1086;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [0];\nmy $x9 = sum_squares($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-1];\nmy $x10 = sum_squares($arg100);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = [-1, 1, 0];\nmy $x11 = sum_squares($arg110);\nmy $v11 = 2;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\n", "description": "Jy kry 'n lys van getalle.\n    Jy moet die som van die gekwadreerde getalle in die lys gee,\n    rond elke element in die lys af na die naaste heelgetal (Ceiling).\n    Voorbeelde:\n    Vir lst = [1,2,3] moet die uitvoer 14 wees\n    Vir lst = [1,4,9] moet die uitvoer 98 wees\n    Vir lst = [1,3,5,7] moet die uitvoer 84 wees\n    Vir lst = [1.4,4.2,0] moet die uitvoer 29 wees\n    Vir lst = [-2.4,1,1] moet die uitvoer 6 wees", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/61", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skep 'n funksie wat True teruggee as die laaste karakter van 'n gegewe string 'n alfabetiese karakter is en nie deel is van 'n woord nie, en andersins vals is. Let wel: \"woord\" is 'n groep karakters wat deur spasies geskei word.\n# \n# Voorbeelde:\n# \n# check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n# check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n# check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n# check_if_last_char_is_a_letter(\"\") ➞ False \n#\nsub check_if_last_char_is_a_letter\n{\n  my ($txt) = @_;\n", "entry_point": "check_if_last_char_is_a_letter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"apple\";\nmy $x0 = check_if_last_char_is_a_letter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"apple pi e\";\nmy $x1 = check_if_last_char_is_a_letter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"eeeee\";\nmy $x2 = check_if_last_char_is_a_letter($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"A\";\nmy $x3 = check_if_last_char_is_a_letter($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Pumpkin pie \";\nmy $x4 = check_if_last_char_is_a_letter($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Pumpkin pie 1\";\nmy $x5 = check_if_last_char_is_a_letter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"\";\nmy $x6 = check_if_last_char_is_a_letter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"eeeee e \";\nmy $x7 = check_if_last_char_is_a_letter($arg70);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"apple pie\";\nmy $x8 = check_if_last_char_is_a_letter($arg80);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"apple pi e \";\nmy $x9 = check_if_last_char_is_a_letter($arg90);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "Skep 'n funksie wat True teruggee as die laaste karakter van 'n gegewe string 'n alfabetiese karakter is en nie deel is van 'n woord nie, en andersins vals is. Let wel: \"woord\" is 'n groep karakters wat deur spasies geskei word.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/62", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Skep 'n funksie wat die grootste indeks van 'n element teruggee wat nie groter as of gelyk aan die element onmiddellik voor dit is nie. As daar geen sodanige element bestaan nie, gee dan -1 terug. Die gegewe reeks sal nie duplikaat waardes bevat nie.\n# \n# Voorbeelde:\n# \n# can_arrange([1,2,4,3,5]) = 3\n# can_arrange([1,2,3]) = -1\n#\nsub can_arrange\n{\n  my ($arr) = @_;\n", "entry_point": "can_arrange", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 2, 4, 3, 5];\nmy $x0 = can_arrange($arg00);\nmy $v0 = 3;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1, 2, 4, 5];\nmy $x1 = can_arrange($arg10);\nmy $v1 = -1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 4, 2, 5, 6, 7, 8, 9, 10];\nmy $x2 = can_arrange($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 8, 5, 7, 3];\nmy $x3 = can_arrange($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [];\nmy $x4 = can_arrange($arg40);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\n", "description": "Skep 'n funksie wat die grootste indeks van 'n element teruggee wat nie groter as of gelyk aan die element onmiddellik voor dit is nie. As daar geen sodanige element bestaan nie, gee dan -1 terug. Die gegewe reeks sal nie duplikaat waardes bevat nie.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/63", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skep 'n funksie wat 'n tuple (a, b) teruggee, waar 'a' die grootste van negatiewe heelgetalle is, en 'b' die kleinste van positiewe heelgetalle in 'n lys is. As daar geen negatiewe of positiewe heelgetalle is nie, gee hulle as None terug.\n# \n# Voorbeelde:\n# \n# largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([]) == (None, None)\n# largest_smallest_integers([0]) == (None, None)\n#\nsub largest_smallest_integers\n{\n  my ($lst) = @_;\n", "entry_point": "largest_smallest_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [2, 4, 1, 3, 5, 7];\nmy $x0 = largest_smallest_integers($arg00);\nmy $v0 = [\"none\", 1];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [2, 4, 1, 3, 5, 7, 0];\nmy $x1 = largest_smallest_integers($arg10);\nmy $v1 = [\"none\", 1];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [1, 3, 2, 4, 5, 6, -2];\nmy $x2 = largest_smallest_integers($arg20);\nmy $v2 = [-2, 1];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [4, 5, 3, 6, 2, 7, -7];\nmy $x3 = largest_smallest_integers($arg30);\nmy $v3 = [-7, 2];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [7, 3, 8, 4, 9, 2, 5, -9];\nmy $x4 = largest_smallest_integers($arg40);\nmy $v4 = [-9, 2];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [];\nmy $x5 = largest_smallest_integers($arg50);\nmy $v5 = [\"none\", \"none\"];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [0];\nmy $x6 = largest_smallest_integers($arg60);\nmy $v6 = [\"none\", \"none\"];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = [-1, -3, -5, -6];\nmy $x7 = largest_smallest_integers($arg70);\nmy $v7 = [-1, \"none\"];\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = [-1, -3, -5, -6, 0];\nmy $x8 = largest_smallest_integers($arg80);\nmy $v8 = [-1, \"none\"];\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = [-6, -4, -4, -3, 1];\nmy $x9 = largest_smallest_integers($arg90);\nmy $v9 = [-3, 1];\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = [-6, -4, -4, -3, -100, 1];\nmy $x10 = largest_smallest_integers($arg100);\nmy $v10 = [-3, 1];\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Skep 'n funksie wat 'n tuple (a, b) teruggee, waar 'a' die grootste van negatiewe heelgetalle is, en 'b' die kleinste van positiewe heelgetalle in 'n lys is. As daar geen negatiewe of positiewe heelgetalle is nie, gee hulle as None terug.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/64", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Die Brasiliaanse faktoriaal word gedefinieer as:\n#     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n#     waar n > 0\n# \n#     Byvoorbeeld:\n# >>> special_factorial(4)\n# 288\n\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\nsub special_factorial\n{\n  my ($n) = @_;\n", "entry_point": "special_factorial", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 4;\nmy $x0 = special_factorial($arg00);\nmy $v0 = 288;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 5;\nmy $x1 = special_factorial($arg10);\nmy $v1 = 34560;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 7;\nmy $x2 = special_factorial($arg20);\nmy $v2 = 125411328000;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1;\nmy $x3 = special_factorial($arg30);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Die Brasiliaanse faktoriaal word gedefinieer as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    waar n > 0\n\n    Byvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/65", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n string wat 'n sin verteenwoordig,\n#     die sin bevat sommige woorde geskei deur 'n spasie,\n#     en jy moet 'n string teruggee wat die woorde van die oorspronklike sin bevat,\n#     waarvan die lengtes primgetalle is,\n#     die volgorde van die woorde in die nuwe string moet dieselfde wees as die oorspronklike een.\n# \n#     Voorbeeld 1:\n#         Inset: sin = \"This is a test\"\n#         Uitset: \"is\"\n# \n#     Voorbeeld 2:\n#         Inset: sin = \"lets go for swimming\"\n#         Uitset: \"go for\"\n# \n#     Beperkings:\n#         * 1 <= len(sin) <= 100\n#         * sin bevat slegs letters\n# \n#\nsub words_in_sentence\n{\n  my ($sentence) = @_;\n", "entry_point": "words_in_sentence", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"This is a test\";\nmy $x0 = words_in_sentence($arg00);\nmy $v0 = \"is\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"lets go for swimming\";\nmy $x1 = words_in_sentence($arg10);\nmy $v1 = \"go for\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"there is no place available here\";\nmy $x2 = words_in_sentence($arg20);\nmy $v2 = \"there is no place\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Hi I am Hussein\";\nmy $x3 = words_in_sentence($arg30);\nmy $v3 = \"Hi am Hussein\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"go for it\";\nmy $x4 = words_in_sentence($arg40);\nmy $v4 = \"go for it\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"here\";\nmy $x5 = words_in_sentence($arg50);\nmy $v5 = \"\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"here is\";\nmy $x6 = words_in_sentence($arg60);\nmy $v6 = \"is\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Jy kry 'n string wat 'n sin verteenwoordig,\n    die sin bevat sommige woorde geskei deur 'n spasie,\n    en jy moet 'n string teruggee wat die woorde van die oorspronklike sin bevat,\n    waarvan die lengtes primgetalle is,\n    die volgorde van die woorde in die nuwe string moet dieselfde wees as die oorspronklike een.\n\n    Voorbeeld 1:\n        Inset: sin = \"This is a test\"\n        Uitset: \"is\"\n\n    Voorbeeld 2:\n        Inset: sin = \"lets go for swimming\"\n        Uitset: \"go for\"\n\n    Beperkings:\n        * 1 <= len(sin) <= 100\n        * sin bevat slegs letters", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/66", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jou taak is om 'n funksie te implementeer wat die uitdrukking vereenvoudig x * n. Die funksie gee True terug as x * n evalueer tot 'n heelgetal en False andersins. Beide x en n is 'n string verteenwoordiging van 'n breuk, en het die volgende formaat, <teller>/<noemer> waar beide teller en noemer positiewe heelgetalle is.\n# \n# Jy kan aanvaar dat x en n geldige breuke is en nie nul as noemer het nie.\n# simplify(\"1/5\", \"5/1\") = True\n# simplify(\"1/6\", \"2/1\") = False\n# simplify(\"7/10\", \"10/2\") = False\n#\nsub simplify\n{\n  my ($x, $n) = @_;\n", "entry_point": "simplify", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"1/5\";\nmy $arg01 = \"5/1\";\nmy $x0 = simplify($arg00, $arg01);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1/6\";\nmy $arg11 = \"2/1\";\nmy $x1 = simplify($arg10, $arg11);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"5/1\";\nmy $arg21 = \"3/1\";\nmy $x2 = simplify($arg20, $arg21);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"7/10\";\nmy $arg31 = \"10/2\";\nmy $x3 = simplify($arg30, $arg31);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"2/10\";\nmy $arg41 = \"50/10\";\nmy $x4 = simplify($arg40, $arg41);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"7/2\";\nmy $arg51 = \"4/2\";\nmy $x5 = simplify($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"11/6\";\nmy $arg61 = \"6/1\";\nmy $x6 = simplify($arg60, $arg61);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"2/3\";\nmy $arg71 = \"5/2\";\nmy $x7 = simplify($arg70, $arg71);\nmy $v7 = 0;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"5/2\";\nmy $arg81 = \"3/5\";\nmy $x8 = simplify($arg80, $arg81);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = \"2/4\";\nmy $arg91 = \"8/4\";\nmy $x9 = simplify($arg90, $arg91);\nmy $v9 = 1;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = \"2/4\";\nmy $arg101 = \"4/2\";\nmy $x10 = simplify($arg100, $arg101);\nmy $v10 = 1;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = \"1/5\";\nmy $arg111 = \"5/1\";\nmy $x11 = simplify($arg110, $arg111);\nmy $v11 = 1;\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = \"1/5\";\nmy $arg121 = \"1/5\";\nmy $x12 = simplify($arg120, $arg121);\nmy $v12 = 0;\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\n", "description": "Jou taak is om 'n funksie te implementeer wat die uitdrukking vereenvoudig x * n. Die funksie gee True terug as x * n evalueer tot 'n heelgetal en False andersins. Beide x en n is 'n string verteenwoordiging van 'n breuk, en het die volgende formaat, <teller>/<noemer> waar beide teller en noemer positiewe heelgetalle is.\n\nJy kan aanvaar dat x en n geldige breuke is en nie nul as noemer het nie.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/67", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Skryf 'n funksie wat die gegewe lys van heelgetalle in opklimmende volgorde sorteert volgens die som van hul syfers. Let daarop: as daar verskeie items met soortgelyke som van hul syfers is, sorteer hulle volgens hul indeks in die oorspronklike lys.\n# \n# Byvoorbeeld:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# >>> order_by_points([]) == []\n#\nsub order_by_points\n{\n  my ($nums) = @_;\n", "entry_point": "order_by_points", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [1, 11, -1, -11, -12];\nmy $x0 = order_by_points($arg00);\nmy $v0 = [-1, -11, 1, -12, 11];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46];\nmy $x1 = order_by_points($arg10);\nmy $v1 = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [];\nmy $x2 = order_by_points($arg20);\nmy $v2 = [];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [1, -11, -32, 43, 54, -98, 2, -3];\nmy $x3 = order_by_points($arg30);\nmy $v3 = [-3, -32, -98, -11, 1, 2, 43, 54];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nmy $x4 = order_by_points($arg40);\nmy $v4 = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0, 6, 6, -76, -21, 23, 4];\nmy $x5 = order_by_points($arg50);\nmy $v5 = [-76, -21, 0, 4, 23, 6, 6];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Skryf 'n funksie wat die gegewe lys van heelgetalle in opklimmende volgorde sorteert volgens die som van hul syfers. Let daarop: as daar verskeie items met soortgelyke som van hul syfers is, sorteer hulle volgens hul indeks in die oorspronklike lys.\n\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/68", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Skryf 'n funksie wat 'n reeks van getalle as inset neem en die aantal elemente in die reeks teruggee wat groter as 10 is en waarvan die eerste en laaste syfers van 'n getal beide onewe is (1, 3, 5, 7, 9). Byvoorbeeld:\n# \n# specialFilter([15, -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21, 109]) => 2\n#\nsub specialfilter\n{\n  my ($nums) = @_;\n", "entry_point": "specialfilter", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [5, -2, 1, -5];\nmy $x0 = specialfilter($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [15, -73, 14, -15];\nmy $x1 = specialfilter($arg10);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [33, -2, -3, 45, 21, 109];\nmy $x2 = specialfilter($arg20);\nmy $v2 = 2;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [43, -12, 93, 125, 121, 109];\nmy $x3 = specialfilter($arg30);\nmy $v3 = 4;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [71, -2, -33, 75, 21, 19];\nmy $x4 = specialfilter($arg40);\nmy $v4 = 3;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [1];\nmy $x5 = specialfilter($arg50);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [];\nmy $x6 = specialfilter($arg60);\nmy $v6 = 0;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Skryf 'n funksie wat 'n reeks van getalle as inset neem en die aantal elemente in die reeks teruggee wat groter as 10 is en waarvan die eerste en laaste syfers van 'n getal beide onewe is (1, 3, 5, 7, 9). Byvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/69", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Jy kry 'n positiewe heelgetal n. Jy moet 'n heelgetal array a van lengte n skep. Vir elke i (1 ≤ i ≤ n), is die waarde van a[i] = i * i - i + 1. Gee die aantal drietalle (a[i], a[j], a[k]) van a terug waar i < j < k, en a[i] + a[j] + a[k] 'n veelvoud van 3 is.\n# \n# Voorbeeld:\n#     Inset: n = 5\n#     Uitset: 1\n#     Verduideliking:\n#     a = [1, 3, 7, 13, 21]\n#     Die enigste geldige drietal is (1, 7, 13).\n# \n#\nsub get_max_triples\n{\n  my ($n) = @_;\n", "entry_point": "get_max_triples", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 5;\nmy $x0 = get_max_triples($arg00);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 6;\nmy $x1 = get_max_triples($arg10);\nmy $v1 = 4;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $x2 = get_max_triples($arg20);\nmy $v2 = 36;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 100;\nmy $x3 = get_max_triples($arg30);\nmy $v3 = 53361;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Jy kry 'n positiewe heelgetal n. Jy moet 'n heelgetal array a van lengte n skep. Vir elke i (1 ≤ i ≤ n), is die waarde van a[i] = i * i - i + 1. Gee die aantal drietalle (a[i], a[j], a[k]) van a terug waar i < j < k, en a[i] + a[j] + a[k] 'n veelvoud van 3 is.\n\nVoorbeeld:\n    Inset: n = 5\n    Uitset: 1\n    Verduideliking:\n    a = [1, 3, 7, 13, 21]\n    Die enigste geldige drietal is (1, 7, 13).", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/70", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Daar is agt planete in ons sonnestelsel: die naaste aan die Son is Mercurius, die volgende een is Venus, dan Aarde, Mars, Jupiter, Saturnus, Uranus, Neptunus. Skryf 'n funksie wat twee planeetname as strings, planet1 en planet2, neem. Die funksie moet 'n tuple teruggee wat al die planete bevat waarvan die omwentelinge tussen die omwenteling van planet1 en die omwenteling van planet2 geleë is, gesorteer volgens die nabyheid aan die son. Die funksie moet 'n leë tuple teruggee as planet1 of planet2 nie korrekte planeetname is nie. Voorbeelde.\n# \n# bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n# bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n# bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n#\nsub bf\n{\n  my ($planet1, $planet2) = @_;\n", "entry_point": "bf", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Jupiter\";\nmy $arg01 = \"Neptune\";\nmy $x0 = bf($arg00, $arg01);\nmy $v0 = [\"Saturn\", \"Uranus\"];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Earth\";\nmy $arg11 = \"Mercury\";\nmy $x1 = bf($arg10, $arg11);\nmy $v1 = [\"Venus\"];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"Mercury\";\nmy $arg21 = \"Uranus\";\nmy $x2 = bf($arg20, $arg21);\nmy $v2 = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"Neptune\";\nmy $arg31 = \"Venus\";\nmy $x3 = bf($arg30, $arg31);\nmy $v3 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"Earth\";\nmy $arg41 = \"Earth\";\nmy $x4 = bf($arg40, $arg41);\nmy $v4 = [];\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"Mars\";\nmy $arg51 = \"Earth\";\nmy $x5 = bf($arg50, $arg51);\nmy $v5 = [];\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"Jupiter\";\nmy $arg61 = \"Makemake\";\nmy $x6 = bf($arg60, $arg61);\nmy $v6 = [];\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Daar is agt planete in ons sonnestelsel: die naaste aan die Son is Mercurius, die volgende een is Venus, dan Aarde, Mars, Jupiter, Saturnus, Uranus, Neptunus. Skryf 'n funksie wat twee planeetname as strings, planet1 en planet2, neem. Die funksie moet 'n tuple teruggee wat al die planete bevat waarvan die omwentelinge tussen die omwenteling van planet1 en die omwenteling van planet2 geleë is, gesorteer volgens die nabyheid aan die son. Die funksie moet 'n leë tuple teruggee as planet1 of planet2 nie korrekte planeetname is nie. Voorbeelde.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/71", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# 'n Eenvoudige program wat die waarde van x moet teruggee as n 'n priemgetal is en die waarde van y moet teruggee as dit nie die geval is nie.\n# \n# Voorbeelde:\n# \n# for x_or_y(7, 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\n# \n#\nsub x_or_y\n{\n  my ($n, $x, $y) = @_;\n", "entry_point": "x_or_y", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 7;\nmy $arg01 = 34;\nmy $arg02 = 12;\nmy $x0 = x_or_y($arg00, $arg01, $arg02);\nmy $v0 = 34;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 15;\nmy $arg11 = 8;\nmy $arg12 = 5;\nmy $x1 = x_or_y($arg10, $arg11, $arg12);\nmy $v1 = 5;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 3;\nmy $arg21 = 33;\nmy $arg22 = 5212;\nmy $x2 = x_or_y($arg20, $arg21, $arg22);\nmy $v2 = 33;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 1259;\nmy $arg31 = 3;\nmy $arg32 = 52;\nmy $x3 = x_or_y($arg30, $arg31, $arg32);\nmy $v3 = 3;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7919;\nmy $arg41 = -1;\nmy $arg42 = 12;\nmy $x4 = x_or_y($arg40, $arg41, $arg42);\nmy $v4 = -1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 3609;\nmy $arg51 = 1245;\nmy $arg52 = 583;\nmy $x5 = x_or_y($arg50, $arg51, $arg52);\nmy $v5 = 583;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 91;\nmy $arg61 = 56;\nmy $arg62 = 129;\nmy $x6 = x_or_y($arg60, $arg61, $arg62);\nmy $v6 = 129;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 6;\nmy $arg71 = 34;\nmy $arg72 = 1234;\nmy $x7 = x_or_y($arg70, $arg71, $arg72);\nmy $v7 = 1234;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 1;\nmy $arg81 = 2;\nmy $arg82 = 0;\nmy $x8 = x_or_y($arg80, $arg81, $arg82);\nmy $v8 = 0;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 2;\nmy $arg91 = 2;\nmy $arg92 = 0;\nmy $x9 = x_or_y($arg90, $arg91, $arg92);\nmy $v9 = 2;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\n", "description": "'n Eenvoudige program wat die waarde van x moet teruggee as n 'n priemgetal is en die waarde van y moet teruggee as dit nie die geval is nie.\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/72", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n lys van getalle, gee terug die som van die kwadrate van die getalle in die lys wat oneweredig is. Ignoreer getalle wat negatief is of nie heelgetalle is nie.\n# \n#     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n#     double_the_difference([-1, -2, 0]) == 0\n#     double_the_difference([9, -2]) == 81\n#     double_the_difference([0]) == 0\n# \n#     As die insetlys leeg is, gee 0 terug.\n# \n#\nsub double_the_difference\n{\n  my ($lst) = @_;\n", "entry_point": "double_the_difference", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = [];\nmy $x0 = double_the_difference($arg00);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = [5, 4];\nmy $x1 = double_the_difference($arg10);\nmy $v1 = 25;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = [0.1, 0.2, 0.3];\nmy $x2 = double_the_difference($arg20);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = [-10, -20, -30];\nmy $x3 = double_the_difference($arg30);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = [-1, -2, 8];\nmy $x4 = double_the_difference($arg40);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = [0.2, 3, 5];\nmy $x5 = double_the_difference($arg50);\nmy $v5 = 34;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\nmy $x6 = double_the_difference($arg60);\nmy $v6 = 166650;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\n", "description": "Gegee 'n lys van getalle, gee terug die som van die kwadrate van die getalle in die lys wat oneweredig is. Ignoreer getalle wat negatief is of nie heelgetalle is nie.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    As die insetlys leeg is, gee 0 terug.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/73", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy sal die naam van 'n klas ( 'n string) en 'n lys van uitbreidings gegee word. Die uitbreidings moet gebruik word om addisionele klasse na die klas te laai. Die sterkte van die uitbreiding is as volg: Laat CAP die nommer van die hoofletters in die uitbreiding se naam wees, en laat SM die nommer van die kleinletters in die uitbreiding se naam wees, die sterkte word gegee deur die breuk CAP - SM. Jy moet die sterkste uitbreiding vind en 'n string in hierdie formaat teruggee: ClassName.StrongestExtensionName. As daar twee of meer uitbreidings met dieselfde sterkte is, moet jy die een kies wat eerste in die lys voorkom. Byvoorbeeld, as jy \"Slices\" as die klas en 'n lys van die uitbreidings: ['SErviNGSliCes', 'Cheese', 'StuFfed'] gegee word, moet jy 'Slices.SErviNGSliCes' teruggee omdat 'SErviNGSliCes' die sterkste uitbreiding is (sy sterkte is -1). Voorbeeld:\n# \n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n#\nsub strongest_extension\n{\n  my ($class_name, $extensions) = @_;\n", "entry_point": "strongest_extension", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Watashi\";\nmy $arg01 = [\"tEN\", \"niNE\", \"eIGHt8OKe\"];\nmy $x0 = strongest_extension($arg00, $arg01);\nmy $v0 = \"Watashi.eIGHt8OKe\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"Boku123\";\nmy $arg11 = [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"];\nmy $x1 = strongest_extension($arg10, $arg11);\nmy $v1 = \"Boku123.YEs.WeCaNe\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"__YESIMHERE\";\nmy $arg21 = [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"];\nmy $x2 = strongest_extension($arg20, $arg21);\nmy $v2 = \"__YESIMHERE.NuLl__\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"K\";\nmy $arg31 = [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"];\nmy $x3 = strongest_extension($arg30, $arg31);\nmy $v3 = \"K.TAR\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"__HAHA\";\nmy $arg41 = [\"Tab\", \"123\", \"781345\", \"-_-\"];\nmy $x4 = strongest_extension($arg40, $arg41);\nmy $v4 = \"__HAHA.123\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"YameRore\";\nmy $arg51 = [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"];\nmy $x5 = strongest_extension($arg50, $arg51);\nmy $v5 = \"YameRore.okIWILL123\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"finNNalLLly\";\nmy $arg61 = [\"Die\", \"NowW\", \"Wow\", \"WoW\"];\nmy $x6 = strongest_extension($arg60, $arg61);\nmy $v6 = \"finNNalLLly.WoW\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"_\";\nmy $arg71 = [\"Bb\", \"91245\"];\nmy $x7 = strongest_extension($arg70, $arg71);\nmy $v7 = \"_.Bb\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = \"Sp\";\nmy $arg81 = [\"671235\", \"Bb\"];\nmy $x8 = strongest_extension($arg80, $arg81);\nmy $v8 = \"Sp.671235\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\n", "description": "Jy sal die naam van 'n klas ( 'n string) en 'n lys van uitbreidings gegee word. Die uitbreidings moet gebruik word om addisionele klasse na die klas te laai. Die sterkte van die uitbreiding is as volg: Laat CAP die nommer van die hoofletters in die uitbreiding se naam wees, en laat SM die nommer van die kleinletters in die uitbreiding se naam wees, die sterkte word gegee deur die breuk CAP - SM. Jy moet die sterkste uitbreiding vind en 'n string in hierdie formaat teruggee: ClassName.StrongestExtensionName. As daar twee of meer uitbreidings met dieselfde sterkte is, moet jy die een kies wat eerste in die lys voorkom. Byvoorbeeld, as jy \"Slices\" as die klas en 'n lys van die uitbreidings: ['SErviNGSliCes', 'Cheese', 'StuFfed'] gegee word, moet jy 'Slices.SErviNGSliCes' teruggee omdat 'SErviNGSliCes' die sterkste uitbreiding is (sy sterkte is -1). Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/74", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 2 woorde. Jy moet True teruggee as die tweede woord of enige van sy rotasies 'n substring is in die eerste woord.\n# cycpattern_check(\"abcd\",\"abd\") => False\n# cycpattern_check(\"hello\",\"ell\") => True\n# cycpattern_check(\"whassup\",\"psus\") => False\n# cycpattern_check(\"abab\",\"baa\") => True\n# cycpattern_check(\"efef\",\"eeff\") => False\n# cycpattern_check(\"himenss\",\"simen\") => True\n\n#\nsub cycpattern_check\n{\n  my ($a, $b) = @_;\n", "entry_point": "cycpattern_check", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"xyzw\";\nmy $arg01 = \"xyw\";\nmy $x0 = cycpattern_check($arg00, $arg01);\nmy $v0 = 0;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"yello\";\nmy $arg11 = \"ell\";\nmy $x1 = cycpattern_check($arg10, $arg11);\nmy $v1 = 1;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"whattup\";\nmy $arg21 = \"ptut\";\nmy $x2 = cycpattern_check($arg20, $arg21);\nmy $v2 = 0;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"efef\";\nmy $arg31 = \"fee\";\nmy $x3 = cycpattern_check($arg30, $arg31);\nmy $v3 = 1;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"abab\";\nmy $arg41 = \"aabb\";\nmy $x4 = cycpattern_check($arg40, $arg41);\nmy $v4 = 0;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"winemtt\";\nmy $arg51 = \"tinem\";\nmy $x5 = cycpattern_check($arg50, $arg51);\nmy $v5 = 1;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\n", "description": "Jy kry 2 woorde. Jy moet True teruggee as die tweede woord of enige van sy rotasies 'n substring is in die eerste woord.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/75", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n positiewe heelgetal, verkry sy Romeinse numeriese ekwivalent as 'n string,\n# en gee dit terug in kleinletters.\n# Beperkings: 1 <= num <= 1000\n# \n# Voorbeelde:\n# >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n# >>> int_to_mini_roman(426) == 'cdxxvi'\n#\nsub int_to_mini_roman\n{\n  my ($number) = @_;\n", "entry_point": "int_to_mini_roman", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 19;\nmy $x0 = int_to_mini_roman($arg00);\nmy $v0 = \"xix\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 152;\nmy $x1 = int_to_mini_roman($arg10);\nmy $v1 = \"clii\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 251;\nmy $x2 = int_to_mini_roman($arg20);\nmy $v2 = \"ccli\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 426;\nmy $x3 = int_to_mini_roman($arg30);\nmy $v3 = \"cdxxvi\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 500;\nmy $x4 = int_to_mini_roman($arg40);\nmy $v4 = \"d\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 1;\nmy $x5 = int_to_mini_roman($arg50);\nmy $v5 = \"i\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 4;\nmy $x6 = int_to_mini_roman($arg60);\nmy $v6 = \"iv\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 43;\nmy $x7 = int_to_mini_roman($arg70);\nmy $v7 = \"xliii\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 90;\nmy $x8 = int_to_mini_roman($arg80);\nmy $v8 = \"xc\";\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 94;\nmy $x9 = int_to_mini_roman($arg90);\nmy $v9 = \"xciv\";\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 532;\nmy $x10 = int_to_mini_roman($arg100);\nmy $v10 = \"dxxxii\";\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\nmy $arg110 = 900;\nmy $x11 = int_to_mini_roman($arg110);\nmy $v11 = \"cm\";\nunless(Compare($x11, $v11)) {\n    die \"Exception -- test case 11 did not pass.\";\n}\nmy $arg120 = 994;\nmy $x12 = int_to_mini_roman($arg120);\nmy $v12 = \"cmxciv\";\nunless(Compare($x12, $v12)) {\n    die \"Exception -- test case 12 did not pass.\";\n}\nmy $arg130 = 1000;\nmy $x13 = int_to_mini_roman($arg130);\nmy $v13 = \"m\";\nunless(Compare($x13, $v13)) {\n    die \"Exception -- test case 13 did not pass.\";\n}\n", "description": "Gegee 'n positiewe heelgetal, verkry sy Romeinse numeriese ekwivalent as 'n string,\nen gee dit terug in kleinletters.\nBeperkings: 1 <= num <= 1000\n\nVoorbeelde:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/76", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee die lengtes van die drie sye van 'n driehoek. Gee Waar terug as die drie sye 'n reguit driehoek vorm, vals andersins. 'n Reguit driehoek is 'n driehoek waarin een hoek 'n regte hoek of 90 grade is. Voorbeeld:\n# \n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\n#\nsub right_angle_triangle\n{\n  my ($a, $b, $c) = @_;\n", "entry_point": "right_angle_triangle", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 3;\nmy $arg01 = 4;\nmy $arg02 = 5;\nmy $x0 = right_angle_triangle($arg00, $arg01, $arg02);\nmy $v0 = 1;\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 1;\nmy $arg11 = 2;\nmy $arg12 = 3;\nmy $x1 = right_angle_triangle($arg10, $arg11, $arg12);\nmy $v1 = 0;\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 10;\nmy $arg21 = 6;\nmy $arg22 = 8;\nmy $x2 = right_angle_triangle($arg20, $arg21, $arg22);\nmy $v2 = 1;\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 2;\nmy $arg31 = 2;\nmy $arg32 = 2;\nmy $x3 = right_angle_triangle($arg30, $arg31, $arg32);\nmy $v3 = 0;\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = 7;\nmy $arg41 = 24;\nmy $arg42 = 25;\nmy $x4 = right_angle_triangle($arg40, $arg41, $arg42);\nmy $v4 = 1;\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = 10;\nmy $arg51 = 5;\nmy $arg52 = 7;\nmy $x5 = right_angle_triangle($arg50, $arg51, $arg52);\nmy $v5 = 0;\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = 5;\nmy $arg61 = 12;\nmy $arg62 = 13;\nmy $x6 = right_angle_triangle($arg60, $arg61, $arg62);\nmy $v6 = 1;\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = 15;\nmy $arg71 = 8;\nmy $arg72 = 17;\nmy $x7 = right_angle_triangle($arg70, $arg71, $arg72);\nmy $v7 = 1;\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\nmy $arg80 = 48;\nmy $arg81 = 55;\nmy $arg82 = 73;\nmy $x8 = right_angle_triangle($arg80, $arg81, $arg82);\nmy $v8 = 1;\nunless(Compare($x8, $v8)) {\n    die \"Exception -- test case 8 did not pass.\";\n}\nmy $arg90 = 1;\nmy $arg91 = 1;\nmy $arg92 = 1;\nmy $x9 = right_angle_triangle($arg90, $arg91, $arg92);\nmy $v9 = 0;\nunless(Compare($x9, $v9)) {\n    die \"Exception -- test case 9 did not pass.\";\n}\nmy $arg100 = 2;\nmy $arg101 = 2;\nmy $arg102 = 10;\nmy $x10 = right_angle_triangle($arg100, $arg101, $arg102);\nmy $v10 = 0;\nunless(Compare($x10, $v10)) {\n    die \"Exception -- test case 10 did not pass.\";\n}\n", "description": "Gegee die lengtes van die drie sye van 'n driehoek. Gee Waar terug as die drie sye 'n reguit driehoek vorm, vals andersins. 'n Reguit driehoek is 'n driehoek waarin een hoek 'n regte hoek of 90 grade is. Voorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/77", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# Jy kry 'n string s.\n#     as s[i] 'n letter is, keer sy geval om van klein na groot of andersom,\n#     anders hou dit soos dit is.\n#     As die string geen letters bevat nie, keer die string om.\n#     Die funksie moet die verkryde string teruggee.\n#     Voorbeelde\n# \n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n# solve(\"#a@C\") = \"#A@c\"\n#\nsub solve\n{\n  my ($s) = @_;\n", "entry_point": "solve", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"AsDf\";\nmy $x0 = solve($arg00);\nmy $v0 = \"aSdF\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"1234\";\nmy $x1 = solve($arg10);\nmy $v1 = \"4321\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"ab\";\nmy $x2 = solve($arg20);\nmy $v2 = \"AB\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"#a@C\";\nmy $x3 = solve($arg30);\nmy $v3 = \"#A@c\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\nmy $arg40 = \"#AsdfW^45\";\nmy $x4 = solve($arg40);\nmy $v4 = \"#aSDFw^45\";\nunless(Compare($x4, $v4)) {\n    die \"Exception -- test case 4 did not pass.\";\n}\nmy $arg50 = \"#6@2\";\nmy $x5 = solve($arg50);\nmy $v5 = \"2@6#\";\nunless(Compare($x5, $v5)) {\n    die \"Exception -- test case 5 did not pass.\";\n}\nmy $arg60 = \"#\\$a^D\";\nmy $x6 = solve($arg60);\nmy $v6 = \"#\\$A^d\";\nunless(Compare($x6, $v6)) {\n    die \"Exception -- test case 6 did not pass.\";\n}\nmy $arg70 = \"#ccc\";\nmy $x7 = solve($arg70);\nmy $v7 = \"#CCC\";\nunless(Compare($x7, $v7)) {\n    die \"Exception -- test case 7 did not pass.\";\n}\n", "description": "Jy kry 'n string s.\n    as s[i] 'n letter is, keer sy geval om van klein na groot of andersom,\n    anders hou dit soos dit is.\n    As die string geen letters bevat nie, keer die string om.\n    Die funksie moet die verkryde string teruggee.\n    Voorbeelde", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/78", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee 'n string 'text', gee sy md5 hash ekwivalent string terug.\n# As 'text' 'n leë string is, gee null terug.\n# >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n#\nsub string_to_md5\n{\n  my ($text) = @_;\n", "entry_point": "string_to_md5", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = \"Hello world\";\nmy $x0 = string_to_md5($arg00);\nmy $v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = \"\";\nmy $x1 = string_to_md5($arg10);\nmy $v1 = \"none\";\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = \"A B C\";\nmy $x2 = string_to_md5($arg20);\nmy $v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = \"password\";\nmy $x3 = string_to_md5($arg30);\nmy $v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Gegee 'n string 'text', gee sy md5 hash ekwivalent string terug.\nAs 'text' 'n leë string is, gee null terug.", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
{"task_id": "perl/79", "prompt": "\n# Jy is 'n deskundige Perl-programmeerder, en hier is jou taak.\n# # Gegee twee positiewe heelgetalle a en b, gee die ewe syfers tussen a en b terug, in opklimmende volgorde.\n# \n# Byvoorbeeld:\n# \n# generate_integers(2, 8) => [2, 4, 6, 8]\n# generate_integers(8, 2) => [2, 4, 6, 8]\n# generate_integers(10, 14) => []\n#\nsub generate_integers\n{\n  my ($a, $b) = @_;\n", "entry_point": "generate_integers", "test": "\n\nuse Data::Compare;\n\nmy $arg00 = 2;\nmy $arg01 = 10;\nmy $x0 = generate_integers($arg00, $arg01);\nmy $v0 = [2, 4, 6, 8];\nunless(Compare($x0, $v0)) {\n    die \"Exception -- test case 0 did not pass.\";\n}\nmy $arg10 = 10;\nmy $arg11 = 2;\nmy $x1 = generate_integers($arg10, $arg11);\nmy $v1 = [2, 4, 6, 8];\nunless(Compare($x1, $v1)) {\n    die \"Exception -- test case 1 did not pass.\";\n}\nmy $arg20 = 132;\nmy $arg21 = 2;\nmy $x2 = generate_integers($arg20, $arg21);\nmy $v2 = [2, 4, 6, 8];\nunless(Compare($x2, $v2)) {\n    die \"Exception -- test case 2 did not pass.\";\n}\nmy $arg30 = 17;\nmy $arg31 = 89;\nmy $x3 = generate_integers($arg30, $arg31);\nmy $v3 = [];\nunless(Compare($x3, $v3)) {\n    die \"Exception -- test case 3 did not pass.\";\n}\n", "description": "Gegee twee positiewe heelgetalle a en b, gee die ewe syfers tussen a en b terug, in opklimmende volgorde.\n\nByvoorbeeld:", "language": "perl", "canonical_solution": NaN, "natural_language": "Afrikaans"}
