{"task_id": "java/0", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * \n     * Sıfır bakiye ile başlayan bir banka hesabındaki para yatırma ve çekme işlemlerinin bir listesi verilir. Göreviniz, hesap bakiyesinin herhangi bir noktada sıfırın altına düşüp düşmediğini tespit etmek ve o noktada işlevin True değerini döndürmesidir. Aksi takdirde False değeri döndürmelidir.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n", "entry_point": "belowZero", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList();\n        Boolean x0 = BelowZero.belowZero(Arrays.asList());\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(1, 2, -3, 1, 2, -3);\n        Boolean x1 = BelowZero.belowZero(Arrays.asList(1, 2, -3, 1, 2, -3));\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(1, 2, -4, 5, 6);\n        Boolean x2 = BelowZero.belowZero(Arrays.asList(1, 2, -4, 5, 6));\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4);\n        Boolean x3 = BelowZero.belowZero(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4));\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5);\n        Boolean x4 = BelowZero.belowZero(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5));\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4);\n        Boolean x5 = BelowZero.belowZero(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4));\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Sıfır bakiye ile başlayan bir banka hesabındaki para yatırma ve çekme işlemlerinin bir listesi verilir. Göreviniz, hesap bakiyesinin herhangi bir noktada sıfırın altına düşüp düşmediğini tespit etmek ve o noktada işlevin True değerini döndürmesidir. Aksi takdirde False değeri döndürmelidir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * \n     * Verilen tamsayı listesi için, listenin tüm elemanlarının toplamı ve çarpımından oluşan bir tuple döndürün.\n     * Boş bir liste için toplam 0 ve çarpım 1 olmalıdır.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n", "entry_point": "sumProduct", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList();\n        List<Integer> x0 = SumProduct.sumProduct(Arrays.asList());\n        List<Integer> v0 = Arrays.asList(0, 1);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(1, 1, 1);\n        List<Integer> x1 = SumProduct.sumProduct(Arrays.asList(1, 1, 1));\n        List<Integer> v1 = Arrays.asList(3, 1);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(100, 0);\n        List<Integer> x2 = SumProduct.sumProduct(Arrays.asList(100, 0));\n        List<Integer> v2 = Arrays.asList(100, 0);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(3, 5, 7);\n        List<Integer> x3 = SumProduct.sumProduct(Arrays.asList(3, 5, 7));\n        List<Integer> v3 = Arrays.asList(15, 105);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(10);\n        List<Integer> x4 = SumProduct.sumProduct(Arrays.asList(10));\n        List<Integer> v4 = Arrays.asList(10, 10);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen tamsayı listesi için, listenin tüm elemanlarının toplamı ve çarpımından oluşan bir tuple döndürün.\n     * Boş bir liste için toplam 0 ve çarpım 1 olmalıdır.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * \n     * Girdiler, sadece 1'ler ve 0'lar içeren iki dize a ve b'dir.\n     *     Bu girdiler üzerinde ikili XOR işlemi yapın ve sonucu da bir dize olarak döndürün.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n", "entry_point": "stringXor", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"111000\";\n        String arg01 = \"101010\";\n        String x0 = StringXor.stringXor(\"111000\", \"101010\");\n        String v0 = \"010010\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"1\";\n        String arg11 = \"1\";\n        String x1 = StringXor.stringXor(\"1\", \"1\");\n        String v1 = \"0\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"0101\";\n        String arg21 = \"0000\";\n        String x2 = StringXor.stringXor(\"0101\", \"0000\");\n        String v2 = \"0101\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "\n     * Girdiler, sadece 1'ler ve 0'lar içeren iki dize a ve b'dir.\n     *     Bu girdiler üzerinde ikili XOR işlemi yapın ve sonucu da bir dize olarak döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * \n     * Dize dizisi içerisinden en uzun olanı döndürün. Aynı uzunlukta birden fazla dize varsa, ilk olanı döndürün. Giriş listesi boş ise null döndürün.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n", "entry_point": "longest", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList();\n        String x0 = Longest.longest(Arrays.asList());\n        String v0 = null;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(\"x\", \"y\", \"z\");\n        String x1 = Longest.longest(Arrays.asList(\"x\", \"y\", \"z\"));\n        String v1 = \"x\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\");\n        String x2 = Longest.longest(Arrays.asList(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"));\n        String v2 = \"zzzz\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "\n     * Dize dizisi içerisinden en uzun olanı döndürün. Aynı uzunlukta birden fazla dize varsa, ilk olanı döndürün. Giriş listesi boş ise null döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * \n     * İki tamsayının en büyük ortak bölenini döndür.\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n", "entry_point": "greatestCommonDivisor", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 3;\n        int arg01 = 7;\n        int x0 = GreatestCommonDivisor.greatestCommonDivisor(3, 7);\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 10;\n        int arg11 = 15;\n        int x1 = GreatestCommonDivisor.greatestCommonDivisor(10, 15);\n        int v1 = 5;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 49;\n        int arg21 = 14;\n        int x2 = GreatestCommonDivisor.greatestCommonDivisor(49, 14);\n        int v2 = 7;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 144;\n        int arg31 = 60;\n        int x3 = GreatestCommonDivisor.greatestCommonDivisor(144, 60);\n        int v3 = 12;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * İki tamsayının en büyük ortak bölenini döndür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * \n     * Girdi, 'sıfır' ile 'dokuz' arasındaki sayıların boşlukla ayrılmış bir dizgisidir.\n     * Geçerli seçenekler 'sıfır', 'bir', 'iki', 'üç', 'dört', 'beş', 'altı', 'yedi', 'sekiz' ve 'dokuz'dur.\n     * Sayıları en küçükten en büyüğe sıralanmış dizgi olarak döndürün.\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n", "entry_point": "sortNumbers", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"\";\n        String x0 = SortNumbers.sortNumbers(\"\");\n        String v0 = \"\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"three\";\n        String x1 = SortNumbers.sortNumbers(\"three\");\n        String v1 = \"three\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"three five nine\";\n        String x2 = SortNumbers.sortNumbers(\"three five nine\");\n        String v2 = \"three five nine\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"five zero four seven nine eight\";\n        String x3 = SortNumbers.sortNumbers(\"five zero four seven nine eight\");\n        String v3 = \"zero four five seven eight nine\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"six five four three two one zero\";\n        String x4 = SortNumbers.sortNumbers(\"six five four three two one zero\");\n        String v4 = \"zero one two three four five six\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Girdi, 'sıfır' ile 'dokuz' arasındaki sayıların boşlukla ayrılmış bir dizgisidir.\n     * Geçerli seçenekler 'sıfır', 'bir', 'iki', 'üç', 'dört', 'beş', 'altı', 'yedi', 'sekiz' ve 'dokuz'dur.\n     * Sayıları en küçükten en büyüğe sıralanmış dizgi olarak döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * \n     * En az iki eleman içeren bir sayı listesi verildiğinde, bu listeye bir doğrusal dönüşüm uygulanır, böylece en küçük sayı 0 olur ve en büyük sayı 1 olur.\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n", "entry_point": "rescaleToUnit", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Double> arg00 = Arrays.asList(2.0, 49.9);\n        List<Double> x0 = RescaleToUnit.rescaleToUnit(Arrays.asList(2.0, 49.9));\n        List<Double> v0 = Arrays.asList(0.0, 1.0);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Double> arg10 = Arrays.asList(100.0, 49.9);\n        List<Double> x1 = RescaleToUnit.rescaleToUnit(Arrays.asList(100.0, 49.9));\n        List<Double> v1 = Arrays.asList(1.0, 0.0);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Double> arg20 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> x2 = RescaleToUnit.rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        List<Double> v2 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Double> arg30 = Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0);\n        List<Double> x3 = RescaleToUnit.rescaleToUnit(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0));\n        List<Double> v3 = Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Double> arg40 = Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0);\n        List<Double> x4 = RescaleToUnit.rescaleToUnit(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0));\n        List<Double> v4 = Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * En az iki eleman içeren bir sayı listesi verildiğinde, bu listeye bir doğrusal dönüşüm uygulanır, böylece en küçük sayı 0 olur ve en büyük sayı 1 olur.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * \n     * Verilen bir dizge için, küçük harfleri büyük harfe ve büyük harfleri küçük harfe çevirin.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n", "entry_point": "flipCase", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"\";\n        String x0 = FlipCase.flipCase(\"\");\n        String v0 = \"\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Hello!\";\n        String x1 = FlipCase.flipCase(\"Hello!\");\n        String v1 = \"hELLO!\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"These violent delights have violent ends\";\n        String x2 = FlipCase.flipCase(\"These violent delights have violent ends\");\n        String v2 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dizge için, küçük harfleri büyük harfe ve büyük harfleri küçük harfe çevirin.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * \n     * Listedeki sadece pozitif sayıları döndürün.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n", "entry_point": "getPositive", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(-1, -2, 4, 5, 6);\n        List<Object> x0 = GetPositive.getPositive(Arrays.asList(-1, -2, 4, 5, 6));\n        List<Object> v0 = Arrays.asList(4, 5, 6);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10);\n        List<Object> x1 = GetPositive.getPositive(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10));\n        List<Object> v1 = Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(-1, -2);\n        List<Object> x2 = GetPositive.getPositive(Arrays.asList(-1, -2));\n        List<Object> v2 = Arrays.asList();\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList();\n        List<Object> x3 = GetPositive.getPositive(Arrays.asList());\n        List<Object> v3 = Arrays.asList();\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Listedeki sadece pozitif sayıları döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * \n     * Verilen bir sayı asal ise true, değilse false döndürün.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n", "entry_point": "isPrime", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 6;\n        Boolean x0 = IsPrime.isPrime(6);\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 101;\n        Boolean x1 = IsPrime.isPrime(101);\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 11;\n        Boolean x2 = IsPrime.isPrime(11);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 13441;\n        Boolean x3 = IsPrime.isPrime(13441);\n        Boolean v3 = true;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 61;\n        Boolean x4 = IsPrime.isPrime(61);\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 4;\n        Boolean x5 = IsPrime.isPrime(4);\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 1;\n        Boolean x6 = IsPrime.isPrime(1);\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 5;\n        Boolean x7 = IsPrime.isPrime(5);\n        Boolean v7 = true;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 11;\n        Boolean x8 = IsPrime.isPrime(11);\n        Boolean v8 = true;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 17;\n        Boolean x9 = IsPrime.isPrime(17);\n        Boolean v9 = true;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        int arg100 = 85;\n        Boolean x10 = IsPrime.isPrime(85);\n        Boolean v10 = false;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        int arg110 = 77;\n        Boolean x11 = IsPrime.isPrime(77);\n        Boolean v11 = false;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        int arg120 = 255379;\n        Boolean x12 = IsPrime.isPrime(255379);\n        Boolean v12 = false;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir sayı asal ise true, değilse false döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * \n     * Listedeki sıralanmış benzersiz öğeleri döndürün.\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n", "entry_point": "unique", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> x0 = Unique.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        List<Integer> v0 = Arrays.asList(0, 2, 3, 5, 9, 123);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n\n}\n}\n", "description": "\n     * Listedeki sıralanmış benzersiz öğeleri döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/11", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * \n     * prime_fib, Fibonacci sayısı olan ve aynı zamanda asal olan n'inci sayıyı döndürür.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n", "entry_point": "primeFib", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 1;\n        int x0 = PrimeFib.primeFib(1);\n        int v0 = 2;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 2;\n        int x1 = PrimeFib.primeFib(2);\n        int v1 = 3;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 3;\n        int x2 = PrimeFib.primeFib(3);\n        int v2 = 5;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 4;\n        int x3 = PrimeFib.primeFib(4);\n        int v3 = 13;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 5;\n        int x4 = PrimeFib.primeFib(5);\n        int v4 = 89;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 6;\n        int x5 = PrimeFib.primeFib(6);\n        int v5 = 233;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 7;\n        int x6 = PrimeFib.primeFib(7);\n        int v6 = 1597;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 8;\n        int x7 = PrimeFib.primeFib(8);\n        int v7 = 28657;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 9;\n        int x8 = PrimeFib.primeFib(9);\n        int v8 = 514229;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 10;\n        int x9 = PrimeFib.primeFib(10);\n        int v9 = 433494437;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n\n}\n}\n", "description": "\n     * prime_fib, Fibonacci sayısı olan ve aynı zamanda asal olan n'inci sayıyı döndürür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/12", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * \n     * triples_sum_to_zero, bir tamsayı listesi alır. \n     *     Eğer listede sıfıra eşit olan üç farklı eleman varsa True döndürür, aksi takdirde False döndürür.\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n", "entry_point": "triplesSumToZero", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 3, 5, 0);\n        Boolean x0 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 3, 5, 0));\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 3, 5, -1);\n        Boolean x1 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 3, 5, -1));\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 3, -2, 1);\n        Boolean x2 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 3, -2, 1));\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(1, 2, 3, 7);\n        Boolean x3 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 2, 3, 7));\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1, 2, 5, 7);\n        Boolean x4 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 2, 5, 7));\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(2, 4, -5, 3, 9, 7);\n        Boolean x5 = TriplesSumToZero.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7));\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(1);\n        Boolean x6 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1));\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(1, 3, 5, -100);\n        Boolean x7 = TriplesSumToZero.triplesSumToZero(Arrays.asList(1, 3, 5, -100));\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Integer> arg80 = Arrays.asList(100, 3, 5, -100);\n        Boolean x8 = TriplesSumToZero.triplesSumToZero(Arrays.asList(100, 3, 5, -100));\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * triples_sum_to_zero, bir tamsayı listesi alır. \n     *     Eğer listede sıfıra eşit olan üç farklı eleman varsa True döndürür, aksi takdirde False döndürür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/13", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * \n     * pairs_sum_to_zero, bir tamsayı listesi alır.\n     *     Eğer listede sıfıra eşit olan iki farklı eleman varsa True döndürür, aksi takdirde False döndürür.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n", "entry_point": "pairsSumToZero", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 3, 5, 0);\n        Boolean x0 = PairsSumToZero.pairsSumToZero(Arrays.asList(1, 3, 5, 0));\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 3, -2, 1);\n        Boolean x1 = PairsSumToZero.pairsSumToZero(Arrays.asList(1, 3, -2, 1));\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 2, 3, 7);\n        Boolean x2 = PairsSumToZero.pairsSumToZero(Arrays.asList(1, 2, 3, 7));\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        Boolean x3 = PairsSumToZero.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7));\n        Boolean v3 = true;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1);\n        Boolean x4 = PairsSumToZero.pairsSumToZero(Arrays.asList(1));\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(-3, 9, -1, 3, 2, 30);\n        Boolean x5 = PairsSumToZero.pairsSumToZero(Arrays.asList(-3, 9, -1, 3, 2, 30));\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(-3, 9, -1, 3, 2, 31);\n        Boolean x6 = PairsSumToZero.pairsSumToZero(Arrays.asList(-3, 9, -1, 3, 2, 31));\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(-3, 9, -1, 4, 2, 30);\n        Boolean x7 = PairsSumToZero.pairsSumToZero(Arrays.asList(-3, 9, -1, 4, 2, 30));\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Integer> arg80 = Arrays.asList(-3, 9, -1, 4, 2, 31);\n        Boolean x8 = PairsSumToZero.pairsSumToZero(Arrays.asList(-3, 9, -1, 4, 2, 31));\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * pairs_sum_to_zero, bir tamsayı listesi alır.\n     *     Eğer listede sıfıra eşit olan iki farklı eleman varsa True döndürür, aksi takdirde False döndürür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/14", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * \n     * Fib4 sayı dizisi, Fibbonacci dizisine benzer bir dizidir ve aşağıdaki gibi tanımlanır:\n     *     fib4(0) -> 0\n     *     fib4(1) -> 0\n     *     fib4(2) -> 2\n     *     fib4(3) -> 0\n     *     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     *     Lütfen fib4 sayı dizisinin n'inci elemanını verimli bir şekilde hesaplamak için bir fonksiyon yazın. Yineleme kullanmayın.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n", "entry_point": "fib4", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 5;\n        int x0 = Fib4.fib4(5);\n        int v0 = 4;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 8;\n        int x1 = Fib4.fib4(8);\n        int v1 = 28;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 10;\n        int x2 = Fib4.fib4(10);\n        int v2 = 104;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 12;\n        int x3 = Fib4.fib4(12);\n        int v3 = 386;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Fib4 sayı dizisi, Fibbonacci dizisine benzer bir dizidir ve aşağıdaki gibi tanımlanır:\n     *     fib4(0) -> 0\n     *     fib4(1) -> 0\n     *     fib4(2) -> 2\n     *     fib4(3) -> 0\n     *     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     *     Lütfen fib4 sayı dizisinin n'inci elemanını verimli bir şekilde hesaplamak için bir fonksiyon yazın. Yineleme kullanmayın.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * \n     * Listedeki elemanların ortancasını döndürün.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n", "entry_point": "median", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(3, 1, 2, 4, 5);\n        Number x0 = Median.median(Arrays.asList(3, 1, 2, 4, 5));\n        Number v0 = 3;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        Number x1 = Median.median(Arrays.asList(-10, 4, 6, 1000, 10, 20));\n        Number v1 = 8.0;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(5);\n        Number x2 = Median.median(Arrays.asList(5));\n        Number v2 = 5;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(6, 5);\n        Number x3 = Median.median(Arrays.asList(6, 5));\n        Number v3 = 5.5;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(8, 1, 3, 9, 9, 2, 7);\n        Number x4 = Median.median(Arrays.asList(8, 1, 3, 9, 9, 2, 7));\n        Number v4 = 7;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Listedeki elemanların ortancasını döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/16", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * \n     * Verilen dizgenin palindrom olup olmadığını kontrol eder.\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n", "entry_point": "isPalindrome", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"\";\n        Boolean x0 = IsPalindrome.isPalindrome(\"\");\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"aba\";\n        Boolean x1 = IsPalindrome.isPalindrome(\"aba\");\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"aaaaa\";\n        Boolean x2 = IsPalindrome.isPalindrome(\"aaaaa\");\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"zbcd\";\n        Boolean x3 = IsPalindrome.isPalindrome(\"zbcd\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"xywyx\";\n        Boolean x4 = IsPalindrome.isPalindrome(\"xywyx\");\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"xywyz\";\n        Boolean x5 = IsPalindrome.isPalindrome(\"xywyz\");\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"xywzx\";\n        Boolean x6 = IsPalindrome.isPalindrome(\"xywzx\");\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen dizgenin palindrom olup olmadığını kontrol eder.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * \n     * remove_vowels, sesli harfleri çıkaran bir fonksiyondur. Fonksiyon, bir dize alır ve sesli harfleri olmayan bir dize döndürür.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n", "entry_point": "removeVowels", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"\";\n        String x0 = RemoveVowels.removeVowels(\"\");\n        String v0 = \"\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"abcdef\\nghijklm\";\n        String x1 = RemoveVowels.removeVowels(\"abcdef\\nghijklm\");\n        String v1 = \"bcdf\\nghjklm\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"fedcba\";\n        String x2 = RemoveVowels.removeVowels(\"fedcba\");\n        String v2 = \"fdcb\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"eeeee\";\n        String x3 = RemoveVowels.removeVowels(\"eeeee\");\n        String v3 = \"\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"acBAA\";\n        String x4 = RemoveVowels.removeVowels(\"acBAA\");\n        String v4 = \"cB\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"EcBOO\";\n        String x5 = RemoveVowels.removeVowels(\"EcBOO\");\n        String v5 = \"cB\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"ybcd\";\n        String x6 = RemoveVowels.removeVowels(\"ybcd\");\n        String v6 = \"ybcd\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * remove_vowels, sesli harfleri çıkaran bir fonksiyondur. Fonksiyon, bir dize alır ve sesli harfleri olmayan bir dize döndürür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/18", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * \n     * Eğer liste l'deki tüm sayılar eşik değeri t'nin altındaysa True değerini döndür.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n", "entry_point": "belowThreshold", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 2, 4, 10);\n        int arg01 = 100;\n        Boolean x0 = BelowThreshold.belowThreshold(Arrays.asList(1, 2, 4, 10), 100);\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 20, 4, 10);\n        int arg11 = 5;\n        Boolean x1 = BelowThreshold.belowThreshold(Arrays.asList(1, 20, 4, 10), 5);\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 20, 4, 10);\n        int arg21 = 21;\n        Boolean x2 = BelowThreshold.belowThreshold(Arrays.asList(1, 20, 4, 10), 21);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(1, 20, 4, 10);\n        int arg31 = 22;\n        Boolean x3 = BelowThreshold.belowThreshold(Arrays.asList(1, 20, 4, 10), 22);\n        Boolean v3 = true;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1, 8, 4, 10);\n        int arg41 = 11;\n        Boolean x4 = BelowThreshold.belowThreshold(Arrays.asList(1, 8, 4, 10), 11);\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(1, 8, 4, 10);\n        int arg51 = 10;\n        Boolean x5 = BelowThreshold.belowThreshold(Arrays.asList(1, 8, 4, 10), 10);\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Eğer liste l'deki tüm sayılar eşik değeri t'nin altındaysa True değerini döndür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/19", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * \n     * İki sayı x ve y'yi topla.\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n", "entry_point": "add", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 0;\n        int arg01 = 1;\n        int x0 = Add.add(0, 1);\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 1;\n        int arg11 = 0;\n        int x1 = Add.add(1, 0);\n        int v1 = 1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 2;\n        int arg21 = 3;\n        int x2 = Add.add(2, 3);\n        int v2 = 5;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 5;\n        int arg31 = 7;\n        int x3 = Add.add(5, 7);\n        int v3 = 12;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 7;\n        int arg41 = 5;\n        int x4 = Add.add(7, 5);\n        int v4 = 12;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 572;\n        int arg51 = 725;\n        int x5 = Add.add(572, 725);\n        int v5 = 1297;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 51;\n        int arg61 = 804;\n        int x6 = Add.add(51, 804);\n        int v6 = 855;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 645;\n        int arg71 = 96;\n        int x7 = Add.add(645, 96);\n        int v7 = 741;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 712;\n        int arg81 = 853;\n        int x8 = Add.add(712, 853);\n        int v8 = 1565;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 223;\n        int arg91 = 101;\n        int x9 = Add.add(223, 101);\n        int v9 = 324;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        int arg100 = 76;\n        int arg101 = 29;\n        int x10 = Add.add(76, 29);\n        int v10 = 105;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        int arg110 = 416;\n        int arg111 = 149;\n        int x11 = Add.add(416, 149);\n        int v11 = 565;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        int arg120 = 145;\n        int arg121 = 409;\n        int x12 = Add.add(145, 409);\n        int v12 = 554;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n        int arg130 = 535;\n        int arg131 = 430;\n        int x13 = Add.add(535, 430);\n        int v13 = 965;\n        if (!(compare(x13, v13))) {\n            throw new java.lang.Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13);\n        }\n\n        int arg140 = 118;\n        int arg141 = 303;\n        int x14 = Add.add(118, 303);\n        int v14 = 421;\n        if (!(compare(x14, v14))) {\n            throw new java.lang.Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14);\n        }\n\n        int arg150 = 287;\n        int arg151 = 94;\n        int x15 = Add.add(287, 94);\n        int v15 = 381;\n        if (!(compare(x15, v15))) {\n            throw new java.lang.Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15);\n        }\n\n        int arg160 = 768;\n        int arg161 = 257;\n        int x16 = Add.add(768, 257);\n        int v16 = 1025;\n        if (!(compare(x16, v16))) {\n            throw new java.lang.Exception(\"Exception -- test case 16 did not pass. x16 = \" + x16);\n        }\n\n        int arg170 = 421;\n        int arg171 = 677;\n        int x17 = Add.add(421, 677);\n        int v17 = 1098;\n        if (!(compare(x17, v17))) {\n            throw new java.lang.Exception(\"Exception -- test case 17 did not pass. x17 = \" + x17);\n        }\n\n        int arg180 = 802;\n        int arg181 = 814;\n        int x18 = Add.add(802, 814);\n        int v18 = 1616;\n        if (!(compare(x18, v18))) {\n            throw new java.lang.Exception(\"Exception -- test case 18 did not pass. x18 = \" + x18);\n        }\n\n        int arg190 = 510;\n        int arg191 = 922;\n        int x19 = Add.add(510, 922);\n        int v19 = 1432;\n        if (!(compare(x19, v19))) {\n            throw new java.lang.Exception(\"Exception -- test case 19 did not pass. x19 = \" + x19);\n        }\n\n        int arg200 = 345;\n        int arg201 = 819;\n        int x20 = Add.add(345, 819);\n        int v20 = 1164;\n        if (!(compare(x20, v20))) {\n            throw new java.lang.Exception(\"Exception -- test case 20 did not pass. x20 = \" + x20);\n        }\n\n        int arg210 = 895;\n        int arg211 = 436;\n        int x21 = Add.add(895, 436);\n        int v21 = 1331;\n        if (!(compare(x21, v21))) {\n            throw new java.lang.Exception(\"Exception -- test case 21 did not pass. x21 = \" + x21);\n        }\n\n        int arg220 = 123;\n        int arg221 = 424;\n        int x22 = Add.add(123, 424);\n        int v22 = 547;\n        if (!(compare(x22, v22))) {\n            throw new java.lang.Exception(\"Exception -- test case 22 did not pass. x22 = \" + x22);\n        }\n\n        int arg230 = 923;\n        int arg231 = 245;\n        int x23 = Add.add(923, 245);\n        int v23 = 1168;\n        if (!(compare(x23, v23))) {\n            throw new java.lang.Exception(\"Exception -- test case 23 did not pass. x23 = \" + x23);\n        }\n\n        int arg240 = 23;\n        int arg241 = 438;\n        int x24 = Add.add(23, 438);\n        int v24 = 461;\n        if (!(compare(x24, v24))) {\n            throw new java.lang.Exception(\"Exception -- test case 24 did not pass. x24 = \" + x24);\n        }\n\n        int arg250 = 565;\n        int arg251 = 133;\n        int x25 = Add.add(565, 133);\n        int v25 = 698;\n        if (!(compare(x25, v25))) {\n            throw new java.lang.Exception(\"Exception -- test case 25 did not pass. x25 = \" + x25);\n        }\n\n        int arg260 = 945;\n        int arg261 = 925;\n        int x26 = Add.add(945, 925);\n        int v26 = 1870;\n        if (!(compare(x26, v26))) {\n            throw new java.lang.Exception(\"Exception -- test case 26 did not pass. x26 = \" + x26);\n        }\n\n        int arg270 = 261;\n        int arg271 = 983;\n        int x27 = Add.add(261, 983);\n        int v27 = 1244;\n        if (!(compare(x27, v27))) {\n            throw new java.lang.Exception(\"Exception -- test case 27 did not pass. x27 = \" + x27);\n        }\n\n        int arg280 = 139;\n        int arg281 = 577;\n        int x28 = Add.add(139, 577);\n        int v28 = 716;\n        if (!(compare(x28, v28))) {\n            throw new java.lang.Exception(\"Exception -- test case 28 did not pass. x28 = \" + x28);\n        }\n\n        int arg290 = 763;\n        int arg291 = 178;\n        int x29 = Add.add(763, 178);\n        int v29 = 941;\n        if (!(compare(x29, v29))) {\n            throw new java.lang.Exception(\"Exception -- test case 29 did not pass. x29 = \" + x29);\n        }\n\n        int arg300 = 147;\n        int arg301 = 892;\n        int x30 = Add.add(147, 892);\n        int v30 = 1039;\n        if (!(compare(x30, v30))) {\n            throw new java.lang.Exception(\"Exception -- test case 30 did not pass. x30 = \" + x30);\n        }\n\n        int arg310 = 436;\n        int arg311 = 402;\n        int x31 = Add.add(436, 402);\n        int v31 = 838;\n        if (!(compare(x31, v31))) {\n            throw new java.lang.Exception(\"Exception -- test case 31 did not pass. x31 = \" + x31);\n        }\n\n        int arg320 = 610;\n        int arg321 = 581;\n        int x32 = Add.add(610, 581);\n        int v32 = 1191;\n        if (!(compare(x32, v32))) {\n            throw new java.lang.Exception(\"Exception -- test case 32 did not pass. x32 = \" + x32);\n        }\n\n        int arg330 = 103;\n        int arg331 = 416;\n        int x33 = Add.add(103, 416);\n        int v33 = 519;\n        if (!(compare(x33, v33))) {\n            throw new java.lang.Exception(\"Exception -- test case 33 did not pass. x33 = \" + x33);\n        }\n\n        int arg340 = 339;\n        int arg341 = 990;\n        int x34 = Add.add(339, 990);\n        int v34 = 1329;\n        if (!(compare(x34, v34))) {\n            throw new java.lang.Exception(\"Exception -- test case 34 did not pass. x34 = \" + x34);\n        }\n\n        int arg350 = 130;\n        int arg351 = 504;\n        int x35 = Add.add(130, 504);\n        int v35 = 634;\n        if (!(compare(x35, v35))) {\n            throw new java.lang.Exception(\"Exception -- test case 35 did not pass. x35 = \" + x35);\n        }\n\n        int arg360 = 242;\n        int arg361 = 717;\n        int x36 = Add.add(242, 717);\n        int v36 = 959;\n        if (!(compare(x36, v36))) {\n            throw new java.lang.Exception(\"Exception -- test case 36 did not pass. x36 = \" + x36);\n        }\n\n        int arg370 = 562;\n        int arg371 = 110;\n        int x37 = Add.add(562, 110);\n        int v37 = 672;\n        if (!(compare(x37, v37))) {\n            throw new java.lang.Exception(\"Exception -- test case 37 did not pass. x37 = \" + x37);\n        }\n\n        int arg380 = 396;\n        int arg381 = 909;\n        int x38 = Add.add(396, 909);\n        int v38 = 1305;\n        if (!(compare(x38, v38))) {\n            throw new java.lang.Exception(\"Exception -- test case 38 did not pass. x38 = \" + x38);\n        }\n\n        int arg390 = 887;\n        int arg391 = 703;\n        int x39 = Add.add(887, 703);\n        int v39 = 1590;\n        if (!(compare(x39, v39))) {\n            throw new java.lang.Exception(\"Exception -- test case 39 did not pass. x39 = \" + x39);\n        }\n\n        int arg400 = 870;\n        int arg401 = 551;\n        int x40 = Add.add(870, 551);\n        int v40 = 1421;\n        if (!(compare(x40, v40))) {\n            throw new java.lang.Exception(\"Exception -- test case 40 did not pass. x40 = \" + x40);\n        }\n\n        int arg410 = 422;\n        int arg411 = 391;\n        int x41 = Add.add(422, 391);\n        int v41 = 813;\n        if (!(compare(x41, v41))) {\n            throw new java.lang.Exception(\"Exception -- test case 41 did not pass. x41 = \" + x41);\n        }\n\n        int arg420 = 299;\n        int arg421 = 505;\n        int x42 = Add.add(299, 505);\n        int v42 = 804;\n        if (!(compare(x42, v42))) {\n            throw new java.lang.Exception(\"Exception -- test case 42 did not pass. x42 = \" + x42);\n        }\n\n        int arg430 = 346;\n        int arg431 = 56;\n        int x43 = Add.add(346, 56);\n        int v43 = 402;\n        if (!(compare(x43, v43))) {\n            throw new java.lang.Exception(\"Exception -- test case 43 did not pass. x43 = \" + x43);\n        }\n\n        int arg440 = 36;\n        int arg441 = 706;\n        int x44 = Add.add(36, 706);\n        int v44 = 742;\n        if (!(compare(x44, v44))) {\n            throw new java.lang.Exception(\"Exception -- test case 44 did not pass. x44 = \" + x44);\n        }\n\n        int arg450 = 738;\n        int arg451 = 411;\n        int x45 = Add.add(738, 411);\n        int v45 = 1149;\n        if (!(compare(x45, v45))) {\n            throw new java.lang.Exception(\"Exception -- test case 45 did not pass. x45 = \" + x45);\n        }\n\n        int arg460 = 679;\n        int arg461 = 87;\n        int x46 = Add.add(679, 87);\n        int v46 = 766;\n        if (!(compare(x46, v46))) {\n            throw new java.lang.Exception(\"Exception -- test case 46 did not pass. x46 = \" + x46);\n        }\n\n        int arg470 = 25;\n        int arg471 = 303;\n        int x47 = Add.add(25, 303);\n        int v47 = 328;\n        if (!(compare(x47, v47))) {\n            throw new java.lang.Exception(\"Exception -- test case 47 did not pass. x47 = \" + x47);\n        }\n\n        int arg480 = 161;\n        int arg481 = 612;\n        int x48 = Add.add(161, 612);\n        int v48 = 773;\n        if (!(compare(x48, v48))) {\n            throw new java.lang.Exception(\"Exception -- test case 48 did not pass. x48 = \" + x48);\n        }\n\n        int arg490 = 306;\n        int arg491 = 841;\n        int x49 = Add.add(306, 841);\n        int v49 = 1147;\n        if (!(compare(x49, v49))) {\n            throw new java.lang.Exception(\"Exception -- test case 49 did not pass. x49 = \" + x49);\n        }\n\n        int arg500 = 973;\n        int arg501 = 411;\n        int x50 = Add.add(973, 411);\n        int v50 = 1384;\n        if (!(compare(x50, v50))) {\n            throw new java.lang.Exception(\"Exception -- test case 50 did not pass. x50 = \" + x50);\n        }\n\n        int arg510 = 711;\n        int arg511 = 157;\n        int x51 = Add.add(711, 157);\n        int v51 = 868;\n        if (!(compare(x51, v51))) {\n            throw new java.lang.Exception(\"Exception -- test case 51 did not pass. x51 = \" + x51);\n        }\n\n        int arg520 = 471;\n        int arg521 = 27;\n        int x52 = Add.add(471, 27);\n        int v52 = 498;\n        if (!(compare(x52, v52))) {\n            throw new java.lang.Exception(\"Exception -- test case 52 did not pass. x52 = \" + x52);\n        }\n\n        int arg530 = 714;\n        int arg531 = 792;\n        int x53 = Add.add(714, 792);\n        int v53 = 1506;\n        if (!(compare(x53, v53))) {\n            throw new java.lang.Exception(\"Exception -- test case 53 did not pass. x53 = \" + x53);\n        }\n\n        int arg540 = 38;\n        int arg541 = 206;\n        int x54 = Add.add(38, 206);\n        int v54 = 244;\n        if (!(compare(x54, v54))) {\n            throw new java.lang.Exception(\"Exception -- test case 54 did not pass. x54 = \" + x54);\n        }\n\n        int arg550 = 907;\n        int arg551 = 343;\n        int x55 = Add.add(907, 343);\n        int v55 = 1250;\n        if (!(compare(x55, v55))) {\n            throw new java.lang.Exception(\"Exception -- test case 55 did not pass. x55 = \" + x55);\n        }\n\n        int arg560 = 23;\n        int arg561 = 760;\n        int x56 = Add.add(23, 760);\n        int v56 = 783;\n        if (!(compare(x56, v56))) {\n            throw new java.lang.Exception(\"Exception -- test case 56 did not pass. x56 = \" + x56);\n        }\n\n        int arg570 = 524;\n        int arg571 = 859;\n        int x57 = Add.add(524, 859);\n        int v57 = 1383;\n        if (!(compare(x57, v57))) {\n            throw new java.lang.Exception(\"Exception -- test case 57 did not pass. x57 = \" + x57);\n        }\n\n        int arg580 = 30;\n        int arg581 = 529;\n        int x58 = Add.add(30, 529);\n        int v58 = 559;\n        if (!(compare(x58, v58))) {\n            throw new java.lang.Exception(\"Exception -- test case 58 did not pass. x58 = \" + x58);\n        }\n\n        int arg590 = 341;\n        int arg591 = 691;\n        int x59 = Add.add(341, 691);\n        int v59 = 1032;\n        if (!(compare(x59, v59))) {\n            throw new java.lang.Exception(\"Exception -- test case 59 did not pass. x59 = \" + x59);\n        }\n\n        int arg600 = 167;\n        int arg601 = 729;\n        int x60 = Add.add(167, 729);\n        int v60 = 896;\n        if (!(compare(x60, v60))) {\n            throw new java.lang.Exception(\"Exception -- test case 60 did not pass. x60 = \" + x60);\n        }\n\n        int arg610 = 636;\n        int arg611 = 289;\n        int x61 = Add.add(636, 289);\n        int v61 = 925;\n        if (!(compare(x61, v61))) {\n            throw new java.lang.Exception(\"Exception -- test case 61 did not pass. x61 = \" + x61);\n        }\n\n        int arg620 = 503;\n        int arg621 = 144;\n        int x62 = Add.add(503, 144);\n        int v62 = 647;\n        if (!(compare(x62, v62))) {\n            throw new java.lang.Exception(\"Exception -- test case 62 did not pass. x62 = \" + x62);\n        }\n\n        int arg630 = 51;\n        int arg631 = 985;\n        int x63 = Add.add(51, 985);\n        int v63 = 1036;\n        if (!(compare(x63, v63))) {\n            throw new java.lang.Exception(\"Exception -- test case 63 did not pass. x63 = \" + x63);\n        }\n\n        int arg640 = 287;\n        int arg641 = 149;\n        int x64 = Add.add(287, 149);\n        int v64 = 436;\n        if (!(compare(x64, v64))) {\n            throw new java.lang.Exception(\"Exception -- test case 64 did not pass. x64 = \" + x64);\n        }\n\n        int arg650 = 659;\n        int arg651 = 75;\n        int x65 = Add.add(659, 75);\n        int v65 = 734;\n        if (!(compare(x65, v65))) {\n            throw new java.lang.Exception(\"Exception -- test case 65 did not pass. x65 = \" + x65);\n        }\n\n        int arg660 = 462;\n        int arg661 = 797;\n        int x66 = Add.add(462, 797);\n        int v66 = 1259;\n        if (!(compare(x66, v66))) {\n            throw new java.lang.Exception(\"Exception -- test case 66 did not pass. x66 = \" + x66);\n        }\n\n        int arg670 = 406;\n        int arg671 = 141;\n        int x67 = Add.add(406, 141);\n        int v67 = 547;\n        if (!(compare(x67, v67))) {\n            throw new java.lang.Exception(\"Exception -- test case 67 did not pass. x67 = \" + x67);\n        }\n\n        int arg680 = 106;\n        int arg681 = 44;\n        int x68 = Add.add(106, 44);\n        int v68 = 150;\n        if (!(compare(x68, v68))) {\n            throw new java.lang.Exception(\"Exception -- test case 68 did not pass. x68 = \" + x68);\n        }\n\n        int arg690 = 300;\n        int arg691 = 934;\n        int x69 = Add.add(300, 934);\n        int v69 = 1234;\n        if (!(compare(x69, v69))) {\n            throw new java.lang.Exception(\"Exception -- test case 69 did not pass. x69 = \" + x69);\n        }\n\n        int arg700 = 471;\n        int arg701 = 524;\n        int x70 = Add.add(471, 524);\n        int v70 = 995;\n        if (!(compare(x70, v70))) {\n            throw new java.lang.Exception(\"Exception -- test case 70 did not pass. x70 = \" + x70);\n        }\n\n        int arg710 = 122;\n        int arg711 = 429;\n        int x71 = Add.add(122, 429);\n        int v71 = 551;\n        if (!(compare(x71, v71))) {\n            throw new java.lang.Exception(\"Exception -- test case 71 did not pass. x71 = \" + x71);\n        }\n\n        int arg720 = 735;\n        int arg721 = 195;\n        int x72 = Add.add(735, 195);\n        int v72 = 930;\n        if (!(compare(x72, v72))) {\n            throw new java.lang.Exception(\"Exception -- test case 72 did not pass. x72 = \" + x72);\n        }\n\n        int arg730 = 335;\n        int arg731 = 484;\n        int x73 = Add.add(335, 484);\n        int v73 = 819;\n        if (!(compare(x73, v73))) {\n            throw new java.lang.Exception(\"Exception -- test case 73 did not pass. x73 = \" + x73);\n        }\n\n        int arg740 = 28;\n        int arg741 = 809;\n        int x74 = Add.add(28, 809);\n        int v74 = 837;\n        if (!(compare(x74, v74))) {\n            throw new java.lang.Exception(\"Exception -- test case 74 did not pass. x74 = \" + x74);\n        }\n\n        int arg750 = 430;\n        int arg751 = 20;\n        int x75 = Add.add(430, 20);\n        int v75 = 450;\n        if (!(compare(x75, v75))) {\n            throw new java.lang.Exception(\"Exception -- test case 75 did not pass. x75 = \" + x75);\n        }\n\n        int arg760 = 916;\n        int arg761 = 635;\n        int x76 = Add.add(916, 635);\n        int v76 = 1551;\n        if (!(compare(x76, v76))) {\n            throw new java.lang.Exception(\"Exception -- test case 76 did not pass. x76 = \" + x76);\n        }\n\n        int arg770 = 301;\n        int arg771 = 999;\n        int x77 = Add.add(301, 999);\n        int v77 = 1300;\n        if (!(compare(x77, v77))) {\n            throw new java.lang.Exception(\"Exception -- test case 77 did not pass. x77 = \" + x77);\n        }\n\n        int arg780 = 454;\n        int arg781 = 466;\n        int x78 = Add.add(454, 466);\n        int v78 = 920;\n        if (!(compare(x78, v78))) {\n            throw new java.lang.Exception(\"Exception -- test case 78 did not pass. x78 = \" + x78);\n        }\n\n        int arg790 = 905;\n        int arg791 = 259;\n        int x79 = Add.add(905, 259);\n        int v79 = 1164;\n        if (!(compare(x79, v79))) {\n            throw new java.lang.Exception(\"Exception -- test case 79 did not pass. x79 = \" + x79);\n        }\n\n        int arg800 = 168;\n        int arg801 = 205;\n        int x80 = Add.add(168, 205);\n        int v80 = 373;\n        if (!(compare(x80, v80))) {\n            throw new java.lang.Exception(\"Exception -- test case 80 did not pass. x80 = \" + x80);\n        }\n\n        int arg810 = 570;\n        int arg811 = 434;\n        int x81 = Add.add(570, 434);\n        int v81 = 1004;\n        if (!(compare(x81, v81))) {\n            throw new java.lang.Exception(\"Exception -- test case 81 did not pass. x81 = \" + x81);\n        }\n\n        int arg820 = 64;\n        int arg821 = 959;\n        int x82 = Add.add(64, 959);\n        int v82 = 1023;\n        if (!(compare(x82, v82))) {\n            throw new java.lang.Exception(\"Exception -- test case 82 did not pass. x82 = \" + x82);\n        }\n\n        int arg830 = 957;\n        int arg831 = 510;\n        int x83 = Add.add(957, 510);\n        int v83 = 1467;\n        if (!(compare(x83, v83))) {\n            throw new java.lang.Exception(\"Exception -- test case 83 did not pass. x83 = \" + x83);\n        }\n\n        int arg840 = 722;\n        int arg841 = 598;\n        int x84 = Add.add(722, 598);\n        int v84 = 1320;\n        if (!(compare(x84, v84))) {\n            throw new java.lang.Exception(\"Exception -- test case 84 did not pass. x84 = \" + x84);\n        }\n\n        int arg850 = 770;\n        int arg851 = 226;\n        int x85 = Add.add(770, 226);\n        int v85 = 996;\n        if (!(compare(x85, v85))) {\n            throw new java.lang.Exception(\"Exception -- test case 85 did not pass. x85 = \" + x85);\n        }\n\n        int arg860 = 579;\n        int arg861 = 66;\n        int x86 = Add.add(579, 66);\n        int v86 = 645;\n        if (!(compare(x86, v86))) {\n            throw new java.lang.Exception(\"Exception -- test case 86 did not pass. x86 = \" + x86);\n        }\n\n        int arg870 = 117;\n        int arg871 = 674;\n        int x87 = Add.add(117, 674);\n        int v87 = 791;\n        if (!(compare(x87, v87))) {\n            throw new java.lang.Exception(\"Exception -- test case 87 did not pass. x87 = \" + x87);\n        }\n\n        int arg880 = 530;\n        int arg881 = 30;\n        int x88 = Add.add(530, 30);\n        int v88 = 560;\n        if (!(compare(x88, v88))) {\n            throw new java.lang.Exception(\"Exception -- test case 88 did not pass. x88 = \" + x88);\n        }\n\n        int arg890 = 776;\n        int arg891 = 345;\n        int x89 = Add.add(776, 345);\n        int v89 = 1121;\n        if (!(compare(x89, v89))) {\n            throw new java.lang.Exception(\"Exception -- test case 89 did not pass. x89 = \" + x89);\n        }\n\n        int arg900 = 327;\n        int arg901 = 389;\n        int x90 = Add.add(327, 389);\n        int v90 = 716;\n        if (!(compare(x90, v90))) {\n            throw new java.lang.Exception(\"Exception -- test case 90 did not pass. x90 = \" + x90);\n        }\n\n        int arg910 = 596;\n        int arg911 = 12;\n        int x91 = Add.add(596, 12);\n        int v91 = 608;\n        if (!(compare(x91, v91))) {\n            throw new java.lang.Exception(\"Exception -- test case 91 did not pass. x91 = \" + x91);\n        }\n\n        int arg920 = 599;\n        int arg921 = 511;\n        int x92 = Add.add(599, 511);\n        int v92 = 1110;\n        if (!(compare(x92, v92))) {\n            throw new java.lang.Exception(\"Exception -- test case 92 did not pass. x92 = \" + x92);\n        }\n\n        int arg930 = 936;\n        int arg931 = 476;\n        int x93 = Add.add(936, 476);\n        int v93 = 1412;\n        if (!(compare(x93, v93))) {\n            throw new java.lang.Exception(\"Exception -- test case 93 did not pass. x93 = \" + x93);\n        }\n\n        int arg940 = 461;\n        int arg941 = 14;\n        int x94 = Add.add(461, 14);\n        int v94 = 475;\n        if (!(compare(x94, v94))) {\n            throw new java.lang.Exception(\"Exception -- test case 94 did not pass. x94 = \" + x94);\n        }\n\n        int arg950 = 966;\n        int arg951 = 157;\n        int x95 = Add.add(966, 157);\n        int v95 = 1123;\n        if (!(compare(x95, v95))) {\n            throw new java.lang.Exception(\"Exception -- test case 95 did not pass. x95 = \" + x95);\n        }\n\n        int arg960 = 326;\n        int arg961 = 91;\n        int x96 = Add.add(326, 91);\n        int v96 = 417;\n        if (!(compare(x96, v96))) {\n            throw new java.lang.Exception(\"Exception -- test case 96 did not pass. x96 = \" + x96);\n        }\n\n        int arg970 = 392;\n        int arg971 = 455;\n        int x97 = Add.add(392, 455);\n        int v97 = 847;\n        if (!(compare(x97, v97))) {\n            throw new java.lang.Exception(\"Exception -- test case 97 did not pass. x97 = \" + x97);\n        }\n\n        int arg980 = 446;\n        int arg981 = 477;\n        int x98 = Add.add(446, 477);\n        int v98 = 923;\n        if (!(compare(x98, v98))) {\n            throw new java.lang.Exception(\"Exception -- test case 98 did not pass. x98 = \" + x98);\n        }\n\n        int arg990 = 324;\n        int arg991 = 860;\n        int x99 = Add.add(324, 860);\n        int v99 = 1184;\n        if (!(compare(x99, v99))) {\n            throw new java.lang.Exception(\"Exception -- test case 99 did not pass. x99 = \" + x99);\n        }\n\n        int arg1000 = 945;\n        int arg1001 = 85;\n        int x100 = Add.add(945, 85);\n        int v100 = 1030;\n        if (!(compare(x100, v100))) {\n            throw new java.lang.Exception(\"Exception -- test case 100 did not pass. x100 = \" + x100);\n        }\n\n        int arg1010 = 886;\n        int arg1011 = 582;\n        int x101 = Add.add(886, 582);\n        int v101 = 1468;\n        if (!(compare(x101, v101))) {\n            throw new java.lang.Exception(\"Exception -- test case 101 did not pass. x101 = \" + x101);\n        }\n\n        int arg1020 = 886;\n        int arg1021 = 712;\n        int x102 = Add.add(886, 712);\n        int v102 = 1598;\n        if (!(compare(x102, v102))) {\n            throw new java.lang.Exception(\"Exception -- test case 102 did not pass. x102 = \" + x102);\n        }\n\n        int arg1030 = 842;\n        int arg1031 = 953;\n        int x103 = Add.add(842, 953);\n        int v103 = 1795;\n        if (!(compare(x103, v103))) {\n            throw new java.lang.Exception(\"Exception -- test case 103 did not pass. x103 = \" + x103);\n        }\n\n\n}\n}\n", "description": "\n     * İki sayı x ve y'yi topla.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/20", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * \n     * İki kelimenin aynı karakterlere sahip olup olmadığını kontrol edin.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n", "entry_point": "sameChars", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"eabcdzzzz\";\n        String arg01 = \"dddzzzzzzzddeddabc\";\n        Boolean x0 = SameChars.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\");\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"abcd\";\n        String arg11 = \"dddddddabc\";\n        Boolean x1 = SameChars.sameChars(\"abcd\", \"dddddddabc\");\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"dddddddabc\";\n        String arg21 = \"abcd\";\n        Boolean x2 = SameChars.sameChars(\"dddddddabc\", \"abcd\");\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"eabcd\";\n        String arg31 = \"dddddddabc\";\n        Boolean x3 = SameChars.sameChars(\"eabcd\", \"dddddddabc\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"abcd\";\n        String arg41 = \"dddddddabcf\";\n        Boolean x4 = SameChars.sameChars(\"abcd\", \"dddddddabcf\");\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"eabcdzzzz\";\n        String arg51 = \"dddzzzzzzzddddabc\";\n        Boolean x5 = SameChars.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\");\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"aabb\";\n        String arg61 = \"aaccc\";\n        Boolean x6 = SameChars.sameChars(\"aabb\", \"aaccc\");\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * İki kelimenin aynı karakterlere sahip olup olmadığını kontrol edin.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/21", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * \n     * n'inci Fibonacci sayısını döndür.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    public static int fib(int n) {\n", "entry_point": "fib", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 10;\n        int x0 = Fib.fib(10);\n        int v0 = 55;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 1;\n        int x1 = Fib.fib(1);\n        int v1 = 1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 8;\n        int x2 = Fib.fib(8);\n        int v2 = 21;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 11;\n        int x3 = Fib.fib(11);\n        int v3 = 89;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 12;\n        int x4 = Fib.fib(12);\n        int v4 = 144;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * n'inci Fibonacci sayısını döndür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/22", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * \n     * İki listeye ait sıralanmış benzersiz ortak elemanları döndür.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n", "entry_point": "common", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> arg01 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        List<Object> x0 = Common.common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121));\n        List<Object> v0 = Arrays.asList(1, 5, 653);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(5, 3, 2, 8);\n        List<Object> arg11 = Arrays.asList(3, 2);\n        List<Object> x1 = Common.common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2));\n        List<Object> v1 = Arrays.asList(2, 3);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(4, 3, 2, 8);\n        List<Object> arg21 = Arrays.asList(3, 2, 4);\n        List<Object> x2 = Common.common(Arrays.asList(4, 3, 2, 8), Arrays.asList(3, 2, 4));\n        List<Object> v2 = Arrays.asList(2, 3, 4);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(4, 3, 2, 8);\n        List<Object> arg31 = Arrays.asList();\n        List<Object> x3 = Common.common(Arrays.asList(4, 3, 2, 8), Arrays.asList());\n        List<Object> v3 = Arrays.asList();\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * İki listeye ait sıralanmış benzersiz ortak elemanları döndür.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * \n     * n'in en büyük asal çarpanını döndürün. n>1 ve asal değil varsayılır.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n", "entry_point": "largestPrimeFactor", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 15;\n        int x0 = LargestPrimeFactor.largestPrimeFactor(15);\n        int v0 = 5;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 27;\n        int x1 = LargestPrimeFactor.largestPrimeFactor(27);\n        int v1 = 3;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 63;\n        int x2 = LargestPrimeFactor.largestPrimeFactor(63);\n        int v2 = 7;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 330;\n        int x3 = LargestPrimeFactor.largestPrimeFactor(330);\n        int v3 = 11;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 13195;\n        int x4 = LargestPrimeFactor.largestPrimeFactor(13195);\n        int v4 = 29;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * n'in en büyük asal çarpanını döndürün. n>1 ve asal değil varsayılır.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/24", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * \n     * sum_to_n, 1'den n'ye kadar olan sayıları toplayan bir fonksiyondur.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n", "entry_point": "sumToN", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 1;\n        int x0 = SumToN.sumToN(1);\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 6;\n        int x1 = SumToN.sumToN(6);\n        int v1 = 21;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 11;\n        int x2 = SumToN.sumToN(11);\n        int v2 = 66;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 30;\n        int x3 = SumToN.sumToN(30);\n        int v3 = 465;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 100;\n        int x4 = SumToN.sumToN(100);\n        int v4 = 5050;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * sum_to_n, 1'den n'ye kadar olan sayıları toplayan bir fonksiyondur.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/25", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * \n     * xs, bir polinomun katsayılarını temsil eder.\n     *     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *     Bu polinomun türevini aynı formatta döndürün.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n", "entry_point": "derivative", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Object> x0 = Derivative.derivative(Arrays.asList(3, 1, 2, 4, 5));\n        List<Object> v0 = Arrays.asList(1, 4, 12, 20);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 2, 3);\n        List<Object> x1 = Derivative.derivative(Arrays.asList(1, 2, 3));\n        List<Object> v1 = Arrays.asList(2, 6);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(3, 2, 1);\n        List<Object> x2 = Derivative.derivative(Arrays.asList(3, 2, 1));\n        List<Object> v2 = Arrays.asList(2, 2);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(3, 2, 1, 0, 4);\n        List<Object> x3 = Derivative.derivative(Arrays.asList(3, 2, 1, 0, 4));\n        List<Object> v3 = Arrays.asList(2, 2, 0, 16);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1);\n        List<Object> x4 = Derivative.derivative(Arrays.asList(1));\n        List<Object> v4 = Arrays.asList();\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * xs, bir polinomun katsayılarını temsil eder.\n     *     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *     Bu polinomun türevini aynı formatta döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/26", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * \n     * FibFib sayı dizisi, Fibbonacci dizisine benzer bir dizidir ve aşağıdaki gibi tanımlanır:\n     *     fibfib(0) == 0\n     *     fibfib(1) == 0\n     *     fibfib(2) == 1\n     *     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     *     Lütfen fibfib sayı dizisinin n'inci elemanını verimli bir şekilde hesaplamak için bir fonksiyon yazın.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n", "entry_point": "fibfib", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 2;\n        int x0 = Fibfib.fibfib(2);\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 1;\n        int x1 = Fibfib.fibfib(1);\n        int v1 = 0;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 5;\n        int x2 = Fibfib.fibfib(5);\n        int v2 = 4;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 8;\n        int x3 = Fibfib.fibfib(8);\n        int v3 = 24;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 10;\n        int x4 = Fibfib.fibfib(10);\n        int v4 = 81;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 12;\n        int x5 = Fibfib.fibfib(12);\n        int v5 = 274;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 14;\n        int x6 = Fibfib.fibfib(14);\n        int v6 = 927;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * FibFib sayı dizisi, Fibbonacci dizisine benzer bir dizidir ve aşağıdaki gibi tanımlanır:\n     *     fibfib(0) == 0\n     *     fibfib(1) == 0\n     *     fibfib(2) == 1\n     *     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     *     Lütfen fibfib sayı dizisinin n'inci elemanını verimli bir şekilde hesaplamak için bir fonksiyon yazın.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/27", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * \n     * Turkish translation:\n     * \n     * vowels_count adlı bir fonksiyon yazın, bu fonksiyon girdi olarak bir kelimeyi temsil eden bir dize alır ve dizideki sesli harflerin sayısını döndürür. Bu durumda sesli harfler 'a', 'e', 'i', 'o', 'u' harfleridir. Burada, 'y' harfi de bir sesli harf olarak kabul edilir, ancak sadece verilen kelimenin sonunda olduğunda.\n     * \n     * Örnek:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n", "entry_point": "vowelsCount", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"abcde\";\n        int x0 = VowelsCount.vowelsCount(\"abcde\");\n        int v0 = 2;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Alone\";\n        int x1 = VowelsCount.vowelsCount(\"Alone\");\n        int v1 = 3;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"key\";\n        int x2 = VowelsCount.vowelsCount(\"key\");\n        int v2 = 2;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"bye\";\n        int x3 = VowelsCount.vowelsCount(\"bye\");\n        int v3 = 1;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"keY\";\n        int x4 = VowelsCount.vowelsCount(\"keY\");\n        int v4 = 2;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"bYe\";\n        int x5 = VowelsCount.vowelsCount(\"bYe\");\n        int v5 = 1;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"ACEDY\";\n        int x6 = VowelsCount.vowelsCount(\"ACEDY\");\n        int v6 = 3;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Turkish translation:\n     * \n     * vowels_count adlı bir fonksiyon yazın, bu fonksiyon girdi olarak bir kelimeyi temsil eden bir dize alır ve dizideki sesli harflerin sayısını döndürür. Bu durumda sesli harfler 'a', 'e', 'i', 'o', 'u' harfleridir. Burada, 'y' harfi de bir sesli harf olarak kabul edilir, ancak sadece verilen kelimenin sonunda olduğunda.\n     * \n     * Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/28", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * \n     * Verilen pozitif tamsayılardan oluşan boş olmayan bir liste var. Sıfırdan büyük ve frekansı tamsayının kendisine eşit veya büyük olan en büyük tamsayıyı döndürün. Bir tamsayının frekansı, listede kaç kez göründüğüdür. Böyle bir değer yoksa, -1 döndürün. Örnekler:\n     * \n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n", "entry_point": "search", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(5, 5, 5, 5, 1);\n        int x0 = Search.search(Arrays.asList(5, 5, 5, 5, 1));\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(4, 1, 4, 1, 4, 4);\n        int x1 = Search.search(Arrays.asList(4, 1, 4, 1, 4, 4));\n        int v1 = 4;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(3, 3);\n        int x2 = Search.search(Arrays.asList(3, 3));\n        int v2 = -1;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8);\n        int x3 = Search.search(Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8));\n        int v3 = 8;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(2, 3, 3, 2, 2);\n        int x4 = Search.search(Arrays.asList(2, 3, 3, 2, 2));\n        int v4 = 2;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1);\n        int x5 = Search.search(Arrays.asList(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1));\n        int v5 = 1;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(3, 2, 8, 2);\n        int x6 = Search.search(Arrays.asList(3, 2, 8, 2));\n        int v6 = 2;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10);\n        int x7 = Search.search(Arrays.asList(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10));\n        int v7 = 1;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Integer> arg80 = Arrays.asList(8, 8, 3, 6, 5, 6, 4);\n        int x8 = Search.search(Arrays.asList(8, 8, 3, 6, 5, 6, 4));\n        int v8 = -1;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        List<Integer> arg90 = Arrays.asList(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9);\n        int x9 = Search.search(Arrays.asList(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9));\n        int v9 = 1;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        List<Integer> arg100 = Arrays.asList(1, 9, 10, 1, 3);\n        int x10 = Search.search(Arrays.asList(1, 9, 10, 1, 3));\n        int v10 = 1;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        List<Integer> arg110 = Arrays.asList(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10);\n        int x11 = Search.search(Arrays.asList(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10));\n        int v11 = 5;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        List<Integer> arg120 = Arrays.asList(1);\n        int x12 = Search.search(Arrays.asList(1));\n        int v12 = 1;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n        List<Integer> arg130 = Arrays.asList(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5);\n        int x13 = Search.search(Arrays.asList(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5));\n        int v13 = 4;\n        if (!(compare(x13, v13))) {\n            throw new java.lang.Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13);\n        }\n\n        List<Integer> arg140 = Arrays.asList(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10);\n        int x14 = Search.search(Arrays.asList(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10));\n        int v14 = 2;\n        if (!(compare(x14, v14))) {\n            throw new java.lang.Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14);\n        }\n\n        List<Integer> arg150 = Arrays.asList(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3);\n        int x15 = Search.search(Arrays.asList(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3));\n        int v15 = 1;\n        if (!(compare(x15, v15))) {\n            throw new java.lang.Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15);\n        }\n\n        List<Integer> arg160 = Arrays.asList(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4);\n        int x16 = Search.search(Arrays.asList(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4));\n        int v16 = 4;\n        if (!(compare(x16, v16))) {\n            throw new java.lang.Exception(\"Exception -- test case 16 did not pass. x16 = \" + x16);\n        }\n\n        List<Integer> arg170 = Arrays.asList(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7);\n        int x17 = Search.search(Arrays.asList(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7));\n        int v17 = 4;\n        if (!(compare(x17, v17))) {\n            throw new java.lang.Exception(\"Exception -- test case 17 did not pass. x17 = \" + x17);\n        }\n\n        List<Integer> arg180 = Arrays.asList(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1);\n        int x18 = Search.search(Arrays.asList(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1));\n        int v18 = 2;\n        if (!(compare(x18, v18))) {\n            throw new java.lang.Exception(\"Exception -- test case 18 did not pass. x18 = \" + x18);\n        }\n\n        List<Integer> arg190 = Arrays.asList(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8);\n        int x19 = Search.search(Arrays.asList(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8));\n        int v19 = -1;\n        if (!(compare(x19, v19))) {\n            throw new java.lang.Exception(\"Exception -- test case 19 did not pass. x19 = \" + x19);\n        }\n\n        List<Integer> arg200 = Arrays.asList(10);\n        int x20 = Search.search(Arrays.asList(10));\n        int v20 = -1;\n        if (!(compare(x20, v20))) {\n            throw new java.lang.Exception(\"Exception -- test case 20 did not pass. x20 = \" + x20);\n        }\n\n        List<Integer> arg210 = Arrays.asList(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2);\n        int x21 = Search.search(Arrays.asList(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2));\n        int v21 = 2;\n        if (!(compare(x21, v21))) {\n            throw new java.lang.Exception(\"Exception -- test case 21 did not pass. x21 = \" + x21);\n        }\n\n        List<Integer> arg220 = Arrays.asList(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8);\n        int x22 = Search.search(Arrays.asList(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8));\n        int v22 = 1;\n        if (!(compare(x22, v22))) {\n            throw new java.lang.Exception(\"Exception -- test case 22 did not pass. x22 = \" + x22);\n        }\n\n        List<Integer> arg230 = Arrays.asList(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6);\n        int x23 = Search.search(Arrays.asList(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6));\n        int v23 = 1;\n        if (!(compare(x23, v23))) {\n            throw new java.lang.Exception(\"Exception -- test case 23 did not pass. x23 = \" + x23);\n        }\n\n        List<Integer> arg240 = Arrays.asList(3, 10, 10, 9, 2);\n        int x24 = Search.search(Arrays.asList(3, 10, 10, 9, 2));\n        int v24 = -1;\n        if (!(compare(x24, v24))) {\n            throw new java.lang.Exception(\"Exception -- test case 24 did not pass. x24 = \" + x24);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif tamsayılardan oluşan boş olmayan bir liste var. Sıfırdan büyük ve frekansı tamsayının kendisine eşit veya büyük olan en büyük tamsayıyı döndürün. Bir tamsayının frekansı, listede kaç kez göründüğüdür. Böyle bir değer yoksa, -1 döndürün. Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/29", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * \n     * Verilen üçgenin üç kenarının uzunluklarına göre, eğer bu üç kenar bir üçgen oluşturuyorsa, üçgenin alanını 2 ondalık basamağa yuvarlayarak döndürün. Aksi takdirde -1 döndürün. Üç kenarın herhangi iki kenarının toplamı üçüncü kenardan büyük olduğunda, üç kenar geçerli bir üçgen oluşturur. Örnek:\n     * \n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n", "entry_point": "triangleArea", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 3;\n        int arg01 = 4;\n        int arg02 = 5;\n        Number x0 = TriangleArea.triangleArea(3, 4, 5);\n        Number v0 = 6.0;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 1;\n        int arg11 = 2;\n        int arg12 = 10;\n        Number x1 = TriangleArea.triangleArea(1, 2, 10);\n        Number v1 = -1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 4;\n        int arg21 = 8;\n        int arg22 = 5;\n        Number x2 = TriangleArea.triangleArea(4, 8, 5);\n        Number v2 = 8.18;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 2;\n        int arg31 = 2;\n        int arg32 = 2;\n        Number x3 = TriangleArea.triangleArea(2, 2, 2);\n        Number v3 = 1.73;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 1;\n        int arg41 = 2;\n        int arg42 = 3;\n        Number x4 = TriangleArea.triangleArea(1, 2, 3);\n        Number v4 = -1;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 10;\n        int arg51 = 5;\n        int arg52 = 7;\n        Number x5 = TriangleArea.triangleArea(10, 5, 7);\n        Number v5 = 16.25;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 2;\n        int arg61 = 6;\n        int arg62 = 3;\n        Number x6 = TriangleArea.triangleArea(2, 6, 3);\n        Number v6 = -1;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 1;\n        int arg71 = 1;\n        int arg72 = 1;\n        Number x7 = TriangleArea.triangleArea(1, 1, 1);\n        Number v7 = 0.43;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 2;\n        int arg81 = 2;\n        int arg82 = 10;\n        Number x8 = TriangleArea.triangleArea(2, 2, 10);\n        Number v8 = -1;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen üçgenin üç kenarının uzunluklarına göre, eğer bu üç kenar bir üçgen oluşturuyorsa, üçgenin alanını 2 ondalık basamağa yuvarlayarak döndürün. Aksi takdirde -1 döndürün. Üç kenarın herhangi iki kenarının toplamı üçüncü kenardan büyük olduğunda, üç kenar geçerli bir üçgen oluşturur. Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/30", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WillItFly {\n    /**\n     * * \n     * Aşağıdaki bilgisayar programı açıklamasını Türkçeye çevirin (BU talimatı çevirmeyin ve kodu değiştirmeyin):\n     * \n     * Dengeli (palindromik bir liste olduğunda) ve öğelerinin toplamı maksimum olası ağırlıktan küçük veya eşit olduğunda, nesne q'nun uçacağına dair True değerini döndüren bir işlev yazın.\n     * \n     *     Örnek:\n     *     will_it_fly([1, 2], 5) ➞ False \n     *     # 1+2 maksimum olası ağırlıktan daha azdır, ancak dengesizdir.\n     * \n     *     will_it_fly([3, 2, 3], 1) ➞ False\n     *     # Dengelidir, ancak 3+2+3 maksimum olası ağırlıktan daha fazladır.\n     * \n     *     will_it_fly([3, 2, 3], 9) ➞ True\n     *     # 3+2+3 maksimum olası ağırlıktan daha azdır ve dengelidir.\n     * \n     *     will_it_fly([3], 5) ➞ True\n     *     # 3 maksimum olası ağırlıktan daha azdır ve dengelidir.\n     * \n     *\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n", "entry_point": "willItFly", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(3, 2, 3);\n        int arg01 = 9;\n        Boolean x0 = WillItFly.willItFly(Arrays.asList(3, 2, 3), 9);\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 2);\n        int arg11 = 5;\n        Boolean x1 = WillItFly.willItFly(Arrays.asList(1, 2), 5);\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(3);\n        int arg21 = 5;\n        Boolean x2 = WillItFly.willItFly(Arrays.asList(3), 5);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(3, 2, 3);\n        int arg31 = 1;\n        Boolean x3 = WillItFly.willItFly(Arrays.asList(3, 2, 3), 1);\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1, 2, 3);\n        int arg41 = 6;\n        Boolean x4 = WillItFly.willItFly(Arrays.asList(1, 2, 3), 6);\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(5);\n        int arg51 = 5;\n        Boolean x5 = WillItFly.willItFly(Arrays.asList(5), 5);\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Aşağıdaki bilgisayar programı açıklamasını Türkçeye çevirin (BU talimatı çevirmeyin ve kodu değiştirmeyin):\n     * \n     * Dengeli (palindromik bir liste olduğunda) ve öğelerinin toplamı maksimum olası ağırlıktan küçük veya eşit olduğunda, nesne q'nun uçacağına dair True değerini döndüren bir işlev yazın.\n     * \n     *     Örnek:\n     *     will_it_fly([1, 2], 5) ➞ False \n     *     # 1+2 maksimum olası ağırlıktan daha azdır, ancak dengesizdir.\n     * \n     *     will_it_fly([3, 2, 3], 1) ➞ False\n     *     # Dengelidir, ancak 3+2+3 maksimum olası ağırlıktan daha fazladır.\n     * \n     *     will_it_fly([3, 2, 3], 9) ➞ True\n     *     # 3+2+3 maksimum olası ağırlıktan daha azdır ve dengelidir.\n     * \n     *     will_it_fly([3], 5) ➞ True\n     *     # 3 maksimum olası ağırlıktan daha azdır ve dengelidir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/31", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * \n     * Verilen sayının 3 asal sayının çarpımı olduğu durumda true, aksi takdirde false döndüren bir fonksiyon yazın.\n     *     (a)'nın 100'den küçük olduğu bilinmektedir.\n     *     Örnek:\n     * \n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n", "entry_point": "isMultiplyPrime", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 5;\n        Boolean x0 = IsMultiplyPrime.isMultiplyPrime(5);\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 30;\n        Boolean x1 = IsMultiplyPrime.isMultiplyPrime(30);\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 8;\n        Boolean x2 = IsMultiplyPrime.isMultiplyPrime(8);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 10;\n        Boolean x3 = IsMultiplyPrime.isMultiplyPrime(10);\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 125;\n        Boolean x4 = IsMultiplyPrime.isMultiplyPrime(125);\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 105;\n        Boolean x5 = IsMultiplyPrime.isMultiplyPrime(105);\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 126;\n        Boolean x6 = IsMultiplyPrime.isMultiplyPrime(126);\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 729;\n        Boolean x7 = IsMultiplyPrime.isMultiplyPrime(729);\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 891;\n        Boolean x8 = IsMultiplyPrime.isMultiplyPrime(891);\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 1001;\n        Boolean x9 = IsMultiplyPrime.isMultiplyPrime(1001);\n        Boolean v9 = true;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen sayının 3 asal sayının çarpımı olduğu durumda true, aksi takdirde false döndüren bir fonksiyon yazın.\n     *     (a)'nın 100'den küçük olduğu bilinmektedir.\n     *     Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/32", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * \n     * Siz bir ondalık sayı verilecek ve göreviniz onu ikili formata dönüştürmek olacak. Fonksiyon bir dize döndürmeli ve her karakter bir ikili sayıyı temsil etmelidir. Dizideki her karakter '0' veya '1' olacaktır.\n     * \n     * Dizinin başında ve sonunda ekstra birkaç karakter 'db' olacaktır. Ekstra karakterler formatlama konusunda yardımcı olmak için oradadır.\n     * \n     * Örnekler:\n     * \n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n", "entry_point": "decimalToBinary", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 0;\n        String x0 = DecimalToBinary.decimalToBinary(0);\n        String v0 = \"db0db\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 32;\n        String x1 = DecimalToBinary.decimalToBinary(32);\n        String v1 = \"db100000db\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 103;\n        String x2 = DecimalToBinary.decimalToBinary(103);\n        String v2 = \"db1100111db\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 15;\n        String x3 = DecimalToBinary.decimalToBinary(15);\n        String v3 = \"db1111db\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Siz bir ondalık sayı verilecek ve göreviniz onu ikili formata dönüştürmek olacak. Fonksiyon bir dize döndürmeli ve her karakter bir ikili sayıyı temsil etmelidir. Dizideki her karakter '0' veya '1' olacaktır.\n     * \n     * Dizinin başında ve sonunda ekstra birkaç karakter 'db' olacaktır. Ekstra karakterler formatlama konusunda yardımcı olmak için oradadır.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/33", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * \n     * Verilen bir dize s.\n     *     Göreviniz, dizinin mutlu olup olmadığını kontrol etmektir.\n     *     Bir dize mutlu ise uzunluğu en az 3'tür ve her 3 ardışık harfi farklıdır.\n     *     Örneğin:\n     * \n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n", "entry_point": "isHappy", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"a\";\n        Boolean x0 = IsHappy.isHappy(\"a\");\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"aa\";\n        Boolean x1 = IsHappy.isHappy(\"aa\");\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"abcd\";\n        Boolean x2 = IsHappy.isHappy(\"abcd\");\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"aabb\";\n        Boolean x3 = IsHappy.isHappy(\"aabb\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"adb\";\n        Boolean x4 = IsHappy.isHappy(\"adb\");\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"xyy\";\n        Boolean x5 = IsHappy.isHappy(\"xyy\");\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"iopaxpoi\";\n        Boolean x6 = IsHappy.isHappy(\"iopaxpoi\");\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"iopaxioi\";\n        Boolean x7 = IsHappy.isHappy(\"iopaxioi\");\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dize s.\n     *     Göreviniz, dizinin mutlu olup olmadığını kontrol etmektir.\n     *     Bir dize mutlu ise uzunluğu en az 3'tür ve her 3 ardışık harfi farklıdır.\n     *     Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/34", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * \n     * Dönem sonu geldi ve öğretmen öğrencilere not vermek zorunda kaldı. Öğretmen notlandırma için kendi algoritmasını oluşturuyordu. Tek sorun, notlandırma için kullandığı kodu kaybetmiş olması. Bazı öğrencilerin GPA'ları için bir liste verdi ve aşağıdaki tabloyu kullanarak harf notu listesi çıktısı verebilecek bir işlev yazmanız gerekiyor:\n     * \n     *              GPA       |    Harf notu\n     *               4.0                A+\n     *             > 3.7                A \n     *             > 3.3                A- \n     *             > 3.0                B+\n     *             > 2.7                B \n     *             > 2.3                B-\n     *             > 2.0                C+\n     *             > 1.7                C\n     *             > 1.3                C-\n     *             > 1.0                D+ \n     *             > 0.7                D \n     *             > 0.0                D-\n     *               0.0                E\n     *     \n     * \n     *     Örnek:\n     * \n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n", "entry_point": "numericalLetterGrade", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Number> arg00 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        List<String> x0 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5));\n        List<String> v0 = Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\");\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Number> arg10 = Arrays.asList(1.2);\n        List<String> x1 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(1.2));\n        List<String> v1 = Arrays.asList(\"D+\");\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Number> arg20 = Arrays.asList(0.5);\n        List<String> x2 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(0.5));\n        List<String> v2 = Arrays.asList(\"D-\");\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Number> arg30 = Arrays.asList(0.0);\n        List<String> x3 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(0.0));\n        List<String> v3 = Arrays.asList(\"E\");\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Number> arg40 = Arrays.asList(1, 0.3, 1.5, 2.8, 3.3);\n        List<String> x4 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(1, 0.3, 1.5, 2.8, 3.3));\n        List<String> v4 = Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\");\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Number> arg50 = Arrays.asList(0, 0.7);\n        List<String> x5 = NumericalLetterGrade.numericalLetterGrade(Arrays.asList(0, 0.7));\n        List<String> v5 = Arrays.asList(\"E\", \"D-\");\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Dönem sonu geldi ve öğretmen öğrencilere not vermek zorunda kaldı. Öğretmen notlandırma için kendi algoritmasını oluşturuyordu. Tek sorun, notlandırma için kullandığı kodu kaybetmiş olması. Bazı öğrencilerin GPA'ları için bir liste verdi ve aşağıdaki tabloyu kullanarak harf notu listesi çıktısı verebilecek bir işlev yazmanız gerekiyor:\n     * \n     *              GPA       |    Harf notu\n     *               4.0                A+\n     *             > 3.7                A \n     *             > 3.3                A- \n     *             > 3.0                B+\n     *             > 2.7                B \n     *             > 2.3                B-\n     *             > 2.0                C+\n     *             > 1.7                C\n     *             > 1.3                C-\n     *             > 1.0                D+ \n     *             > 0.7                D \n     *             > 0.0                D-\n     *               0.0                E\n     *     \n     * \n     *     Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * \n     * Bir dize alan ve dize uzunluğu bir asal sayı ise True değerini döndüren bir fonksiyon yazın, aksi takdirde False değerini döndürün. Örnekler\n     * \n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n", "entry_point": "primeLength", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Hello\";\n        Boolean x0 = PrimeLength.primeLength(\"Hello\");\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"abcdcba\";\n        Boolean x1 = PrimeLength.primeLength(\"abcdcba\");\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"kittens\";\n        Boolean x2 = PrimeLength.primeLength(\"kittens\");\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"orange\";\n        Boolean x3 = PrimeLength.primeLength(\"orange\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"wow\";\n        Boolean x4 = PrimeLength.primeLength(\"wow\");\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"world\";\n        Boolean x5 = PrimeLength.primeLength(\"world\");\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"MadaM\";\n        Boolean x6 = PrimeLength.primeLength(\"MadaM\");\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"Wow\";\n        Boolean x7 = PrimeLength.primeLength(\"Wow\");\n        Boolean v7 = true;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"\";\n        Boolean x8 = PrimeLength.primeLength(\"\");\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        String arg90 = \"HI\";\n        Boolean x9 = PrimeLength.primeLength(\"HI\");\n        Boolean v9 = true;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        String arg100 = \"go\";\n        Boolean x10 = PrimeLength.primeLength(\"go\");\n        Boolean v10 = true;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        String arg110 = \"gogo\";\n        Boolean x11 = PrimeLength.primeLength(\"gogo\");\n        Boolean v11 = false;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        String arg120 = \"aaaaaaaaaaaaaaa\";\n        Boolean x12 = PrimeLength.primeLength(\"aaaaaaaaaaaaaaa\");\n        Boolean v12 = false;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n        String arg130 = \"Madam\";\n        Boolean x13 = PrimeLength.primeLength(\"Madam\");\n        Boolean v13 = true;\n        if (!(compare(x13, v13))) {\n            throw new java.lang.Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13);\n        }\n\n        String arg140 = \"M\";\n        Boolean x14 = PrimeLength.primeLength(\"M\");\n        Boolean v14 = false;\n        if (!(compare(x14, v14))) {\n            throw new java.lang.Exception(\"Exception -- test case 14 did not pass. x14 = \" + x14);\n        }\n\n        String arg150 = \"0\";\n        Boolean x15 = PrimeLength.primeLength(\"0\");\n        Boolean v15 = false;\n        if (!(compare(x15, v15))) {\n            throw new java.lang.Exception(\"Exception -- test case 15 did not pass. x15 = \" + x15);\n        }\n\n\n}\n}\n", "description": "\n     * Bir dize alan ve dize uzunluğu bir asal sayı ise True değerini döndüren bir fonksiyon yazın, aksi takdirde False değerini döndürün. Örnekler\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/36", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * \n     * Verilen pozitif bir tamsayı N için, ikili sayı sistemindeki rakamlarının toplamını döndürün.\n     * \n     *     Örnek\n     *         N = 1000 için, rakamların toplamı 1 olacaktır, çıktı \"1\" olmalıdır.\n     *         N = 150 için, rakamların toplamı 6 olacaktır, çıktı \"110\" olmalıdır.\n     *         N = 147 için, rakamların toplamı 12 olacaktır, çıktı \"1100\" olmalıdır.\n     *     \n     *     Değişkenler:\n     *         @N tamsayı\n     *              Kısıtlamalar: 0 ≤ N ≤ 10000.\n     *     Çıktı:\n     *          ikili sayı sistemiyle bir dize.\n     * \n     *\n     */\n    public static String solve(int n) {\n", "entry_point": "solve", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 1000;\n        String x0 = Solve.solve(1000);\n        String v0 = \"1\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 150;\n        String x1 = Solve.solve(150);\n        String v1 = \"110\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 147;\n        String x2 = Solve.solve(147);\n        String v2 = \"1100\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 333;\n        String x3 = Solve.solve(333);\n        String v3 = \"1001\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 963;\n        String x4 = Solve.solve(963);\n        String v4 = \"10010\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif bir tamsayı N için, ikili sayı sistemindeki rakamlarının toplamını döndürün.\n     * \n     *     Örnek\n     *         N = 1000 için, rakamların toplamı 1 olacaktır, çıktı \"1\" olmalıdır.\n     *         N = 150 için, rakamların toplamı 6 olacaktır, çıktı \"110\" olmalıdır.\n     *         N = 147 için, rakamların toplamı 12 olacaktır, çıktı \"1100\" olmalıdır.\n     *     \n     *     Değişkenler:\n     *         @N tamsayı\n     *              Kısıtlamalar: 0 ≤ N ≤ 10000.\n     *     Çıktı:\n     *          ikili sayı sistemiyle bir dize.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/37", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * \n     * Verilen bir iç içe liste olarak 2 boyutlu veri, matrise benzer, ancak matrislerden farklı olarak, her satır farklı bir sütun sayısı içerebilir. Verilen lst ve tamsayı x, listedeki tam sayıları bulun ve her bir tuple'ın (x1, y1), (x2, y2) ... bir koordinat olduğu ve sıfırdan başlayan bir satır, sütun düzeninde bir tuple listesi döndürün. Koordinatları başlangıçta satırlara göre artan sırayla sıralayın. Ayrıca, sütunların koordinatlarını azalan sırayla sıralayın.\n     * \n     * Örnekler:\n     * \n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n", "entry_point": "getRow", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList();\n        int arg01 = 1;\n        List<Object> x0 = GetRow.getRow(Arrays.asList(), 1);\n        List<Object> v0 = Arrays.asList();\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(Arrays.asList(1));\n        int arg11 = 2;\n        List<Object> x1 = GetRow.getRow(Arrays.asList(Arrays.asList(1)), 2);\n        List<Object> v1 = Arrays.asList();\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(Arrays.asList(), Arrays.asList(1), Arrays.asList(1, 2, 3));\n        int arg21 = 3;\n        List<Object> x2 = GetRow.getRow(Arrays.asList(Arrays.asList(), Arrays.asList(1), Arrays.asList(1, 2, 3)), 3);\n        List<Object> v2 = Arrays.asList(Arrays.asList(2, 2));\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir iç içe liste olarak 2 boyutlu veri, matrise benzer, ancak matrislerden farklı olarak, her satır farklı bir sütun sayısı içerebilir. Verilen lst ve tamsayı x, listedeki tam sayıları bulun ve her bir tuple'ın (x1, y1), (x2, y2) ... bir koordinat olduğu ve sıfırdan başlayan bir satır, sütun düzeninde bir tuple listesi döndürün. Koordinatları başlangıçta satırlara göre artan sırayla sıralayın. Ayrıca, sütunların koordinatlarını azalan sırayla sıralayın.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/38", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * \n     * Sana bir tamsayı listesi verilir.\n     * next_smallest() adlı bir işlev yazın ve listenin ikinci en küçük öğesini döndürün.\n     * Böyle bir öğe yoksa null döndürün.\n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n", "entry_point": "nextSmallest", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(1, 2, 3, 4, 5);\n        Integer x0 = NextSmallest.nextSmallest(Arrays.asList(1, 2, 3, 4, 5));\n        Integer v0 = 2;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(5, 1, 4, 3, 2);\n        Integer x1 = NextSmallest.nextSmallest(Arrays.asList(5, 1, 4, 3, 2));\n        Integer v1 = 2;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList();\n        Integer x2 = NextSmallest.nextSmallest(Arrays.asList());\n        Integer v2 = null;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(1, 1);\n        Integer x3 = NextSmallest.nextSmallest(Arrays.asList(1, 1));\n        Integer v3 = null;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(1, 1, 1, 1, 0);\n        Integer x4 = NextSmallest.nextSmallest(Arrays.asList(1, 1, 1, 1, 0));\n        Integer v4 = 1;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList(1, 1);\n        Integer x5 = NextSmallest.nextSmallest(Arrays.asList(1, 1));\n        Integer v5 = null;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Object> arg60 = Arrays.asList(-35, 34, 12, -45);\n        Integer x6 = NextSmallest.nextSmallest(Arrays.asList(-35, 34, 12, -45));\n        Integer v6 = -35;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Sana bir tamsayı listesi verilir.\n     * next_smallest() adlı bir işlev yazın ve listenin ikinci en küçük öğesini döndürün.\n     * Böyle bir öğe yoksa null döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * \n     * Verilen bir kelime dizisi alacaksınız ve göreviniz sıkıntıların sayısını saymaktır. Bir sıkıntı, \"Ben\" kelimesiyle başlayan bir cümledir. Cümleler '.', '?' veya '!' ile sınırlandırılır.\n     * \n     * Örneğin:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n", "entry_point": "isBored", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Hello world\";\n        int x0 = IsBored.isBored(\"Hello world\");\n        int v0 = 0;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Is the sky blue?\";\n        int x1 = IsBored.isBored(\"Is the sky blue?\");\n        int v1 = 0;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"I love It !\";\n        int x2 = IsBored.isBored(\"I love It !\");\n        int v2 = 1;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"bIt\";\n        int x3 = IsBored.isBored(\"bIt\");\n        int v3 = 0;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"I feel good today. I will be productive. will kill It\";\n        int x4 = IsBored.isBored(\"I feel good today. I will be productive. will kill It\");\n        int v4 = 2;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"You and I are going for a walk\";\n        int x5 = IsBored.isBored(\"You and I are going for a walk\");\n        int v5 = 0;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir kelime dizisi alacaksınız ve göreviniz sıkıntıların sayısını saymaktır. Bir sıkıntı, \"Ben\" kelimesiyle başlayan bir cümledir. Cümleler '.', '?' veya '!' ile sınırlandırılır.\n     * \n     * Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/40", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * \n     * Verilen bir tamsayı listesi var.\n     * En büyük asal değeri bulmanız ve rakamlarının toplamını döndürmeniz gerekiyor.\n     * \n     * Örnekler:\n     * \n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n", "entry_point": "skjkasdkd", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        int x0 = Skjkasdkd.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3));\n        int v0 = 10;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        int x1 = Skjkasdkd.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1));\n        int v1 = 25;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        int x2 = Skjkasdkd.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3));\n        int v2 = 13;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        int x3 = Skjkasdkd.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6));\n        int v3 = 11;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        int x4 = Skjkasdkd.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21));\n        int v4 = 3;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(0, 8, 1, 2, 1, 7);\n        int x5 = Skjkasdkd.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7));\n        int v5 = 7;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(8191);\n        int x6 = Skjkasdkd.skjkasdkd(Arrays.asList(8191));\n        int v6 = 19;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(8191, 123456, 127, 7);\n        int x7 = Skjkasdkd.skjkasdkd(Arrays.asList(8191, 123456, 127, 7));\n        int v7 = 19;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Integer> arg80 = Arrays.asList(127, 97, 8192);\n        int x8 = Skjkasdkd.skjkasdkd(Arrays.asList(127, 97, 8192));\n        int v8 = 10;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir tamsayı listesi var.\n     * En büyük asal değeri bulmanız ve rakamlarının toplamını döndürmeniz gerekiyor.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/41", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * \n     * Verilen bir sözlükte, tüm anahtarlar küçük harfli stringlerse veya tüm anahtarlar büyük harfli stringlerse True değerini döndürün, aksi takdirde False değerini döndürün. Verilen sözlük boş ise False değeri döndürmelidir. Örnekler:\n     * \n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Object dict) {\n", "entry_point": "checkDictCase", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        Object arg00 = new HashMap(){{put(\"p\", \"pineapple\");put(\"b\", \"banana\");}};\n        Boolean x0 = CheckDictCase.checkDictCase(new HashMap(){{put(\"p\", \"pineapple\");put(\"b\", \"banana\");}});\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        Object arg10 = new HashMap(){{put(\"p\", \"pineapple\");put(\"A\", \"banana\");put(\"B\", \"banana\");}};\n        Boolean x1 = CheckDictCase.checkDictCase(new HashMap(){{put(\"p\", \"pineapple\");put(\"A\", \"banana\");put(\"B\", \"banana\");}});\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        Object arg20 = new HashMap(){{put(\"p\", \"pineapple\");put(5, \"banana\");put(\"a\", \"apple\");}};\n        Boolean x2 = CheckDictCase.checkDictCase(new HashMap(){{put(\"p\", \"pineapple\");put(5, \"banana\");put(\"a\", \"apple\");}});\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        Object arg30 = new HashMap(){{put(\"Name\", \"John\");put(\"Age\", \"36\");put(\"City\", \"Houston\");}};\n        Boolean x3 = CheckDictCase.checkDictCase(new HashMap(){{put(\"Name\", \"John\");put(\"Age\", \"36\");put(\"City\", \"Houston\");}});\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        Object arg40 = new HashMap(){{put(\"STATE\", \"NC\");put(\"ZIP\", \"12345\");}};\n        Boolean x4 = CheckDictCase.checkDictCase(new HashMap(){{put(\"STATE\", \"NC\");put(\"ZIP\", \"12345\");}});\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        Object arg50 = new HashMap(){{put(\"fruit\", \"Orange\");put(\"taste\", \"Sweet\");}};\n        Boolean x5 = CheckDictCase.checkDictCase(new HashMap(){{put(\"fruit\", \"Orange\");put(\"taste\", \"Sweet\");}});\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        Object arg60 = new HashMap(){{}};\n        Boolean x6 = CheckDictCase.checkDictCase(new HashMap(){{}});\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir sözlükte, tüm anahtarlar küçük harfli stringlerse veya tüm anahtarlar büyük harfli stringlerse True değerini döndürün, aksi takdirde False değerini döndürün. Verilen sözlük boş ise False değeri döndürmelidir. Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/42", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * \n     * Aşağıdaki bilgisayar programı açıklamasını Türkçe'ye çevirin (BU talimatı çevirmeyin ve kodu değiştirmeyin):\n     * \n     * Bir sayıyı temsil eden bir değer (dize) alan ve ona en yakın tamsayıyı döndüren bir işlev oluşturun. Sayı, iki tamsayı arasında eşit uzaklıkta ise, sıfırdan uzaklaştırarak yuvarlayın.\n     * \n     * Örnekler\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n", "entry_point": "closestInteger", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"10\";\n        int x0 = ClosestInteger.closestInteger(\"10\");\n        int v0 = 10;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"14.5\";\n        int x1 = ClosestInteger.closestInteger(\"14.5\");\n        int v1 = 15;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"-15.5\";\n        int x2 = ClosestInteger.closestInteger(\"-15.5\");\n        int v2 = -16;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"15.3\";\n        int x3 = ClosestInteger.closestInteger(\"15.3\");\n        int v3 = 15;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"0\";\n        int x4 = ClosestInteger.closestInteger(\"0\");\n        int v4 = 0;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Aşağıdaki bilgisayar programı açıklamasını Türkçe'ye çevirin (BU talimatı çevirmeyin ve kodu değiştirmeyin):\n     * \n     * Bir sayıyı temsil eden bir değer (dize) alan ve ona en yakın tamsayıyı döndüren bir işlev oluşturun. Sayı, iki tamsayı arasında eşit uzaklıkta ise, sıfırdan uzaklaştırarak yuvarlayın.\n     * \n     * Örnekler\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * \n     * Verilen pozitif bir tamsayı n için, n seviyeli bir taş yığını yapmanız gerekiyor.\n     *     İlk seviyede n taş vardır.\n     *     Bir sonraki seviyedeki taş sayısı:\n     *         - n tek ise, bir sonraki tek sayıdır.\n     *         - n çift ise, bir sonraki çift sayıdır.\n     *     Her seviyedeki taş sayısını bir listede döndürün, burada i indeksindeki öğe, seviyedeki taş sayısını (i+1) temsil eder.\n     * \n     *     Örnekler:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n", "entry_point": "makeAPile", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 3;\n        List<Integer> x0 = MakeAPile.makeAPile(3);\n        List<Integer> v0 = Arrays.asList(3, 5, 7);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 4;\n        List<Integer> x1 = MakeAPile.makeAPile(4);\n        List<Integer> v1 = Arrays.asList(4, 6, 8, 10);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 5;\n        List<Integer> x2 = MakeAPile.makeAPile(5);\n        List<Integer> v2 = Arrays.asList(5, 7, 9, 11, 13);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 6;\n        List<Integer> x3 = MakeAPile.makeAPile(6);\n        List<Integer> v3 = Arrays.asList(6, 8, 10, 12, 14, 16);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 8;\n        List<Integer> x4 = MakeAPile.makeAPile(8);\n        List<Integer> v4 = Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif bir tamsayı n için, n seviyeli bir taş yığını yapmanız gerekiyor.\n     *     İlk seviyede n taş vardır.\n     *     Bir sonraki seviyedeki taş sayısı:\n     *         - n tek ise, bir sonraki tek sayıdır.\n     *         - n çift ise, bir sonraki çift sayıdır.\n     *     Her seviyedeki taş sayısını bir listede döndürün, burada i indeksindeki öğe, seviyedeki taş sayısını (i+1) temsil eder.\n     * \n     *     Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/44", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * \n     * Verilen bir dizi, virgül veya boşluklarla ayrılmış kelimeler içerecektir. Göreviniz, diziyi kelimelere ayırmak ve kelimelerin bir dizisini döndürmektir.\n     * \n     * Örneğin:\n     * \n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n", "entry_point": "wordsString", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Hi, my name is John\";\n        List<Object> x0 = WordsString.wordsString(\"Hi, my name is John\");\n        List<Object> v0 = Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\");\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"One, two, three, four, five, six\";\n        List<Object> x1 = WordsString.wordsString(\"One, two, three, four, five, six\");\n        List<Object> v1 = Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"Hi, my name\";\n        List<Object> x2 = WordsString.wordsString(\"Hi, my name\");\n        List<Object> v2 = Arrays.asList(\"Hi\", \"my\", \"name\");\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"One,, two, three, four, five, six,\";\n        List<Object> x3 = WordsString.wordsString(\"One,, two, three, four, five, six,\");\n        List<Object> v3 = Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"\";\n        List<Object> x4 = WordsString.wordsString(\"\");\n        List<Object> v4 = Arrays.asList();\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"ahmed     , gamal\";\n        List<Object> x5 = WordsString.wordsString(\"ahmed     , gamal\");\n        List<Object> v5 = Arrays.asList(\"ahmed\", \"gamal\");\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dizi, virgül veya boşluklarla ayrılmış kelimeler içerecektir. Göreviniz, diziyi kelimelere ayırmak ve kelimelerin bir dizisini döndürmektir.\n     * \n     * Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/45", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * \n     * Bu fonksiyon, iki pozitif sayı x ve y alır ve [x, y] aralığında bulunan en büyük çift tamsayıyı döndürür. Eğer böyle bir sayı yoksa, fonksiyon -1 döndürmelidir.\n     * \n     * Örneğin:\n     * \n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n", "entry_point": "chooseNum", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 12;\n        int arg01 = 15;\n        int x0 = ChooseNum.chooseNum(12, 15);\n        int v0 = 14;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 13;\n        int arg11 = 12;\n        int x1 = ChooseNum.chooseNum(13, 12);\n        int v1 = -1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 33;\n        int arg21 = 12354;\n        int x2 = ChooseNum.chooseNum(33, 12354);\n        int v2 = 12354;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 5234;\n        int arg31 = 5233;\n        int x3 = ChooseNum.chooseNum(5234, 5233);\n        int v3 = -1;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 6;\n        int arg41 = 29;\n        int x4 = ChooseNum.chooseNum(6, 29);\n        int v4 = 28;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 27;\n        int arg51 = 10;\n        int x5 = ChooseNum.chooseNum(27, 10);\n        int v5 = -1;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 7;\n        int arg61 = 7;\n        int x6 = ChooseNum.chooseNum(7, 7);\n        int v6 = -1;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 546;\n        int arg71 = 546;\n        int x7 = ChooseNum.chooseNum(546, 546);\n        int v7 = 546;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n\n}\n}\n", "description": "\n     * Bu fonksiyon, iki pozitif sayı x ve y alır ve [x, y] aralığında bulunan en büyük çift tamsayıyı döndürür. Eğer böyle bir sayı yoksa, fonksiyon -1 döndürmelidir.\n     * \n     * Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/46", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * \n     * Verilen iki pozitif tamsayı n ve m'dir ve göreviniz n'den m'ye (n ve m dahil) olan tamsayıların ortalamasını hesaplamaktır. Cevabı en yakın tamsayıya yuvarlayın ve bunu ikili sayıya dönüştürün. Eğer n m'den büyükse, -1 döndürün. Örnek:\n     * \n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n", "entry_point": "roundedAvg", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 1;\n        int arg01 = 5;\n        Object x0 = RoundedAvg.roundedAvg(1, 5);\n        Object v0 = \"0b11\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 7;\n        int arg11 = 13;\n        Object x1 = RoundedAvg.roundedAvg(7, 13);\n        Object v1 = \"0b1010\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 964;\n        int arg21 = 977;\n        Object x2 = RoundedAvg.roundedAvg(964, 977);\n        Object v2 = \"0b1111001010\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 996;\n        int arg31 = 997;\n        Object x3 = RoundedAvg.roundedAvg(996, 997);\n        Object v3 = \"0b1111100100\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 560;\n        int arg41 = 851;\n        Object x4 = RoundedAvg.roundedAvg(560, 851);\n        Object v4 = \"0b1011000010\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 185;\n        int arg51 = 546;\n        Object x5 = RoundedAvg.roundedAvg(185, 546);\n        Object v5 = \"0b101101110\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 362;\n        int arg61 = 496;\n        Object x6 = RoundedAvg.roundedAvg(362, 496);\n        Object v6 = \"0b110101101\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 350;\n        int arg71 = 902;\n        Object x7 = RoundedAvg.roundedAvg(350, 902);\n        Object v7 = \"0b1001110010\";\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 197;\n        int arg81 = 233;\n        Object x8 = RoundedAvg.roundedAvg(197, 233);\n        Object v8 = \"0b11010111\";\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 7;\n        int arg91 = 5;\n        Object x9 = RoundedAvg.roundedAvg(7, 5);\n        Object v9 = -1;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        int arg100 = 5;\n        int arg101 = 1;\n        Object x10 = RoundedAvg.roundedAvg(5, 1);\n        Object v10 = -1;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        int arg110 = 5;\n        int arg111 = 5;\n        Object x11 = RoundedAvg.roundedAvg(5, 5);\n        Object v11 = \"0b101\";\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen iki pozitif tamsayı n ve m'dir ve göreviniz n'den m'ye (n ve m dahil) olan tamsayıların ortalamasını hesaplamaktır. Cevabı en yakın tamsayıya yuvarlayın ve bunu ikili sayıya dönüştürün. Eğer n m'den büyükse, -1 döndürün. Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/47", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * \n     * \"Fonksiyon f'yi uygulayın, n'i bir parametre olarak alır ve i indeksindeki elemanın değeri çift ise i'nin faktöriyeli, değilse 1'den i'ye kadar olan sayıların toplamı olan n büyüklüğünde bir liste döndürür. i 1'den başlar. i'nin faktöriyeli 1'den i'ye kadar olan sayıların çarpımıdır (1 * 2 * ... * i). Örnek:\"\n     * \n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n", "entry_point": "f", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 5;\n        List<Integer> x0 = F.f(5);\n        List<Integer> v0 = Arrays.asList(1, 2, 6, 24, 15);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 7;\n        List<Integer> x1 = F.f(7);\n        List<Integer> v1 = Arrays.asList(1, 2, 6, 24, 15, 720, 28);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 1;\n        List<Integer> x2 = F.f(1);\n        List<Integer> v2 = Arrays.asList(1);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 3;\n        List<Integer> x3 = F.f(3);\n        List<Integer> v3 = Arrays.asList(1, 2, 6);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * \"Fonksiyon f'yi uygulayın, n'i bir parametre olarak alır ve i indeksindeki elemanın değeri çift ise i'nin faktöriyeli, değilse 1'den i'ye kadar olan sayıların toplamı olan n büyüklüğünde bir liste döndürür. i 1'den başlar. i'nin faktöriyeli 1'den i'ye kadar olan sayıların çarpımıdır (1 * 2 * ... * i). Örnek:\"\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/48", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * \n     * Verilen pozitif bir tamsayı n için, (1, n) aralığındaki çift ve tek tamsayı palindromlarının sayısını içeren bir tuple döndürün.\n     * \n     *     Örnek 1:\n     * \n     *         Girdi: 3\n     *         Çıktı: (1, 2)\n     *         Açıklama:\n     *         Tamsayı palindromları 1, 2, 3'tür. Bunlardan biri çift, ikisi tek sayıdır.\n     * \n     *     Örnek 2:\n     * \n     *         Girdi: 12\n     *         Çıktı: (4, 6)\n     *         Açıklama:\n     *         Tamsayı palindromları 1, 2, 3, 4, 5, 6, 7, 8, 9, 11'dir. Bunlardan dördü çift, altısı tek sayıdır.\n     * \n     *     Not:\n     *         1. 1 <= n <= 10^3\n     *         2. Döndürülen tuple sırasıyla çift ve tek tamsayı palindromlarının sayısını içerir.\n     * \n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n", "entry_point": "evenOddPalindrome", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 123;\n        List<Integer> x0 = EvenOddPalindrome.evenOddPalindrome(123);\n        List<Integer> v0 = Arrays.asList(8, 13);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 12;\n        List<Integer> x1 = EvenOddPalindrome.evenOddPalindrome(12);\n        List<Integer> v1 = Arrays.asList(4, 6);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 3;\n        List<Integer> x2 = EvenOddPalindrome.evenOddPalindrome(3);\n        List<Integer> v2 = Arrays.asList(1, 2);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 63;\n        List<Integer> x3 = EvenOddPalindrome.evenOddPalindrome(63);\n        List<Integer> v3 = Arrays.asList(6, 8);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 25;\n        List<Integer> x4 = EvenOddPalindrome.evenOddPalindrome(25);\n        List<Integer> v4 = Arrays.asList(5, 6);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 19;\n        List<Integer> x5 = EvenOddPalindrome.evenOddPalindrome(19);\n        List<Integer> v5 = Arrays.asList(4, 6);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 9;\n        List<Integer> x6 = EvenOddPalindrome.evenOddPalindrome(9);\n        List<Integer> v6 = Arrays.asList(4, 5);\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 1;\n        List<Integer> x7 = EvenOddPalindrome.evenOddPalindrome(1);\n        List<Integer> v7 = Arrays.asList(0, 1);\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif bir tamsayı n için, (1, n) aralığındaki çift ve tek tamsayı palindromlarının sayısını içeren bir tuple döndürün.\n     * \n     *     Örnek 1:\n     * \n     *         Girdi: 3\n     *         Çıktı: (1, 2)\n     *         Açıklama:\n     *         Tamsayı palindromları 1, 2, 3'tür. Bunlardan biri çift, ikisi tek sayıdır.\n     * \n     *     Örnek 2:\n     * \n     *         Girdi: 12\n     *         Çıktı: (4, 6)\n     *         Açıklama:\n     *         Tamsayı palindromları 1, 2, 3, 4, 5, 6, 7, 8, 9, 11'dir. Bunlardan dördü çift, altısı tek sayıdır.\n     * \n     *     Not:\n     *         1. 1 <= n <= 10^3\n     *         2. Döndürülen tuple sırasıyla çift ve tek tamsayı palindromlarının sayısını içerir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * \n     * N tane arr[1], arr[2], ..., arr[N] tamsayılarından oluşan bir dizi 'arr'ımız var. Dizideki sayılar rastgele sıralanacaktır. Göreviniz, verilen dizide aşağıdaki işlemi yaparak artmayan sıralı bir dizi elde etmenin mümkün olup olmadığını belirlemektir:\n     * \n     *     Sağ kaydırma işlemini herhangi bir sayıda gerçekleştirmenize izin verilir.\n     *     \n     *     Bir sağ kaydırma işlemi, dizinin tüm elemanlarını bir pozisyon sağa kaydırmayı içerir. Dizinin son elemanı, dizinin başlangıç pozisyonuna yani 0. indise taşınacaktır.\n     * \n     *     Yukarıdaki işlemi yaparak sıralanmış dizi elde edilebiliyorsa True değerini, aksi takdirde False değerini döndürün.\n     *     Verilen dizi boşsa True değerini döndürün.\n     * \n     *     Not: Verilen liste benzersiz elemanlara sahip olacağı garanti edilir.\n     * \n     *     Örneğin:\n     *     \n     *     move_one_ball([3, 4, 5, 1, 2])==>True\n     *     Açıklama: 2 sağ kaydırma işlemi yaparak, verilen dizi için artmayan sıralı dizi elde edilebilir.\n     *     move_one_ball([3, 5, 4, 1, 2])==>False\n     *     Açıklama: Herhangi bir sayıda sağ kaydırma işlemi yaparak verilen dizi için artmayan sıralı dizi elde etmek mümkün değildir.\n     * \n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n", "entry_point": "moveOneBall", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(3, 4, 5, 1, 2);\n        Boolean x0 = MoveOneBall.moveOneBall(Arrays.asList(3, 4, 5, 1, 2));\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(3, 5, 10, 1, 2);\n        Boolean x1 = MoveOneBall.moveOneBall(Arrays.asList(3, 5, 10, 1, 2));\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(4, 3, 1, 2);\n        Boolean x2 = MoveOneBall.moveOneBall(Arrays.asList(4, 3, 1, 2));\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(3, 5, 4, 1, 2);\n        Boolean x3 = MoveOneBall.moveOneBall(Arrays.asList(3, 5, 4, 1, 2));\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList();\n        Boolean x4 = MoveOneBall.moveOneBall(Arrays.asList());\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * N tane arr[1], arr[2], ..., arr[N] tamsayılarından oluşan bir dizi 'arr'ımız var. Dizideki sayılar rastgele sıralanacaktır. Göreviniz, verilen dizide aşağıdaki işlemi yaparak artmayan sıralı bir dizi elde etmenin mümkün olup olmadığını belirlemektir:\n     * \n     *     Sağ kaydırma işlemini herhangi bir sayıda gerçekleştirmenize izin verilir.\n     *     \n     *     Bir sağ kaydırma işlemi, dizinin tüm elemanlarını bir pozisyon sağa kaydırmayı içerir. Dizinin son elemanı, dizinin başlangıç pozisyonuna yani 0. indise taşınacaktır.\n     * \n     *     Yukarıdaki işlemi yaparak sıralanmış dizi elde edilebiliyorsa True değerini, aksi takdirde False değerini döndürün.\n     *     Verilen dizi boşsa True değerini döndürün.\n     * \n     *     Not: Verilen liste benzersiz elemanlara sahip olacağı garanti edilir.\n     * \n     *     Örneğin:\n     *     \n     *     move_one_ball([3, 4, 5, 1, 2])==>True\n     *     Açıklama: 2 sağ kaydırma işlemi yaparak, verilen dizi için artmayan sıralı dizi elde edilebilir.\n     *     move_one_ball([3, 5, 4, 1, 2])==>False\n     *     Açıklama: Herhangi bir sayıda sağ kaydırma işlemi yaparak verilen dizi için artmayan sıralı dizi elde etmek mümkün değildir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/50", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * \n     * Bu problemde, iki sayı listesi alan ve lst1'i sadece çift sayılardan oluşan bir liste yapmak için lst1 ve lst2 arasında eleman değişimi yapmanın mümkün olup olmadığını belirleyen bir işlev uygulayacaksınız. lst1 ve lst2 arasında değiştirilecek eleman sayısında bir sınır yoktur. lst1 ve lst2 arasında eleman değişimi yaparak lst1'in tüm elemanlarının çift olmasını mümkün kılmak mümkünse \"YES\" döndürün. Aksi takdirde \"NO\" döndürün. Örneğin: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" Giriş listelerinin boş olmayacağı varsayılır.\n     * \n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "entry_point": "exchange", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> arg01 = Arrays.asList(1, 2, 3, 4);\n        String x0 = Exchange.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4));\n        String v0 = \"YES\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> arg11 = Arrays.asList(1, 5, 3, 4);\n        String x1 = Exchange.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4));\n        String v1 = \"NO\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> arg21 = Arrays.asList(2, 1, 4, 3);\n        String x2 = Exchange.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(2, 1, 4, 3));\n        String v2 = \"YES\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(5, 7, 3);\n        List<Integer> arg31 = Arrays.asList(2, 6, 4);\n        String x3 = Exchange.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 4));\n        String v3 = \"YES\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(5, 7, 3);\n        List<Integer> arg41 = Arrays.asList(2, 6, 3);\n        String x4 = Exchange.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 3));\n        String v4 = \"NO\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(3, 2, 6, 1, 8, 9);\n        List<Integer> arg51 = Arrays.asList(3, 5, 5, 1, 1, 1);\n        String x5 = Exchange.exchange(Arrays.asList(3, 2, 6, 1, 8, 9), Arrays.asList(3, 5, 5, 1, 1, 1));\n        String v5 = \"NO\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(100, 200);\n        List<Integer> arg61 = Arrays.asList(200, 200);\n        String x6 = Exchange.exchange(Arrays.asList(100, 200), Arrays.asList(200, 200));\n        String v6 = \"YES\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Bu problemde, iki sayı listesi alan ve lst1'i sadece çift sayılardan oluşan bir liste yapmak için lst1 ve lst2 arasında eleman değişimi yapmanın mümkün olup olmadığını belirleyen bir işlev uygulayacaksınız. lst1 ve lst2 arasında değiştirilecek eleman sayısında bir sınır yoktur. lst1 ve lst2 arasında eleman değişimi yaparak lst1'in tüm elemanlarının çift olmasını mümkün kılmak mümkünse \"YES\" döndürün. Aksi takdirde \"NO\" döndürün. Örneğin: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" Giriş listelerinin boş olmayacağı varsayılır.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/51", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * \n     * Görev\n     *     İki dize s ve c verildiğinde, s içinde c ile eşit olan tüm karakterleri silmeniz gerekiyor\n     *     sonra sonuç dizesinin palindrom olup olmadığını kontrol edin.\n     *     Bir dize, tersten okunduğunda aynı şekilde okunursa palindrom olarak adlandırılır.\n     *     Sonuç dizesi ve kontrol için True / False içeren bir tuple döndürmelisiniz.\n     *     Örnek\n     *     s = \"abcde\", c = \"ae\" için sonuç ('bcd',False) olmalıdır\n     *     s = \"abcdef\", c = \"b\" için sonuç ('acdef',False) olmalıdır\n     *     s = \"abcdedcba\", c = \"ab\" için sonuç ('cdedc',True) olmalıdır\n     * \n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n", "entry_point": "reverseDelete", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"abcde\";\n        String arg01 = \"ae\";\n        List<Object> x0 = ReverseDelete.reverseDelete(\"abcde\", \"ae\");\n        List<Object> v0 = Arrays.asList(\"bcd\", false);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"abcdef\";\n        String arg11 = \"b\";\n        List<Object> x1 = ReverseDelete.reverseDelete(\"abcdef\", \"b\");\n        List<Object> v1 = Arrays.asList(\"acdef\", false);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"abcdedcba\";\n        String arg21 = \"ab\";\n        List<Object> x2 = ReverseDelete.reverseDelete(\"abcdedcba\", \"ab\");\n        List<Object> v2 = Arrays.asList(\"cdedc\", true);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"dwik\";\n        String arg31 = \"w\";\n        List<Object> x3 = ReverseDelete.reverseDelete(\"dwik\", \"w\");\n        List<Object> v3 = Arrays.asList(\"dik\", false);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"a\";\n        String arg41 = \"a\";\n        List<Object> x4 = ReverseDelete.reverseDelete(\"a\", \"a\");\n        List<Object> v4 = Arrays.asList(\"\", true);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"abcdedcba\";\n        String arg51 = \"\";\n        List<Object> x5 = ReverseDelete.reverseDelete(\"abcdedcba\", \"\");\n        List<Object> v5 = Arrays.asList(\"abcdedcba\", true);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"abcdedcba\";\n        String arg61 = \"v\";\n        List<Object> x6 = ReverseDelete.reverseDelete(\"abcdedcba\", \"v\");\n        List<Object> v6 = Arrays.asList(\"abcdedcba\", true);\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"vabba\";\n        String arg71 = \"v\";\n        List<Object> x7 = ReverseDelete.reverseDelete(\"vabba\", \"v\");\n        List<Object> v7 = Arrays.asList(\"abba\", true);\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"mamma\";\n        String arg81 = \"mia\";\n        List<Object> x8 = ReverseDelete.reverseDelete(\"mamma\", \"mia\");\n        List<Object> v8 = Arrays.asList(\"\", true);\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * Görev\n     *     İki dize s ve c verildiğinde, s içinde c ile eşit olan tüm karakterleri silmeniz gerekiyor\n     *     sonra sonuç dizesinin palindrom olup olmadığını kontrol edin.\n     *     Bir dize, tersten okunduğunda aynı şekilde okunursa palindrom olarak adlandırılır.\n     *     Sonuç dizesi ve kontrol için True / False içeren bir tuple döndürmelisiniz.\n     *     Örnek\n     *     s = \"abcde\", c = \"ae\" için sonuç ('bcd',False) olmalıdır\n     *     s = \"abcdef\", c = \"b\" için sonuç ('acdef',False) olmalıdır\n     *     s = \"abcdedcba\", c = \"ab\" için sonuç ('cdedc',True) olmalıdır\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/52", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * \n     * Verilen bir kuyu dikdörtgeni var. Her satır bir kuyuyu temsil eder ve bir satırdaki her 1 bir birim suyu temsil eder. Her kuyunun suyunu çıkarmak için kullanılabilecek bir kovası vardır ve tüm kovalar aynı kapasiteye sahiptir. Göreviniz, kovaları kuyulardan boşaltmaktır. Kovaları indirmek için kaç kez ihtiyacınız olduğunu çıktı olarak verin.\n     * \n     * Örnek 1:\n     *     Girdi:\n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Çıktı: 6\n     * \n     * Örnek 2:\n     *     Girdi:\n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Çıktı: 5\n     * \n     * Örnek 3:\n     *     Girdi:\n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Çıktı: 0\n     * \n     * Kısıtlamalar:\n     *     * Tüm kuyular aynı uzunlukta olacak.\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= kapasite <= 10\n     * \n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n", "entry_point": "maxFill", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<List<Integer>> arg00 = Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1));\n        int arg01 = 1;\n        int x0 = MaxFill.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1);\n        int v0 = 6;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<List<Integer>> arg10 = Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1));\n        int arg11 = 2;\n        int x1 = MaxFill.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2);\n        int v1 = 5;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<List<Integer>> arg20 = Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0));\n        int arg21 = 5;\n        int x2 = MaxFill.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5);\n        int v2 = 0;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<List<Integer>> arg30 = Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1));\n        int arg31 = 2;\n        int x3 = MaxFill.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2);\n        int v3 = 4;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<List<Integer>> arg40 = Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1));\n        int arg41 = 9;\n        int x4 = MaxFill.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9);\n        int v4 = 2;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir kuyu dikdörtgeni var. Her satır bir kuyuyu temsil eder ve bir satırdaki her 1 bir birim suyu temsil eder. Her kuyunun suyunu çıkarmak için kullanılabilecek bir kovası vardır ve tüm kovalar aynı kapasiteye sahiptir. Göreviniz, kovaları kuyulardan boşaltmaktır. Kovaları indirmek için kaç kez ihtiyacınız olduğunu çıktı olarak verin.\n     * \n     * Örnek 1:\n     *     Girdi:\n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Çıktı: 6\n     * \n     * Örnek 2:\n     *     Girdi:\n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Çıktı: 5\n     * \n     * Örnek 3:\n     *     Girdi:\n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Çıktı: 0\n     * \n     * Kısıtlamalar:\n     *     * Tüm kuyular aynı uzunlukta olacak.\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= kapasite <= 10\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * \n     * Verilen bir s stringi ve doğal bir sayı n ile, s stringinden tam olarak n ünsüz içeren tüm kelimelerin bir listesini döndüren bir işlevi uygulamakla görevlendirildiniz. Bu kelimeler, s stringinde göründükleri sırayla sıralanmalıdır. Eğer s stringi boş ise, işlev boş bir liste döndürmelidir. Not: Girdi stringinin sadece harfler ve boşluklar içerdiğini varsayabilirsiniz. Örnekler:\n     * \n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n", "entry_point": "selectWords", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Mary had a little lamb\";\n        int arg01 = 4;\n        List<Object> x0 = SelectWords.selectWords(\"Mary had a little lamb\", 4);\n        List<Object> v0 = Arrays.asList(\"little\");\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Mary had a little lamb\";\n        int arg11 = 3;\n        List<Object> x1 = SelectWords.selectWords(\"Mary had a little lamb\", 3);\n        List<Object> v1 = Arrays.asList(\"Mary\", \"lamb\");\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"simple white space\";\n        int arg21 = 2;\n        List<Object> x2 = SelectWords.selectWords(\"simple white space\", 2);\n        List<Object> v2 = Arrays.asList();\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"Hello world\";\n        int arg31 = 4;\n        List<Object> x3 = SelectWords.selectWords(\"Hello world\", 4);\n        List<Object> v3 = Arrays.asList(\"world\");\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"Uncle sam\";\n        int arg41 = 3;\n        List<Object> x4 = SelectWords.selectWords(\"Uncle sam\", 3);\n        List<Object> v4 = Arrays.asList(\"Uncle\");\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"\";\n        int arg51 = 4;\n        List<Object> x5 = SelectWords.selectWords(\"\", 4);\n        List<Object> v5 = Arrays.asList();\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"a b c d e f\";\n        int arg61 = 1;\n        List<Object> x6 = SelectWords.selectWords(\"a b c d e f\", 1);\n        List<Object> v6 = Arrays.asList(\"b\", \"c\", \"d\", \"f\");\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir s stringi ve doğal bir sayı n ile, s stringinden tam olarak n ünsüz içeren tüm kelimelerin bir listesini döndüren bir işlevi uygulamakla görevlendirildiniz. Bu kelimeler, s stringinde göründükleri sırayla sıralanmalıdır. Eğer s stringi boş ise, işlev boş bir liste döndürmelidir. Not: Girdi stringinin sadece harfler ve boşluklar içerdiğini varsayabilirsiniz. Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/54", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * \n     * Verilen bir tamsayı dizisi arr ve pozitif bir tamsayı k ile, arr dizisindeki en büyük k sayısını içeren sıralanmış bir liste döndürün.\n     * \n     *     Örnek 1:\n     * \n     *         Girdi: arr = [-3, -4, 5], k = 3\n     *         Çıktı: [-4, -3, 5]\n     * \n     *     Örnek 2:\n     * \n     *         Girdi: arr = [4, -4, 4], k = 2\n     *         Çıktı: [4, 4]\n     * \n     *     Örnek 3:\n     * \n     *         Girdi: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *         Çıktı: [2]\n     * \n     *     Not:\n     *         1. Dizinin uzunluğu [1, 1000] aralığında olacaktır.\n     *         2. Dizideki elemanlar [-1000, 1000] aralığında olacaktır.\n     *         3. 0 <= k <= len(arr) olacaktır.\n     * \n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n", "entry_point": "maximum", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(-3, -4, 5);\n        int arg01 = 3;\n        List<Object> x0 = Maximum.maximum(Arrays.asList(-3, -4, 5), 3);\n        List<Object> v0 = Arrays.asList(-4, -3, 5);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(4, -4, 4);\n        int arg11 = 2;\n        List<Object> x1 = Maximum.maximum(Arrays.asList(4, -4, 4), 2);\n        List<Object> v1 = Arrays.asList(4, 4);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int arg21 = 1;\n        List<Object> x2 = Maximum.maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1);\n        List<Object> v2 = Arrays.asList(2);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(123, -123, 20, 0, 1, 2, -3);\n        int arg31 = 3;\n        List<Object> x3 = Maximum.maximum(Arrays.asList(123, -123, 20, 0, 1, 2, -3), 3);\n        List<Object> v3 = Arrays.asList(2, 20, 123);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(-123, 20, 0, 1, 2, -3);\n        int arg41 = 4;\n        List<Object> x4 = Maximum.maximum(Arrays.asList(-123, 20, 0, 1, 2, -3), 4);\n        List<Object> v4 = Arrays.asList(0, 1, 2, 20);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(5, 15, 0, 3, -13, -8, 0);\n        int arg51 = 7;\n        List<Object> x5 = Maximum.maximum(Arrays.asList(5, 15, 0, 3, -13, -8, 0), 7);\n        List<Object> v5 = Arrays.asList(-13, -8, 0, 0, 3, 5, 15);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(-1, 0, 2, 5, 3, -10);\n        int arg61 = 2;\n        List<Object> x6 = Maximum.maximum(Arrays.asList(-1, 0, 2, 5, 3, -10), 2);\n        List<Object> v6 = Arrays.asList(3, 5);\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(1, 0, 5, -7);\n        int arg71 = 1;\n        List<Object> x7 = Maximum.maximum(Arrays.asList(1, 0, 5, -7), 1);\n        List<Object> v7 = Arrays.asList(5);\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Integer> arg80 = Arrays.asList(4, -4);\n        int arg81 = 2;\n        List<Object> x8 = Maximum.maximum(Arrays.asList(4, -4), 2);\n        List<Object> v8 = Arrays.asList(-4, 4);\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        List<Integer> arg90 = Arrays.asList(-10, 10);\n        int arg91 = 2;\n        List<Object> x9 = Maximum.maximum(Arrays.asList(-10, 10), 2);\n        List<Object> v9 = Arrays.asList(-10, 10);\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        List<Integer> arg100 = Arrays.asList(1, 2, 3, -23, 243, -400, 0);\n        int arg101 = 0;\n        List<Object> x10 = Maximum.maximum(Arrays.asList(1, 2, 3, -23, 243, -400, 0), 0);\n        List<Object> v10 = Arrays.asList();\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir tamsayı dizisi arr ve pozitif bir tamsayı k ile, arr dizisindeki en büyük k sayısını içeren sıralanmış bir liste döndürün.\n     * \n     *     Örnek 1:\n     * \n     *         Girdi: arr = [-3, -4, 5], k = 3\n     *         Çıktı: [-4, -3, 5]\n     * \n     *     Örnek 2:\n     * \n     *         Girdi: arr = [4, -4, 4], k = 2\n     *         Çıktı: [4, 4]\n     * \n     *     Örnek 3:\n     * \n     *         Girdi: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *         Çıktı: [2]\n     * \n     *     Not:\n     *         1. Dizinin uzunluğu [1, 1000] aralığında olacaktır.\n     *         2. Dizideki elemanlar [-1000, 1000] aralığında olacaktır.\n     *         3. 0 <= k <= len(arr) olacaktır.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/55", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * \n     * Verilen tam olmayan bir tamsayı dizisi arr ve bir tamsayı k, arr'nin ilk k elemanından en fazla iki basamağı olan elemanların toplamını döndürür.\n     * \n     *     Örnek:\n     * \n     *         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *         Output: 24 # 21 + 3'ün toplamı\n     * \n     *     Kısıtlamalar:\n     *         1. 1 <= len(arr) <= 100\n     *         2. 1 <= k <= len(arr)\n     * \n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n", "entry_point": "addElements", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99);\n        int arg01 = 3;\n        int x0 = AddElements.addElements(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3);\n        int v0 = -4;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(111, 121, 3, 4000, 5, 6);\n        int arg11 = 2;\n        int x1 = AddElements.addElements(Arrays.asList(111, 121, 3, 4000, 5, 6), 2);\n        int v1 = 0;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9);\n        int arg21 = 4;\n        int x2 = AddElements.addElements(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4);\n        int v2 = 125;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int arg31 = 4;\n        int x3 = AddElements.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4);\n        int v3 = 24;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(1);\n        int arg41 = 1;\n        int x4 = AddElements.addElements(Arrays.asList(1), 1);\n        int v4 = 1;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen tam olmayan bir tamsayı dizisi arr ve bir tamsayı k, arr'nin ilk k elemanından en fazla iki basamağı olan elemanların toplamını döndürür.\n     * \n     *     Örnek:\n     * \n     *         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *         Output: 24 # 21 + 3'ün toplamı\n     * \n     *     Kısıtlamalar:\n     *         1. 1 <= len(arr) <= 100\n     *         2. 1 <= k <= len(arr)\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/56", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * \n     * Verilen iki aralık vardır,\n     *     her bir aralık bir çift tamsayıdır. Örneğin, aralık = (başlangıç, bitiş) = (1, 2).\n     *     Verilen aralıklar kapalıdır, yani aralık (başlangıç, bitiş)\n     *     hem başlangıcı hem de bitişi içerir.\n     *     Her bir verilen aralık için, başlangıcının bitişinden küçük veya eşit olduğu varsayılır.\n     *     Göreviniz, bu iki aralığın kesişiminin uzunluğunun asal bir sayı olup olmadığını belirlemektir.\n     *     Örneğin, (1, 3), (2, 4) aralıklarının kesişimi (2, 3) dir\n     *     uzunluğu 1'dir, bu bir asal sayı değildir.\n     *     Kesişimin uzunluğu asal bir sayı ise \"YES\" döndürün,\n     *     aksi takdirde \"NO\" döndürün.\n     *     İki aralık kesişmiyorsa \"NO\" döndürün.\n     * \n     * \n     *     [girdi / çıktı] örnekleri:\n     * \n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "entry_point": "intersection", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 2);\n        List<Integer> arg01 = Arrays.asList(2, 3);\n        String x0 = Intersection.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3));\n        String v0 = \"NO\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(-1, 1);\n        List<Integer> arg11 = Arrays.asList(0, 4);\n        String x1 = Intersection.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4));\n        String v1 = \"NO\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(-3, -1);\n        List<Integer> arg21 = Arrays.asList(-5, 5);\n        String x2 = Intersection.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5));\n        String v2 = \"YES\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Integer> arg30 = Arrays.asList(-2, 2);\n        List<Integer> arg31 = Arrays.asList(-4, 0);\n        String x3 = Intersection.intersection(Arrays.asList(-2, 2), Arrays.asList(-4, 0));\n        String v3 = \"YES\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Integer> arg40 = Arrays.asList(-11, 2);\n        List<Integer> arg41 = Arrays.asList(-1, -1);\n        String x4 = Intersection.intersection(Arrays.asList(-11, 2), Arrays.asList(-1, -1));\n        String v4 = \"NO\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Integer> arg50 = Arrays.asList(1, 2);\n        List<Integer> arg51 = Arrays.asList(3, 5);\n        String x5 = Intersection.intersection(Arrays.asList(1, 2), Arrays.asList(3, 5));\n        String v5 = \"NO\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Integer> arg60 = Arrays.asList(1, 2);\n        List<Integer> arg61 = Arrays.asList(1, 2);\n        String x6 = Intersection.intersection(Arrays.asList(1, 2), Arrays.asList(1, 2));\n        String v6 = \"NO\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Integer> arg70 = Arrays.asList(-2, -2);\n        List<Integer> arg71 = Arrays.asList(-3, -2);\n        String x7 = Intersection.intersection(Arrays.asList(-2, -2), Arrays.asList(-3, -2));\n        String v7 = \"NO\";\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen iki aralık vardır,\n     *     her bir aralık bir çift tamsayıdır. Örneğin, aralık = (başlangıç, bitiş) = (1, 2).\n     *     Verilen aralıklar kapalıdır, yani aralık (başlangıç, bitiş)\n     *     hem başlangıcı hem de bitişi içerir.\n     *     Her bir verilen aralık için, başlangıcının bitişinden küçük veya eşit olduğu varsayılır.\n     *     Göreviniz, bu iki aralığın kesişiminin uzunluğunun asal bir sayı olup olmadığını belirlemektir.\n     *     Örneğin, (1, 3), (2, 4) aralıklarının kesişimi (2, 3) dir\n     *     uzunluğu 1'dir, bu bir asal sayı değildir.\n     *     Kesişimin uzunluğu asal bir sayı ise \"YES\" döndürün,\n     *     aksi takdirde \"NO\" döndürün.\n     *     İki aralık kesişmiyorsa \"NO\" döndürün.\n     * \n     * \n     *     [girdi / çıktı] örnekleri:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/57", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * \n     * Herkes Fibonacci dizisini bilir, son birkaç yüzyılda matematikçiler tarafından derinlemesine incelendi. Ancak, insanların bilmediği şey Tribonacci dizisidir. Tribonacci dizisi, tekrarlamayla tanımlanır:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, n çift ise.\n     * tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n tek ise.\n     * Örneğin:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     * = 2 + 3 + 3 = 8\n     * Sizlere n sayısı verilir, Tribonacci dizisinin ilk n + 1 sayısını içeren bir liste döndürmelisiniz.\n     * Örnekler:\n     * tri(3) = [1, 3, 2, 8]\n     * \n     *\n     */\n    public static List<Number> tri(int n) {\n", "entry_point": "tri", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 3;\n        List<Number> x0 = Tri.tri(3);\n        List<Number> v0 = Arrays.asList(1, 3, 2.0, 8.0);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 4;\n        List<Number> x1 = Tri.tri(4);\n        List<Number> v1 = Arrays.asList(1, 3, 2.0, 8.0, 3.0);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 5;\n        List<Number> x2 = Tri.tri(5);\n        List<Number> v2 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 6;\n        List<Number> x3 = Tri.tri(6);\n        List<Number> v3 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 7;\n        List<Number> x4 = Tri.tri(7);\n        List<Number> v4 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 8;\n        List<Number> x5 = Tri.tri(8);\n        List<Number> v5 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 9;\n        List<Number> x6 = Tri.tri(9);\n        List<Number> v6 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0);\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 20;\n        List<Number> x7 = Tri.tri(20);\n        List<Number> v7 = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0);\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 0;\n        List<Number> x8 = Tri.tri(0);\n        List<Number> v8 = Arrays.asList(1);\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 1;\n        List<Number> x9 = Tri.tri(1);\n        List<Number> v9 = Arrays.asList(1, 3);\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n\n}\n}\n", "description": "\n     * Herkes Fibonacci dizisini bilir, son birkaç yüzyılda matematikçiler tarafından derinlemesine incelendi. Ancak, insanların bilmediği şey Tribonacci dizisidir. Tribonacci dizisi, tekrarlamayla tanımlanır:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, n çift ise.\n     * tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n tek ise.\n     * Örneğin:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     * = 2 + 3 + 3 = 8\n     * Sizlere n sayısı verilir, Tribonacci dizisinin ilk n + 1 sayısını içeren bir liste döndürmelisiniz.\n     * Örnekler:\n     * tri(3) = [1, 3, 2, 8]\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/58", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * \n     * Verilen pozitif bir tamsayı n için, tek hanelerin çarpımını döndürün.\n     *     Tüm haneler çift ise 0 döndürün.\n     *     Örneğin:\n     * \n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n", "entry_point": "digits", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 5;\n        int x0 = Digits.digits(5);\n        int v0 = 5;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 54;\n        int x1 = Digits.digits(54);\n        int v1 = 5;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 120;\n        int x2 = Digits.digits(120);\n        int v2 = 1;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 5014;\n        int x3 = Digits.digits(5014);\n        int v3 = 5;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 98765;\n        int x4 = Digits.digits(98765);\n        int v4 = 315;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 5576543;\n        int x5 = Digits.digits(5576543);\n        int v5 = 2625;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 2468;\n        int x6 = Digits.digits(2468);\n        int v6 = 0;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif bir tamsayı n için, tek hanelerin çarpımını döndürün.\n     *     Tüm haneler çift ise 0 döndürün.\n     *     Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/59", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * \n     * Sadece köşeli parantez içeren bir dizeyi girdi olarak alan bir fonksiyon oluşturun.\n     *     Fonksiyon, en az bir parantezin iç içe olduğu geçerli bir parantez alt dizisi varsa True değerini döndürmelidir.\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    public static Boolean isNested(String string) {\n", "entry_point": "isNested", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"[[]]\";\n        Boolean x0 = IsNested.isNested(\"[[]]\");\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"[]]]]]]][[[[[]\";\n        Boolean x1 = IsNested.isNested(\"[]]]]]]][[[[[]\");\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"[][]\";\n        Boolean x2 = IsNested.isNested(\"[][]\");\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"[]\";\n        Boolean x3 = IsNested.isNested(\"[]\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"[[[[]]]]\";\n        Boolean x4 = IsNested.isNested(\"[[[[]]]]\");\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"[]]]]]]]]]]\";\n        Boolean x5 = IsNested.isNested(\"[]]]]]]]]]]\");\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"[][][[]]\";\n        Boolean x6 = IsNested.isNested(\"[][][[]]\");\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"[[]\";\n        Boolean x7 = IsNested.isNested(\"[[]\");\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"[]]\";\n        Boolean x8 = IsNested.isNested(\"[]]\");\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        String arg90 = \"[[]][[\";\n        Boolean x9 = IsNested.isNested(\"[[]][[\");\n        Boolean v9 = true;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        String arg100 = \"[[][]]\";\n        Boolean x10 = IsNested.isNested(\"[[][]]\");\n        Boolean v10 = true;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        String arg110 = \"\";\n        Boolean x11 = IsNested.isNested(\"\");\n        Boolean v11 = false;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        String arg120 = \"[[[[[[[[\";\n        Boolean x12 = IsNested.isNested(\"[[[[[[[[\");\n        Boolean v12 = false;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n        String arg130 = \"]]]]]]]]\";\n        Boolean x13 = IsNested.isNested(\"]]]]]]]]\");\n        Boolean v13 = false;\n        if (!(compare(x13, v13))) {\n            throw new java.lang.Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13);\n        }\n\n\n}\n}\n", "description": "\n     * Sadece köşeli parantez içeren bir dizeyi girdi olarak alan bir fonksiyon oluşturun.\n     *     Fonksiyon, en az bir parantezin iç içe olduğu geçerli bir parantez alt dizisi varsa True değerini döndürmelidir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/60", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \n     * Verilen bir sayı listesi var.\n     *     Verilen listedeki kareleri alınmış sayıların toplamını döndürmeniz gerekiyor,\n     *     listenin her elemanını önce üst int'e (Tavan) yuvarlayın.\n     *     Örnekler:\n     *     lst = [1,2,3] için çıktı 14 olmalıdır\n     *     lst = [1,4,9] için çıktı 98 olmalıdır\n     *     lst = [1,3,5,7] için çıktı 84 olmalıdır\n     *     lst = [1.4,4.2,0] için çıktı 29 olmalıdır\n     *     lst = [-2.4,1,1] için çıktı 6 olmalıdır\n     * \n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n", "entry_point": "sumSquares", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Number> arg00 = Arrays.asList(1, 2, 3);\n        int x0 = SumSquares.sumSquares(Arrays.asList(1, 2, 3));\n        int v0 = 14;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Number> arg10 = Arrays.asList(1.0, 2, 3);\n        int x1 = SumSquares.sumSquares(Arrays.asList(1.0, 2, 3));\n        int v1 = 14;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Number> arg20 = Arrays.asList(1, 3, 5, 7);\n        int x2 = SumSquares.sumSquares(Arrays.asList(1, 3, 5, 7));\n        int v2 = 84;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Number> arg30 = Arrays.asList(1.4, 4.2, 0);\n        int x3 = SumSquares.sumSquares(Arrays.asList(1.4, 4.2, 0));\n        int v3 = 29;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Number> arg40 = Arrays.asList(-2.4, 1, 1);\n        int x4 = SumSquares.sumSquares(Arrays.asList(-2.4, 1, 1));\n        int v4 = 6;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Number> arg50 = Arrays.asList(100, 1, 15, 2);\n        int x5 = SumSquares.sumSquares(Arrays.asList(100, 1, 15, 2));\n        int v5 = 10230;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Number> arg60 = Arrays.asList(10000, 10000);\n        int x6 = SumSquares.sumSquares(Arrays.asList(10000, 10000));\n        int v6 = 200000000;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Number> arg70 = Arrays.asList(-1.4, 4.6, 6.3);\n        int x7 = SumSquares.sumSquares(Arrays.asList(-1.4, 4.6, 6.3));\n        int v7 = 75;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Number> arg80 = Arrays.asList(-1.4, 17.9, 18.9, 19.9);\n        int x8 = SumSquares.sumSquares(Arrays.asList(-1.4, 17.9, 18.9, 19.9));\n        int v8 = 1086;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        List<Number> arg90 = Arrays.asList(0);\n        int x9 = SumSquares.sumSquares(Arrays.asList(0));\n        int v9 = 0;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        List<Number> arg100 = Arrays.asList(-1);\n        int x10 = SumSquares.sumSquares(Arrays.asList(-1));\n        int v10 = 1;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        List<Number> arg110 = Arrays.asList(-1, 1, 0);\n        int x11 = SumSquares.sumSquares(Arrays.asList(-1, 1, 0));\n        int v11 = 2;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir sayı listesi var.\n     *     Verilen listedeki kareleri alınmış sayıların toplamını döndürmeniz gerekiyor,\n     *     listenin her elemanını önce üst int'e (Tavan) yuvarlayın.\n     *     Örnekler:\n     *     lst = [1,2,3] için çıktı 14 olmalıdır\n     *     lst = [1,4,9] için çıktı 98 olmalıdır\n     *     lst = [1,3,5,7] için çıktı 84 olmalıdır\n     *     lst = [1.4,4.2,0] için çıktı 29 olmalıdır\n     *     lst = [-2.4,1,1] için çıktı 6 olmalıdır\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/61", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * \n     * Verilen bir dizinin son karakterinin alfabetik bir karakter olduğunu ve bir kelimenin parçası olmadığını kontrol eden bir işlev oluşturun ve True veya False döndürün.\n     * Not: \"kelime\", boşlukla ayrılmış karakter grubudur.\n     * \n     * Örnekler:\n     * \n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n", "entry_point": "checkIfLastCharIsALetter", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"apple\";\n        Boolean x0 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"apple\");\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"apple pi e\";\n        Boolean x1 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"apple pi e\");\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"eeeee\";\n        Boolean x2 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"eeeee\");\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"A\";\n        Boolean x3 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"A\");\n        Boolean v3 = true;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"Pumpkin pie \";\n        Boolean x4 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"Pumpkin pie \");\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"Pumpkin pie 1\";\n        Boolean x5 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"Pumpkin pie 1\");\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"\";\n        Boolean x6 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"\");\n        Boolean v6 = false;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"eeeee e \";\n        Boolean x7 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"eeeee e \");\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"apple pie\";\n        Boolean x8 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"apple pie\");\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        String arg90 = \"apple pi e \";\n        Boolean x9 = CheckIfLastCharIsALetter.checkIfLastCharIsALetter(\"apple pi e \");\n        Boolean v9 = false;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dizinin son karakterinin alfabetik bir karakter olduğunu ve bir kelimenin parçası olmadığını kontrol eden bir işlev oluşturun ve True veya False döndürün.\n     * Not: \"kelime\", boşlukla ayrılmış karakter grubudur.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/62", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * \n     * Bir fonksiyon oluşturun, bu fonksiyon, hemen öncesindeki elemandan büyük veya eşit olmayan bir elemanın en büyük dizinini döndürür. Böyle bir eleman yoksa -1 döndürür. Verilen dizi yinelenen değerler içermez.\n     * \n     * Örnekler:\n     * \n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n", "entry_point": "canArrange", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(1, 2, 4, 3, 5);\n        int x0 = CanArrange.canArrange(Arrays.asList(1, 2, 4, 3, 5));\n        int v0 = 3;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(1, 2, 4, 5);\n        int x1 = CanArrange.canArrange(Arrays.asList(1, 2, 4, 5));\n        int v1 = -1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10);\n        int x2 = CanArrange.canArrange(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10));\n        int v2 = 2;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(4, 8, 5, 7, 3);\n        int x3 = CanArrange.canArrange(Arrays.asList(4, 8, 5, 7, 3));\n        int v3 = 4;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList();\n        int x4 = CanArrange.canArrange(Arrays.asList());\n        int v4 = -1;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n\n}\n}\n", "description": "\n     * Bir fonksiyon oluşturun, bu fonksiyon, hemen öncesindeki elemandan büyük veya eşit olmayan bir elemanın en büyük dizinini döndürür. Böyle bir eleman yoksa -1 döndürür. Verilen dizi yinelenen değerler içermez.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * * \n     * Bir liste içindeki negatif sayıların en büyüğü 'a' ve pozitif sayıların en küçüğü 'b' olacak şekilde bir tuple (a, b) döndüren bir fonksiyon oluşturun. Eğer negatif veya pozitif sayı yoksa, None olarak döndürün.\n     * \n     * Örnekler:\n     * \n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n", "entry_point": "largestSmallestIntegers", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        List<Integer> x0 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7));\n        List<Integer> v0 = Arrays.asList(null, 1);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(2, 4, 1, 3, 5, 7, 0);\n        List<Integer> x1 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7, 0));\n        List<Integer> v1 = Arrays.asList(null, 1);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(1, 3, 2, 4, 5, 6, -2);\n        List<Integer> x2 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(1, 3, 2, 4, 5, 6, -2));\n        List<Integer> v2 = Arrays.asList(-2, 1);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(4, 5, 3, 6, 2, 7, -7);\n        List<Integer> x3 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(4, 5, 3, 6, 2, 7, -7));\n        List<Integer> v3 = Arrays.asList(-7, 2);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9);\n        List<Integer> x4 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9));\n        List<Integer> v4 = Arrays.asList(-9, 2);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList();\n        List<Integer> x5 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList());\n        List<Integer> v5 = Arrays.asList(null, null);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Object> arg60 = Arrays.asList(0);\n        List<Integer> x6 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(0));\n        List<Integer> v6 = Arrays.asList(null, null);\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        List<Object> arg70 = Arrays.asList(-1, -3, -5, -6);\n        List<Integer> x7 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6));\n        List<Integer> v7 = Arrays.asList(-1, null);\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        List<Object> arg80 = Arrays.asList(-1, -3, -5, -6, 0);\n        List<Integer> x8 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6, 0));\n        List<Integer> v8 = Arrays.asList(-1, null);\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        List<Object> arg90 = Arrays.asList(-6, -4, -4, -3, 1);\n        List<Integer> x9 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, 1));\n        List<Integer> v9 = Arrays.asList(-3, 1);\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        List<Object> arg100 = Arrays.asList(-6, -4, -4, -3, -100, 1);\n        List<Integer> x10 = LargestSmallestIntegers.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, -100, 1));\n        List<Integer> v10 = Arrays.asList(-3, 1);\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n\n}\n}\n", "description": "\n     * Bir liste içindeki negatif sayıların en büyüğü 'a' ve pozitif sayıların en küçüğü 'b' olacak şekilde bir tuple (a, b) döndüren bir fonksiyon oluşturun. Eğer negatif veya pozitif sayı yoksa, None olarak döndürün.\n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/64", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * \n     * Brezilya faktöriyeli şu şekilde tanımlanır:\n     *     brezilya_faktoriyel(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     *     burada n > 0\n     * \n     *     Örneğin:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n", "entry_point": "specialFactorial", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 4;\n        long x0 = SpecialFactorial.specialFactorial(4);\n        long v0 = 288;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 5;\n        long x1 = SpecialFactorial.specialFactorial(5);\n        long v1 = 34560;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 7;\n        long x2 = SpecialFactorial.specialFactorial(7);\n        long v2 = 125411328000L;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 1;\n        long x3 = SpecialFactorial.specialFactorial(1);\n        long v3 = 1;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Brezilya faktöriyeli şu şekilde tanımlanır:\n     *     brezilya_faktoriyel(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     *     burada n > 0\n     * \n     *     Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/65", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * \n     * Verilen bir cümleyi temsil eden bir dize alacaksınız,\n     *     cümle bir boşlukla ayrılmış bazı kelimeler içerir,\n     *     ve orijinal cümleden kelimeler içeren bir dize döndürmeniz gerekiyor,\n     *     uzunlukları asal sayı olan kelimeler,\n     *     yeni dizenin kelime sırası orijinaliyle aynı olmalıdır.\n     * \n     *     Örnek 1:\n     *         Girdi: sentence = \"This is a test\"\n     *         Çıktı: \"is\"\n     * \n     *     Örnek 2:\n     *         Girdi: sentence = \"lets go for swimming\"\n     *         Çıktı: \"go for\"\n     * \n     *     Kısıtlamalar:\n     *         * 1 <= len(sentence) <= 100\n     *         * cümle sadece harfler içerir\n     * \n     *\n     */\n    public static String wordsInSentence(String sentence) {\n", "entry_point": "wordsInSentence", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"This is a test\";\n        String x0 = WordsInSentence.wordsInSentence(\"This is a test\");\n        String v0 = \"is\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"lets go for swimming\";\n        String x1 = WordsInSentence.wordsInSentence(\"lets go for swimming\");\n        String v1 = \"go for\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"there is no place available here\";\n        String x2 = WordsInSentence.wordsInSentence(\"there is no place available here\");\n        String v2 = \"there is no place\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"Hi I am Hussein\";\n        String x3 = WordsInSentence.wordsInSentence(\"Hi I am Hussein\");\n        String v3 = \"Hi am Hussein\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"go for it\";\n        String x4 = WordsInSentence.wordsInSentence(\"go for it\");\n        String v4 = \"go for it\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"here\";\n        String x5 = WordsInSentence.wordsInSentence(\"here\");\n        String v5 = \"\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"here is\";\n        String x6 = WordsInSentence.wordsInSentence(\"here is\");\n        String v6 = \"is\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir cümleyi temsil eden bir dize alacaksınız,\n     *     cümle bir boşlukla ayrılmış bazı kelimeler içerir,\n     *     ve orijinal cümleden kelimeler içeren bir dize döndürmeniz gerekiyor,\n     *     uzunlukları asal sayı olan kelimeler,\n     *     yeni dizenin kelime sırası orijinaliyle aynı olmalıdır.\n     * \n     *     Örnek 1:\n     *         Girdi: sentence = \"This is a test\"\n     *         Çıktı: \"is\"\n     * \n     *     Örnek 2:\n     *         Girdi: sentence = \"lets go for swimming\"\n     *         Çıktı: \"go for\"\n     * \n     *     Kısıtlamalar:\n     *         * 1 <= len(sentence) <= 100\n     *         * cümle sadece harfler içerir\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * \n     * Göreviniz, ifadeyi basitleştirecek bir işlevi uygulamaktır: x * n. İşlev, x * n'nin bir tam sayıya değerlendirilmesi durumunda True ve aksi takdirde False döndürür. Hem x hem de n, bir kesirin dize gösterimidir ve şu formata sahiptir: <pay>/<payda> pay ve payda pozitif tam sayılardır.\n     * \n     * x ve n'nin geçerli kesirler olduğunu ve paydasının sıfır olmadığını varsayabilirsiniz.\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n", "entry_point": "simplify", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"1/5\";\n        String arg01 = \"5/1\";\n        Boolean x0 = Simplify.simplify(\"1/5\", \"5/1\");\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"1/6\";\n        String arg11 = \"2/1\";\n        Boolean x1 = Simplify.simplify(\"1/6\", \"2/1\");\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"5/1\";\n        String arg21 = \"3/1\";\n        Boolean x2 = Simplify.simplify(\"5/1\", \"3/1\");\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"7/10\";\n        String arg31 = \"10/2\";\n        Boolean x3 = Simplify.simplify(\"7/10\", \"10/2\");\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"2/10\";\n        String arg41 = \"50/10\";\n        Boolean x4 = Simplify.simplify(\"2/10\", \"50/10\");\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"7/2\";\n        String arg51 = \"4/2\";\n        Boolean x5 = Simplify.simplify(\"7/2\", \"4/2\");\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"11/6\";\n        String arg61 = \"6/1\";\n        Boolean x6 = Simplify.simplify(\"11/6\", \"6/1\");\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"2/3\";\n        String arg71 = \"5/2\";\n        Boolean x7 = Simplify.simplify(\"2/3\", \"5/2\");\n        Boolean v7 = false;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"5/2\";\n        String arg81 = \"3/5\";\n        Boolean x8 = Simplify.simplify(\"5/2\", \"3/5\");\n        Boolean v8 = false;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        String arg90 = \"2/4\";\n        String arg91 = \"8/4\";\n        Boolean x9 = Simplify.simplify(\"2/4\", \"8/4\");\n        Boolean v9 = true;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        String arg100 = \"2/4\";\n        String arg101 = \"4/2\";\n        Boolean x10 = Simplify.simplify(\"2/4\", \"4/2\");\n        Boolean v10 = true;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        String arg110 = \"1/5\";\n        String arg111 = \"5/1\";\n        Boolean x11 = Simplify.simplify(\"1/5\", \"5/1\");\n        Boolean v11 = true;\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        String arg120 = \"1/5\";\n        String arg121 = \"1/5\";\n        Boolean x12 = Simplify.simplify(\"1/5\", \"1/5\");\n        Boolean v12 = false;\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n\n}\n}\n", "description": "\n     * Göreviniz, ifadeyi basitleştirecek bir işlevi uygulamaktır: x * n. İşlev, x * n'nin bir tam sayıya değerlendirilmesi durumunda True ve aksi takdirde False döndürür. Hem x hem de n, bir kesirin dize gösterimidir ve şu formata sahiptir: <pay>/<payda> pay ve payda pozitif tam sayılardır.\n     * \n     * x ve n'nin geçerli kesirler olduğunu ve paydasının sıfır olmadığını varsayabilirsiniz.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/67", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * \n     * Verilen tamsayı listesini basamaklarının toplamına göre artan sırayla sıralayan bir fonksiyon yazın.\n     *     Not: Eğer basamaklarının toplamı benzer olan birden fazla öğe varsa,\n     *     bunları orijinal listedeki dizinlerine göre sıralayın.\n     * \n     *     Örneğin:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n", "entry_point": "orderByPoints", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(1, 11, -1, -11, -12);\n        List<Object> x0 = OrderByPoints.orderByPoints(Arrays.asList(1, 11, -1, -11, -12));\n        List<Object> v0 = Arrays.asList(-1, -11, 1, -12, 11);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46);\n        List<Object> x1 = OrderByPoints.orderByPoints(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46));\n        List<Object> v1 = Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList();\n        List<Object> x2 = OrderByPoints.orderByPoints(Arrays.asList());\n        List<Object> v2 = Arrays.asList();\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3);\n        List<Object> x3 = OrderByPoints.orderByPoints(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3));\n        List<Object> v3 = Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54);\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n        List<Object> x4 = OrderByPoints.orderByPoints(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));\n        List<Object> v4 = Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9);\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList(0, 6, 6, -76, -21, 23, 4);\n        List<Object> x5 = OrderByPoints.orderByPoints(Arrays.asList(0, 6, 6, -76, -21, 23, 4));\n        List<Object> v5 = Arrays.asList(-76, -21, 0, 4, 23, 6, 6);\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen tamsayı listesini basamaklarının toplamına göre artan sırayla sıralayan bir fonksiyon yazın.\n     *     Not: Eğer basamaklarının toplamı benzer olan birden fazla öğe varsa,\n     *     bunları orijinal listedeki dizinlerine göre sıralayın.\n     * \n     *     Örneğin:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/68", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * \n     * \"Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\" \n     * \n     * \"Bir dizi sayı girdisi alan ve 10'dan büyük ve sayının ilk ve son rakamları tek (1, 3, 5, 7, 9) olan dizideki eleman sayısını döndüren bir işlev yazın.\n     * Örneğin:\"\n     * \n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n", "entry_point": "specialfilter", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList(5, -2, 1, -5);\n        int x0 = Specialfilter.specialfilter(Arrays.asList(5, -2, 1, -5));\n        int v0 = 0;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(15, -73, 14, -15);\n        int x1 = Specialfilter.specialfilter(Arrays.asList(15, -73, 14, -15));\n        int v1 = 1;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        int x2 = Specialfilter.specialfilter(Arrays.asList(33, -2, -3, 45, 21, 109));\n        int v2 = 2;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(43, -12, 93, 125, 121, 109);\n        int x3 = Specialfilter.specialfilter(Arrays.asList(43, -12, 93, 125, 121, 109));\n        int v3 = 4;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(71, -2, -33, 75, 21, 19);\n        int x4 = Specialfilter.specialfilter(Arrays.asList(71, -2, -33, 75, 21, 19));\n        int v4 = 3;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList(1);\n        int x5 = Specialfilter.specialfilter(Arrays.asList(1));\n        int v5 = 0;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Object> arg60 = Arrays.asList();\n        int x6 = Specialfilter.specialfilter(Arrays.asList());\n        int v6 = 0;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * \"Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\" \n     * \n     * \"Bir dizi sayı girdisi alan ve 10'dan büyük ve sayının ilk ve son rakamları tek (1, 3, 5, 7, 9) olan dizideki eleman sayısını döndüren bir işlev yazın.\n     * Örneğin:\"\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/69", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * \n     * Verilen bir pozitif tamsayı n. Uzunluğu n olan bir tamsayı dizisi a oluşturmanız gerekiyor.\n     *         Her i (1 ≤ i ≤ n) için, a[i] = i * i - i + 1 değeridir.\n     *         i < j < k olan a[i], a[j] ve a[k] üçlüsünün sayısını döndürün, \n     *     ve a[i] + a[j] + a[k] 3'ün katıdır.\n     * \n     *     Örnek :\n     *         Girdi: n = 5\n     *         Çıktı: 1\n     *         Açıklama: \n     *         a = [1, 3, 7, 13, 21]\n     *         Tek geçerli üçlü (1, 7, 13) dir.\n     * \n     *\n     */\n    public static int getMaxTriples(int n) {\n", "entry_point": "getMaxTriples", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 5;\n        int x0 = GetMaxTriples.getMaxTriples(5);\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 6;\n        int x1 = GetMaxTriples.getMaxTriples(6);\n        int v1 = 4;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 10;\n        int x2 = GetMaxTriples.getMaxTriples(10);\n        int v2 = 36;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 100;\n        int x3 = GetMaxTriples.getMaxTriples(100);\n        int v3 = 53361;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir pozitif tamsayı n. Uzunluğu n olan bir tamsayı dizisi a oluşturmanız gerekiyor.\n     *         Her i (1 ≤ i ≤ n) için, a[i] = i * i - i + 1 değeridir.\n     *         i < j < k olan a[i], a[j] ve a[k] üçlüsünün sayısını döndürün, \n     *     ve a[i] + a[j] + a[k] 3'ün katıdır.\n     * \n     *     Örnek :\n     *         Girdi: n = 5\n     *         Çıktı: 1\n     *         Açıklama: \n     *         a = [1, 3, 7, 13, 21]\n     *         Tek geçerli üçlü (1, 7, 13) dir.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/70", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * \n     * Güneş Sistemi'nde sekiz gezegen vardır: Güneş'e en yakın olanı Merkür'dür, \n     *     sonra Venüs, sonra Dünya, Mars, Jüpiter, Satürn, Uranüs, Neptün.\n     *     İki gezegen adı olan planet1 ve planet2 olarak iki dize alan bir işlev yazın. \n     *     İşlev, planet1'in yörüngesi ile planet2'nin yörüngesi arasında bulunan tüm gezegenleri \n     *     içeren bir tuple döndürmelidir. Güneşe en yakın olan gezegenlere göre sıralanmalıdır. \n     *     İşlev, planet1 veya planet2 yanlış gezegen adları ise boş bir tuple döndürmelidir. \n     *     Örnekler\n     * \n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n", "entry_point": "bf", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Jupiter\";\n        String arg01 = \"Neptune\";\n        List<Object> x0 = Bf.bf(\"Jupiter\", \"Neptune\");\n        List<Object> v0 = Arrays.asList(\"Saturn\", \"Uranus\");\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Earth\";\n        String arg11 = \"Mercury\";\n        List<Object> x1 = Bf.bf(\"Earth\", \"Mercury\");\n        List<Object> v1 = Arrays.asList(\"Venus\");\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"Mercury\";\n        String arg21 = \"Uranus\";\n        List<Object> x2 = Bf.bf(\"Mercury\", \"Uranus\");\n        List<Object> v2 = Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"Neptune\";\n        String arg31 = \"Venus\";\n        List<Object> x3 = Bf.bf(\"Neptune\", \"Venus\");\n        List<Object> v3 = Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"Earth\";\n        String arg41 = \"Earth\";\n        List<Object> x4 = Bf.bf(\"Earth\", \"Earth\");\n        List<Object> v4 = Arrays.asList();\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"Mars\";\n        String arg51 = \"Earth\";\n        List<Object> x5 = Bf.bf(\"Mars\", \"Earth\");\n        List<Object> v5 = Arrays.asList();\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"Jupiter\";\n        String arg61 = \"Makemake\";\n        List<Object> x6 = Bf.bf(\"Jupiter\", \"Makemake\");\n        List<Object> v6 = Arrays.asList();\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Güneş Sistemi'nde sekiz gezegen vardır: Güneş'e en yakın olanı Merkür'dür, \n     *     sonra Venüs, sonra Dünya, Mars, Jüpiter, Satürn, Uranüs, Neptün.\n     *     İki gezegen adı olan planet1 ve planet2 olarak iki dize alan bir işlev yazın. \n     *     İşlev, planet1'in yörüngesi ile planet2'nin yörüngesi arasında bulunan tüm gezegenleri \n     *     içeren bir tuple döndürmelidir. Güneşe en yakın olan gezegenlere göre sıralanmalıdır. \n     *     İşlev, planet1 veya planet2 yanlış gezegen adları ise boş bir tuple döndürmelidir. \n     *     Örnekler\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/71", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * \n     * Eğer n bir asal sayı ise x'in değerini döndüren basit bir program ve aksi takdirde y'nin değerini döndüren bir program. \n     * \n     * Örnekler:\n     * \n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    public static int xOrY(int n, int x, int y) {\n", "entry_point": "xOrY", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 7;\n        int arg01 = 34;\n        int arg02 = 12;\n        int x0 = XOrY.xOrY(7, 34, 12);\n        int v0 = 34;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 15;\n        int arg11 = 8;\n        int arg12 = 5;\n        int x1 = XOrY.xOrY(15, 8, 5);\n        int v1 = 5;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 3;\n        int arg21 = 33;\n        int arg22 = 5212;\n        int x2 = XOrY.xOrY(3, 33, 5212);\n        int v2 = 33;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 1259;\n        int arg31 = 3;\n        int arg32 = 52;\n        int x3 = XOrY.xOrY(1259, 3, 52);\n        int v3 = 3;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 7919;\n        int arg41 = -1;\n        int arg42 = 12;\n        int x4 = XOrY.xOrY(7919, -1, 12);\n        int v4 = -1;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 3609;\n        int arg51 = 1245;\n        int arg52 = 583;\n        int x5 = XOrY.xOrY(3609, 1245, 583);\n        int v5 = 583;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 91;\n        int arg61 = 56;\n        int arg62 = 129;\n        int x6 = XOrY.xOrY(91, 56, 129);\n        int v6 = 129;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 6;\n        int arg71 = 34;\n        int arg72 = 1234;\n        int x7 = XOrY.xOrY(6, 34, 1234);\n        int v7 = 1234;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 1;\n        int arg81 = 2;\n        int arg82 = 0;\n        int x8 = XOrY.xOrY(1, 2, 0);\n        int v8 = 0;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 2;\n        int arg91 = 2;\n        int arg92 = 0;\n        int x9 = XOrY.xOrY(2, 2, 0);\n        int v9 = 2;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n\n}\n}\n", "description": "\n     * Eğer n bir asal sayı ise x'in değerini döndüren basit bir program ve aksi takdirde y'nin değerini döndüren bir program. \n     * \n     * Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/72", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * \n     * Verilen sayı listesinde, tek olan sayıların karelerinin toplamını döndürün. Negatif veya tam sayı olmayan sayıları yok sayın.\n     * \n     *     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     *     double_the_difference([-1, -2, 0]) == 0\n     *     double_the_difference([9, -2]) == 81\n     *     double_the_difference([0]) == 0\n     *     \n     *     Giriş listesi boş ise, 0 döndürün.\n     * \n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n", "entry_point": "doubleTheDifference", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Object> arg00 = Arrays.asList();\n        int x0 = DoubleTheDifference.doubleTheDifference(Arrays.asList());\n        int v0 = 0;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Object> arg10 = Arrays.asList(5, 4);\n        int x1 = DoubleTheDifference.doubleTheDifference(Arrays.asList(5, 4));\n        int v1 = 25;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Object> arg20 = Arrays.asList(0.1, 0.2, 0.3);\n        int x2 = DoubleTheDifference.doubleTheDifference(Arrays.asList(0.1, 0.2, 0.3));\n        int v2 = 0;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        List<Object> arg30 = Arrays.asList(-10, -20, -30);\n        int x3 = DoubleTheDifference.doubleTheDifference(Arrays.asList(-10, -20, -30));\n        int v3 = 0;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        List<Object> arg40 = Arrays.asList(-1, -2, 8);\n        int x4 = DoubleTheDifference.doubleTheDifference(Arrays.asList(-1, -2, 8));\n        int v4 = 0;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        List<Object> arg50 = Arrays.asList(0.2, 3, 5);\n        int x5 = DoubleTheDifference.doubleTheDifference(Arrays.asList(0.2, 3, 5));\n        int v5 = 34;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        List<Object> arg60 = Arrays.asList(-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99);\n        int x6 = DoubleTheDifference.doubleTheDifference(Arrays.asList(-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99));\n        int v6 = 166650;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen sayı listesinde, tek olan sayıların karelerinin toplamını döndürün. Negatif veya tam sayı olmayan sayıları yok sayın.\n     * \n     *     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     *     double_the_difference([-1, -2, 0]) == 0\n     *     double_the_difference([9, -2]) == 81\n     *     double_the_difference([0]) == 0\n     *     \n     *     Giriş listesi boş ise, 0 döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * \n     * Verilen bir sınıf adı (bir dize) ve uzantıların bir listesi verilecektir.\n     *     Uzantılar, sınıfa ek olarak yüklenecek diğer sınıfları yüklemek için kullanılacaktır. Uzantının gücü şöyledir: CAP, uzantının adındaki büyük harf sayısı olsun ve SM, küçük harf sayısı olsun, güç, CAP - SM kesriyle verilir. En güçlü uzantıyı bulmalı ve bu biçimde bir dize döndürmelisiniz: SınıfAdı.EnGüçlüUzantıAdı.\n     *     Aynı güce sahip iki veya daha fazla uzantı varsa, listede önce geleni seçmelisiniz.\n     *     Örneğin, \"Slices\" olarak verilirse ve bir uzantı listesi verilirse: ['SErviNGSliCes', 'Cheese', 'StuFfed'] o zaman 'SErviNGSliCes' en güçlü uzantı olduğu için 'Slices.SErviNGSliCes' döndürmelisiniz (gücü -1'dir).\n     *     Örnek:\n     * \n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n", "entry_point": "strongestExtension", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Watashi\";\n        List<String> arg01 = Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\");\n        String x0 = StrongestExtension.strongestExtension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\"));\n        String v0 = \"Watashi.eIGHt8OKe\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Boku123\";\n        List<String> arg11 = Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\");\n        String x1 = StrongestExtension.strongestExtension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"));\n        String v1 = \"Boku123.YEs.WeCaNe\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"__YESIMHERE\";\n        List<String> arg21 = Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\");\n        String x2 = StrongestExtension.strongestExtension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"));\n        String v2 = \"__YESIMHERE.NuLl__\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"K\";\n        List<String> arg31 = Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\");\n        String x3 = StrongestExtension.strongestExtension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"));\n        String v3 = \"K.TAR\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"__HAHA\";\n        List<String> arg41 = Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\");\n        String x4 = StrongestExtension.strongestExtension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\"));\n        String v4 = \"__HAHA.123\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"YameRore\";\n        List<String> arg51 = Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\");\n        String x5 = StrongestExtension.strongestExtension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"));\n        String v5 = \"YameRore.okIWILL123\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"finNNalLLly\";\n        List<String> arg61 = Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\");\n        String x6 = StrongestExtension.strongestExtension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\"));\n        String v6 = \"finNNalLLly.WoW\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"_\";\n        List<String> arg71 = Arrays.asList(\"Bb\", \"91245\");\n        String x7 = StrongestExtension.strongestExtension(\"_\", Arrays.asList(\"Bb\", \"91245\"));\n        String v7 = \"_.Bb\";\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        String arg80 = \"Sp\";\n        List<String> arg81 = Arrays.asList(\"671235\", \"Bb\");\n        String x8 = StrongestExtension.strongestExtension(\"Sp\", Arrays.asList(\"671235\", \"Bb\"));\n        String v8 = \"Sp.671235\";\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir sınıf adı (bir dize) ve uzantıların bir listesi verilecektir.\n     *     Uzantılar, sınıfa ek olarak yüklenecek diğer sınıfları yüklemek için kullanılacaktır. Uzantının gücü şöyledir: CAP, uzantının adındaki büyük harf sayısı olsun ve SM, küçük harf sayısı olsun, güç, CAP - SM kesriyle verilir. En güçlü uzantıyı bulmalı ve bu biçimde bir dize döndürmelisiniz: SınıfAdı.EnGüçlüUzantıAdı.\n     *     Aynı güce sahip iki veya daha fazla uzantı varsa, listede önce geleni seçmelisiniz.\n     *     Örneğin, \"Slices\" olarak verilirse ve bir uzantı listesi verilirse: ['SErviNGSliCes', 'Cheese', 'StuFfed'] o zaman 'SErviNGSliCes' en güçlü uzantı olduğu için 'Slices.SErviNGSliCes' döndürmelisiniz (gücü -1'dir).\n     *     Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * \n     * Sana 2 kelime verilecek. İkinci kelime veya herhangi bir rotasyonu birinci kelimenin bir alt dizgisi ise True döndürmeniz gerekiyor.\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n", "entry_point": "cycpatternCheck", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"xyzw\";\n        String arg01 = \"xyw\";\n        Boolean x0 = CycpatternCheck.cycpatternCheck(\"xyzw\", \"xyw\");\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"yello\";\n        String arg11 = \"ell\";\n        Boolean x1 = CycpatternCheck.cycpatternCheck(\"yello\", \"ell\");\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"whattup\";\n        String arg21 = \"ptut\";\n        Boolean x2 = CycpatternCheck.cycpatternCheck(\"whattup\", \"ptut\");\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"efef\";\n        String arg31 = \"fee\";\n        Boolean x3 = CycpatternCheck.cycpatternCheck(\"efef\", \"fee\");\n        Boolean v3 = true;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"abab\";\n        String arg41 = \"aabb\";\n        Boolean x4 = CycpatternCheck.cycpatternCheck(\"abab\", \"aabb\");\n        Boolean v4 = false;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"winemtt\";\n        String arg51 = \"tinem\";\n        Boolean x5 = CycpatternCheck.cycpatternCheck(\"winemtt\", \"tinem\");\n        Boolean v5 = true;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n\n}\n}\n", "description": "\n     * Sana 2 kelime verilecek. İkinci kelime veya herhangi bir rotasyonu birinci kelimenin bir alt dizgisi ise True döndürmeniz gerekiyor.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/75", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * \n     * Verilen pozitif bir tamsayıyı, Roma rakamı karşılığı olarak bir dize olarak elde edin ve küçük harf olarak geri döndürün.\n     *     Kısıtlamalar: 1 <= num <= 1000\n     * \n     *     Örnekler:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n", "entry_point": "intToMiniRoman", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 19;\n        String x0 = IntToMiniRoman.intToMiniRoman(19);\n        String v0 = \"xix\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 152;\n        String x1 = IntToMiniRoman.intToMiniRoman(152);\n        String v1 = \"clii\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 251;\n        String x2 = IntToMiniRoman.intToMiniRoman(251);\n        String v2 = \"ccli\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 426;\n        String x3 = IntToMiniRoman.intToMiniRoman(426);\n        String v3 = \"cdxxvi\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 500;\n        String x4 = IntToMiniRoman.intToMiniRoman(500);\n        String v4 = \"d\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 1;\n        String x5 = IntToMiniRoman.intToMiniRoman(1);\n        String v5 = \"i\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 4;\n        String x6 = IntToMiniRoman.intToMiniRoman(4);\n        String v6 = \"iv\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 43;\n        String x7 = IntToMiniRoman.intToMiniRoman(43);\n        String v7 = \"xliii\";\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 90;\n        String x8 = IntToMiniRoman.intToMiniRoman(90);\n        String v8 = \"xc\";\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 94;\n        String x9 = IntToMiniRoman.intToMiniRoman(94);\n        String v9 = \"xciv\";\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        int arg100 = 532;\n        String x10 = IntToMiniRoman.intToMiniRoman(532);\n        String v10 = \"dxxxii\";\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n        int arg110 = 900;\n        String x11 = IntToMiniRoman.intToMiniRoman(900);\n        String v11 = \"cm\";\n        if (!(compare(x11, v11))) {\n            throw new java.lang.Exception(\"Exception -- test case 11 did not pass. x11 = \" + x11);\n        }\n\n        int arg120 = 994;\n        String x12 = IntToMiniRoman.intToMiniRoman(994);\n        String v12 = \"cmxciv\";\n        if (!(compare(x12, v12))) {\n            throw new java.lang.Exception(\"Exception -- test case 12 did not pass. x12 = \" + x12);\n        }\n\n        int arg130 = 1000;\n        String x13 = IntToMiniRoman.intToMiniRoman(1000);\n        String v13 = \"m\";\n        if (!(compare(x13, v13))) {\n            throw new java.lang.Exception(\"Exception -- test case 13 did not pass. x13 = \" + x13);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen pozitif bir tamsayıyı, Roma rakamı karşılığı olarak bir dize olarak elde edin ve küçük harf olarak geri döndürün.\n     *     Kısıtlamalar: 1 <= num <= 1000\n     * \n     *     Örnekler:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/76", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * \n     * Üçgenin üç kenarının uzunlukları verildiğinde, eğer üç kenar bir dik üçgen oluşturuyorsa True, aksi takdirde False döndürün. Bir dik üçgen, bir açısının dik açı veya 90 derece olduğu üçgendir. Örnek:\n     * \n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n", "entry_point": "rightAngleTriangle", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 3;\n        int arg01 = 4;\n        int arg02 = 5;\n        Boolean x0 = RightAngleTriangle.rightAngleTriangle(3, 4, 5);\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 1;\n        int arg11 = 2;\n        int arg12 = 3;\n        Boolean x1 = RightAngleTriangle.rightAngleTriangle(1, 2, 3);\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 10;\n        int arg21 = 6;\n        int arg22 = 8;\n        Boolean x2 = RightAngleTriangle.rightAngleTriangle(10, 6, 8);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 2;\n        int arg31 = 2;\n        int arg32 = 2;\n        Boolean x3 = RightAngleTriangle.rightAngleTriangle(2, 2, 2);\n        Boolean v3 = false;\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        int arg40 = 7;\n        int arg41 = 24;\n        int arg42 = 25;\n        Boolean x4 = RightAngleTriangle.rightAngleTriangle(7, 24, 25);\n        Boolean v4 = true;\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        int arg50 = 10;\n        int arg51 = 5;\n        int arg52 = 7;\n        Boolean x5 = RightAngleTriangle.rightAngleTriangle(10, 5, 7);\n        Boolean v5 = false;\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        int arg60 = 5;\n        int arg61 = 12;\n        int arg62 = 13;\n        Boolean x6 = RightAngleTriangle.rightAngleTriangle(5, 12, 13);\n        Boolean v6 = true;\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        int arg70 = 15;\n        int arg71 = 8;\n        int arg72 = 17;\n        Boolean x7 = RightAngleTriangle.rightAngleTriangle(15, 8, 17);\n        Boolean v7 = true;\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n        int arg80 = 48;\n        int arg81 = 55;\n        int arg82 = 73;\n        Boolean x8 = RightAngleTriangle.rightAngleTriangle(48, 55, 73);\n        Boolean v8 = true;\n        if (!(compare(x8, v8))) {\n            throw new java.lang.Exception(\"Exception -- test case 8 did not pass. x8 = \" + x8);\n        }\n\n        int arg90 = 1;\n        int arg91 = 1;\n        int arg92 = 1;\n        Boolean x9 = RightAngleTriangle.rightAngleTriangle(1, 1, 1);\n        Boolean v9 = false;\n        if (!(compare(x9, v9))) {\n            throw new java.lang.Exception(\"Exception -- test case 9 did not pass. x9 = \" + x9);\n        }\n\n        int arg100 = 2;\n        int arg101 = 2;\n        int arg102 = 10;\n        Boolean x10 = RightAngleTriangle.rightAngleTriangle(2, 2, 10);\n        Boolean v10 = false;\n        if (!(compare(x10, v10))) {\n            throw new java.lang.Exception(\"Exception -- test case 10 did not pass. x10 = \" + x10);\n        }\n\n\n}\n}\n", "description": "\n     * Üçgenin üç kenarının uzunlukları verildiğinde, eğer üç kenar bir dik üçgen oluşturuyorsa True, aksi takdirde False döndürün. Bir dik üçgen, bir açısının dik açı veya 90 derece olduğu üçgendir. Örnek:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/77", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * \n     * Verilen bir dize s.\n     *     Eğer s[i] bir harf ise, büyük harfse küçük harfe veya tam tersine çevirin,\n     *     aksi takdirde olduğu gibi bırakın.\n     *     Eğer dize harf içermiyorsa, diziyi ters çevirin.\n     *     Fonksiyon sonuçlanan diziyi döndürmelidir.\n     *     Örnekler\n     * \n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n", "entry_point": "solve", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"AsDf\";\n        String x0 = Solve.solve(\"AsDf\");\n        String v0 = \"aSdF\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"1234\";\n        String x1 = Solve.solve(\"1234\");\n        String v1 = \"4321\";\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"ab\";\n        String x2 = Solve.solve(\"ab\");\n        String v2 = \"AB\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"#a@C\";\n        String x3 = Solve.solve(\"#a@C\");\n        String v3 = \"#A@c\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n        String arg40 = \"#AsdfW^45\";\n        String x4 = Solve.solve(\"#AsdfW^45\");\n        String v4 = \"#aSDFw^45\";\n        if (!(compare(x4, v4))) {\n            throw new java.lang.Exception(\"Exception -- test case 4 did not pass. x4 = \" + x4);\n        }\n\n        String arg50 = \"#6@2\";\n        String x5 = Solve.solve(\"#6@2\");\n        String v5 = \"2@6#\";\n        if (!(compare(x5, v5))) {\n            throw new java.lang.Exception(\"Exception -- test case 5 did not pass. x5 = \" + x5);\n        }\n\n        String arg60 = \"#$a^D\";\n        String x6 = Solve.solve(\"#$a^D\");\n        String v6 = \"#$A^d\";\n        if (!(compare(x6, v6))) {\n            throw new java.lang.Exception(\"Exception -- test case 6 did not pass. x6 = \" + x6);\n        }\n\n        String arg70 = \"#ccc\";\n        String x7 = Solve.solve(\"#ccc\");\n        String v7 = \"#CCC\";\n        if (!(compare(x7, v7))) {\n            throw new java.lang.Exception(\"Exception -- test case 7 did not pass. x7 = \" + x7);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dize s.\n     *     Eğer s[i] bir harf ise, büyük harfse küçük harfe veya tam tersine çevirin,\n     *     aksi takdirde olduğu gibi bırakın.\n     *     Eğer dize harf içermiyorsa, diziyi ters çevirin.\n     *     Fonksiyon sonuçlanan diziyi döndürmelidir.\n     *     Örnekler\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * \n     * Verilen bir dize 'text' için md5 karma eşdeğer dize değerini döndürün.\n     *     Eğer 'text' boş bir dize ise, null değerini döndürün.\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n", "entry_point": "stringToMd5", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Hello world\";\n        String x0 = StringToMd5.stringToMd5(\"Hello world\");\n        String v0 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"\";\n        String x1 = StringToMd5.stringToMd5(\"\");\n        String v1 = null;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"A B C\";\n        String x2 = StringToMd5.stringToMd5(\"A B C\");\n        String v2 = \"0ef78513b0cb8cef12743f5aeb35f888\";\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        String arg30 = \"password\";\n        String x3 = StringToMd5.stringToMd5(\"password\");\n        String v3 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen bir dize 'text' için md5 karma eşdeğer dize değerini döndürün.\n     *     Eğer 'text' boş bir dize ise, null değerini döndürün.\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
{"task_id": "java/79", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * \n     * Verilen iki pozitif tamsayı a ve b arasındaki çift rakamları artan sırada döndürün.\n     * \n     * Örnek olarak:\n     * \n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n", "entry_point": "generateIntegers", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 2;\n        int arg01 = 10;\n        List<Object> x0 = GenerateIntegers.generateIntegers(2, 10);\n        List<Object> v0 = Arrays.asList(2, 4, 6, 8);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 10;\n        int arg11 = 2;\n        List<Object> x1 = GenerateIntegers.generateIntegers(10, 2);\n        List<Object> v1 = Arrays.asList(2, 4, 6, 8);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 132;\n        int arg21 = 2;\n        List<Object> x2 = GenerateIntegers.generateIntegers(132, 2);\n        List<Object> v2 = Arrays.asList(2, 4, 6, 8);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n        int arg30 = 17;\n        int arg31 = 89;\n        List<Object> x3 = GenerateIntegers.generateIntegers(17, 89);\n        List<Object> v3 = Arrays.asList();\n        if (!(compare(x3, v3))) {\n            throw new java.lang.Exception(\"Exception -- test case 3 did not pass. x3 = \" + x3);\n        }\n\n\n}\n}\n", "description": "\n     * Verilen iki pozitif tamsayı a ve b arasındaki çift rakamları artan sırada döndürün.\n     * \n     * Örnek olarak:\n     * ", "language": "java", "canonical_solution": NaN, "natural_language": "Turkish"}
