{"task_id": "scala/0", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * קיבלת רשימה של פעולות הפקדה ומשיכה בחשבון בנק שמתחיל עם מאזן שווה לאפס. המטרה שלך היא לזהות אם בכל נקודה המאזן של החשבון יורד מתחת לאפס, ובאותה נקודה הפונקציה צריכה להחזיר True. אחרת זה צריך להחזיר False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    def belowZero(operations : List[Any]) : Boolean = {\n", "entry_point": "belowZero", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Boolean = belowZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, -3, 1, 2, -3)\n    var x1 : Boolean = belowZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 2, -4, 5, 6)\n    var x2 : Boolean = belowZero(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, -1, 2, -2, 5, -5, 4, -4)\n    var x3 : Boolean = belowZero(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, -1, 2, -2, 5, -5, 4, -5)\n    var x4 : Boolean = belowZero(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1, -2, 2, -2, 5, -5, 4, -4)\n    var x5 : Boolean = belowZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "קיבלת רשימה של פעולות הפקדה ומשיכה בחשבון בנק שמתחיל עם מאזן שווה לאפס. המטרה שלך היא לזהות אם בכל נקודה המאזן של החשבון יורד מתחת לאפס, ובאותה נקודה הפונקציה צריכה להחזיר True. אחרת זה צריך להחזיר False.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/1", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * עבור רשימת מספרים נתונה, החזר צמד של סכום וכפל כל המספרים ברשימה.\n     * סכום ריק צריך להיות שווה ל-0 וכפל ריק צריך להיות שווה ל-1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    def sumProduct(numbers : List[Any]) : List[Int] = {\n", "entry_point": "sumProduct", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : List[Int] = sumProduct(arg00)\n    var v0 : List[Int] = List(0, 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 1, 1)\n    var x1 : List[Int] = sumProduct(arg10)\n    var v1 : List[Int] = List(3, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(100, 0)\n    var x2 : List[Int] = sumProduct(arg20)\n    var v2 : List[Int] = List(100, 0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(3, 5, 7)\n    var x3 : List[Int] = sumProduct(arg30)\n    var v3 : List[Int] = List(15, 105)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(10)\n    var x4 : List[Int] = sumProduct(arg40)\n    var v4 : List[Int] = List(10, 10)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "עבור רשימת מספרים נתונה, החזר צמד של סכום וכפל כל המספרים ברשימה.\nסכום ריק צריך להיות שווה ל-0 וכפל ריק צריך להיות שווה ל-1.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/2", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * הקלט הוא שני מחרוזות a ו-b המורכבות רק מ-1 ו-0.\n     * בצע XOR בינארי על הקלטים הללו והחזר את התוצאה גם כמחרוזת.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    def stringXor(a : String, b : String) : String = {\n", "entry_point": "stringXor", "test": "\n\n    var arg00 : String = \"\"\"111000\"\"\"\n    var arg01 : String = \"\"\"101010\"\"\"\n    var x0 : String = stringXor(arg00, arg01)\n    var v0 : String = \"\"\"010010\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1\"\"\"\n    var arg11 : String = \"\"\"1\"\"\"\n    var x1 : String = stringXor(arg10, arg11)\n    var v1 : String = \"\"\"0\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"0101\"\"\"\n    var arg21 : String = \"\"\"0000\"\"\"\n    var x2 : String = stringXor(arg20, arg21)\n    var v2 : String = \"\"\"0101\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "הקלט הוא שני מחרוזות a ו-b המורכבות רק מ-1 ו-0.\nבצע XOR בינארי על הקלטים הללו והחזר את התוצאה גם כמחרוזת.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/3", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * מתוך רשימת מחרוזות, החזר את הארוכה ביותר. החזר את הראשונה במקרה של מספר מחרוזות באותו אורך. החזר null במקרה של רשימת הקלט ריקה.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    def longest(strings : List[Any]) : Any = {\n", "entry_point": "longest", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Any = longest(arg00)\n    var v0 : Any = \"none\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(\"\"\"x\"\"\", \"\"\"y\"\"\", \"\"\"z\"\"\")\n    var x1 : Any = longest(arg10)\n    var v1 : Any = \"\"\"x\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(\"\"\"x\"\"\", \"\"\"yyy\"\"\", \"\"\"zzzz\"\"\", \"\"\"www\"\"\", \"\"\"kkkk\"\"\", \"\"\"abc\"\"\")\n    var x2 : Any = longest(arg20)\n    var v2 : Any = \"\"\"zzzz\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "מתוך רשימת מחרוזות, החזר את הארוכה ביותר. החזר את הראשונה במקרה של מספר מחרוזות באותו אורך. החזר null במקרה של רשימת הקלט ריקה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/4", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר את המחלק המשותף הגדול ביותר של שני מספרים a ו-b.\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    def greatestCommonDivisor(a : Int, b : Int) : Int = {\n", "entry_point": "greatestCommonDivisor", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 7\n    var x0 : Int = greatestCommonDivisor(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 15\n    var x1 : Int = greatestCommonDivisor(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 49\n    var arg21 : Int = 14\n    var x2 : Int = greatestCommonDivisor(arg20, arg21)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 144\n    var arg31 : Int = 60\n    var x3 : Int = greatestCommonDivisor(arg30, arg31)\n    var v3 : Int = 12\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "החזר את המחלק המשותף הגדול ביותר של שני מספרים a ו-b.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/5", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * הקלט הוא מחרוזת המופרדת ברווחים של מספרים מ-'אפס' עד 'תשע'.\n     * האפשרויות החוקיות הן 'אפס', 'אחד', 'שניים', 'שלושה', 'ארבעה', 'חמישה', 'ששה', 'שבעה', 'שמונה' ו-'תשע'.\n     * החזר את המחרוזת עם המספרים ממוינים מהקטן לגדול.\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    def sortNumbers(numbers : String) : String = {\n", "entry_point": "sortNumbers", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = sortNumbers(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"three\"\"\"\n    var x1 : String = sortNumbers(arg10)\n    var v1 : String = \"\"\"three\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"three five nine\"\"\"\n    var x2 : String = sortNumbers(arg20)\n    var v2 : String = \"\"\"three five nine\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"five zero four seven nine eight\"\"\"\n    var x3 : String = sortNumbers(arg30)\n    var v3 : String = \"\"\"zero four five seven eight nine\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"six five four three two one zero\"\"\"\n    var x4 : String = sortNumbers(arg40)\n    var v4 : String = \"\"\"zero one two three four five six\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "הקלט הוא מחרוזת המופרדת ברווחים של מספרים מ-'אפס' עד 'תשע'.\nהאפשרויות החוקיות הן 'אפס', 'אחד', 'שניים', 'שלושה', 'ארבעה', 'חמישה', 'ששה', 'שבעה', 'שמונה' ו-'תשע'.\nהחזר את המחרוזת עם המספרים ממוינים מהקטן לגדול.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/6", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתונה רשימה של מספרים (בפחות משני איברים), להחיל המרה לינארית על הרשימה כך שהמספר הקטן ביותר יהפוך ל-0 והגדול ביותר יהפוך ל-1.\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    def rescaleToUnit(numbers : List[Double]) : List[Double] = {\n", "entry_point": "rescaleToUnit", "test": "\n\n    var arg00 : List[Double] = List(2.0, 49.9)\n    var x0 : List[Double] = rescaleToUnit(arg00)\n    var v0 : List[Double] = List(0.0, 1.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(100.0, 49.9)\n    var x1 : List[Double] = rescaleToUnit(arg10)\n    var v1 : List[Double] = List(1.0, 0.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(1.0, 2.0, 3.0, 4.0, 5.0)\n    var x2 : List[Double] = rescaleToUnit(arg20)\n    var v2 : List[Double] = List(0.0, 0.25, 0.5, 0.75, 1.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(2.0, 1.0, 5.0, 3.0, 4.0)\n    var x3 : List[Double] = rescaleToUnit(arg30)\n    var v3 : List[Double] = List(0.25, 0.0, 1.0, 0.5, 0.75)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(12.0, 11.0, 15.0, 13.0, 14.0)\n    var x4 : List[Double] = rescaleToUnit(arg40)\n    var v4 : List[Double] = List(0.25, 0.0, 1.0, 0.5, 0.75)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "נתונה רשימה של מספרים (בפחות משני איברים), להחיל המרה לינארית על הרשימה כך שהמספר הקטן ביותר יהפוך ל-0 והגדול ביותר יהפוך ל-1.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/7", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * עבור מחרוזת נתונה, הפוך תווים באותיות קטנות לאותיות גדולות ואותיות גדולות לאותיות קטנות.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    def flipCase(string : String) : String = {\n", "entry_point": "flipCase", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = flipCase(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Hello!\"\"\"\n    var x1 : String = flipCase(arg10)\n    var v1 : String = \"\"\"hELLO!\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"These violent delights have violent ends\"\"\"\n    var x2 : String = flipCase(arg20)\n    var v2 : String = \"\"\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "עבור מחרוזת נתונה, הפוך תווים באותיות קטנות לאותיות גדולות ואותיות גדולות לאותיות קטנות.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/8", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר רק מספרים חיוביים ברשימה.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    def getPositive(l : List[Any]) : List[Any] = {\n", "entry_point": "getPositive", "test": "\n\n    var arg00 : List[Any] = List(-1, -2, 4, 5, 6)\n    var x0 : List[Any] = getPositive(arg00)\n    var v0 : List[Any] = List(4, 5, 6)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)\n    var x1 : List[Any] = getPositive(arg10)\n    var v1 : List[Any] = List(5, 3, 2, 3, 3, 9, 123, 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(-1, -2)\n    var x2 : List[Any] = getPositive(arg20)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List()\n    var x3 : List[Any] = getPositive(arg30)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "החזר רק מספרים חיוביים ברשימה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/9", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר ערך אמת אם המספר הנתון הוא מספר ראשוני, ושקר אחרת.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    def isPrime(n : Int) : Boolean = {\n", "entry_point": "isPrime", "test": "\n\n    var arg00 : Int = 6\n    var x0 : Boolean = isPrime(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 101\n    var x1 : Boolean = isPrime(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Boolean = isPrime(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 13441\n    var x3 : Boolean = isPrime(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 61\n    var x4 : Boolean = isPrime(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 4\n    var x5 : Boolean = isPrime(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 1\n    var x6 : Boolean = isPrime(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 5\n    var x7 : Boolean = isPrime(arg70)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 11\n    var x8 : Boolean = isPrime(arg80)\n    var v8 : Boolean = true\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 17\n    var x9 : Boolean = isPrime(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 85\n    var x10 : Boolean = isPrime(arg100)\n    var v10 : Boolean = false\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 77\n    var x11 : Boolean = isPrime(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 255379\n    var x12 : Boolean = isPrime(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n\n}\n", "description": "החזר ערך אמת אם המספר הנתון הוא מספר ראשוני, ושקר אחרת.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/10", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר אלמנטים ייחודיים ממוינים ברשימה\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    def unique(l : List[Int]) : List[Int] = {\n", "entry_point": "unique", "test": "\n\n    var arg00 : List[Int] = List(5, 3, 5, 2, 3, 3, 9, 0, 123)\n    var x0 : List[Int] = unique(arg00)\n    var v0 : List[Int] = List(0, 2, 3, 5, 9, 123)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n\n}\n", "description": "החזר אלמנטים ייחודיים ממוינים ברשימה", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/11", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * prime_fib מחזיר את המספר ה-n של סדרת פיבונאצ'י שהוא גם מספר ראשוני.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    def primeFib(n : Int) : Int = {\n", "entry_point": "primeFib", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = primeFib(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 2\n    var x1 : Int = primeFib(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : Int = primeFib(arg20)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 4\n    var x3 : Int = primeFib(arg30)\n    var v3 : Int = 13\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 5\n    var x4 : Int = primeFib(arg40)\n    var v4 : Int = 89\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 6\n    var x5 : Int = primeFib(arg50)\n    var v5 : Int = 233\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 7\n    var x6 : Int = primeFib(arg60)\n    var v6 : Int = 1597\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 8\n    var x7 : Int = primeFib(arg70)\n    var v7 : Int = 28657\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 9\n    var x8 : Int = primeFib(arg80)\n    var v8 : Int = 514229\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 10\n    var x9 : Int = primeFib(arg90)\n    var v9 : Int = 433494437\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n\n}\n", "description": "prime_fib מחזיר את המספר ה-n של סדרת פיבונאצ'י שהוא גם מספר ראשוני.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/12", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * הפונקציה triples_sum_to_zero מקבלת רשימה של מספרים שלמים כקלט.\n     * היא מחזירה True אם יש שלושה איברים שונים ברשימה שסכומם שווה לאפס, ו-False אחרת.\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    def triplesSumToZero(l : List[Int]) : Boolean = {\n", "entry_point": "triplesSumToZero", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 0)\n    var x0 : Boolean = triplesSumToZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, 5, -1)\n    var x1 : Boolean = triplesSumToZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, -2, 1)\n    var x2 : Boolean = triplesSumToZero(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(1, 2, 3, 7)\n    var x3 : Boolean = triplesSumToZero(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 2, 5, 7)\n    var x4 : Boolean = triplesSumToZero(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(2, 4, -5, 3, 9, 7)\n    var x5 : Boolean = triplesSumToZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(1)\n    var x6 : Boolean = triplesSumToZero(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(1, 3, 5, -100)\n    var x7 : Boolean = triplesSumToZero(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(100, 3, 5, -100)\n    var x8 : Boolean = triplesSumToZero(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "הפונקציה triples_sum_to_zero מקבלת רשימה של מספרים שלמים כקלט.\nהיא מחזירה True אם יש שלושה איברים שונים ברשימה שסכומם שווה לאפס, ו-False אחרת.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/13", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * pairs_sum_to_zero מקבל רשימה של מספרים שלמים כקלט.\n     * הפונקציה מחזירה True אם ישנם שני איברים שונים ברשימה שסכומם שווה לאפס, ו-False אחרת.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    def pairsSumToZero(l : List[Int]) : Boolean = {\n", "entry_point": "pairsSumToZero", "test": "\n\n    var arg00 : List[Int] = List(1, 3, 5, 0)\n    var x0 : Boolean = pairsSumToZero(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 3, -2, 1)\n    var x1 : Boolean = pairsSumToZero(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 7)\n    var x2 : Boolean = pairsSumToZero(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(2, 4, -5, 3, 5, 7)\n    var x3 : Boolean = pairsSumToZero(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var x4 : Boolean = pairsSumToZero(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(-3, 9, -1, 3, 2, 30)\n    var x5 : Boolean = pairsSumToZero(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(-3, 9, -1, 3, 2, 31)\n    var x6 : Boolean = pairsSumToZero(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(-3, 9, -1, 4, 2, 30)\n    var x7 : Boolean = pairsSumToZero(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(-3, 9, -1, 4, 2, 31)\n    var x8 : Boolean = pairsSumToZero(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "pairs_sum_to_zero מקבל רשימה של מספרים שלמים כקלט.\nהפונקציה מחזירה True אם ישנם שני איברים שונים ברשימה שסכומם שווה לאפס, ו-False אחרת.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/14", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * סדרת מספרי Fib4 היא סדרה דומה לסדרת פיבונאצ'י המוגדרת כך:\n     *     fib4(0) -> 0\n     *     fib4(1) -> 0\n     *     fib4(2) -> 2\n     *     fib4(3) -> 0\n     *     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     *     אנא כתוב פונקציה לחישוב ביצועי של האיבר ה-n של סדרת מספרי Fib4. אין להשתמש ברקורסיה.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    def fib4(n : Int) : Int = {\n", "entry_point": "fib4", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = fib4(arg00)\n    var v0 : Int = 4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 8\n    var x1 : Int = fib4(arg10)\n    var v1 : Int = 28\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = fib4(arg20)\n    var v2 : Int = 104\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 12\n    var x3 : Int = fib4(arg30)\n    var v3 : Int = 386\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "סדרת מספרי Fib4 היא סדרה דומה לסדרת פיבונאצ'י המוגדרת כך:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    אנא כתוב פונקציה לחישוב ביצועי של האיבר ה-n של סדרת מספרי Fib4. אין להשתמש ברקורסיה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/15", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר את החציון של האיברים ברשימה l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    def median(l : List[Int]) : Double = {\n", "entry_point": "median", "test": "\n\n    var arg00 : List[Int] = List(3, 1, 2, 4, 5)\n    var x0 : Double = median(arg00)\n    var v0 : Double = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-10, 4, 6, 1000, 10, 20)\n    var x1 : Double = median(arg10)\n    var v1 : Double = 8.0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(5)\n    var x2 : Double = median(arg20)\n    var v2 : Double = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(6, 5)\n    var x3 : Double = median(arg30)\n    var v3 : Double = 5.5\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(8, 1, 3, 9, 9, 2, 7)\n    var x4 : Double = median(arg40)\n    var v4 : Double = 7\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "החזר את החציון של האיברים ברשימה l.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/16", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * בודק אם המחרוזת הנתונה היא פלינדרום.\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    def isPalindrome(text : String) : Boolean = {\n", "entry_point": "isPalindrome", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : Boolean = isPalindrome(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aba\"\"\"\n    var x1 : Boolean = isPalindrome(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"aaaaa\"\"\"\n    var x2 : Boolean = isPalindrome(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"zbcd\"\"\"\n    var x3 : Boolean = isPalindrome(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"xywyx\"\"\"\n    var x4 : Boolean = isPalindrome(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"xywyz\"\"\"\n    var x5 : Boolean = isPalindrome(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"xywzx\"\"\"\n    var x6 : Boolean = isPalindrome(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "בודק אם המחרוזת הנתונה היא פלינדרום.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/17", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * remove_vowels היא פונקציה שמקבלת מחרוזת ומחזירה מחרוזת ללא תנועות שפתיים.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    def removeVowels(text : String) : String = {\n", "entry_point": "removeVowels", "test": "\n\n    var arg00 : String = \"\"\"\"\"\"\n    var x0 : String = removeVowels(arg00)\n    var v0 : String = \"\"\"\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdef\\nghijklm\"\"\"\n    var x1 : String = removeVowels(arg10)\n    var v1 : String = \"\"\"bcdf\\nghjklm\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"fedcba\"\"\"\n    var x2 : String = removeVowels(arg20)\n    var v2 : String = \"\"\"fdcb\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"eeeee\"\"\"\n    var x3 : String = removeVowels(arg30)\n    var v3 : String = \"\"\"\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"acBAA\"\"\"\n    var x4 : String = removeVowels(arg40)\n    var v4 : String = \"\"\"cB\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"EcBOO\"\"\"\n    var x5 : String = removeVowels(arg50)\n    var v5 : String = \"\"\"cB\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"ybcd\"\"\"\n    var x6 : String = removeVowels(arg60)\n    var v6 : String = \"\"\"ybcd\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "remove_vowels היא פונקציה שמקבלת מחרוזת ומחזירה מחרוזת ללא תנועות שפתיים.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/18", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר True אם כל המספרים ברשימה l נמצאים מתחת לסף t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    def belowThreshold(l : List[Int], t : Int) : Boolean = {\n", "entry_point": "belowThreshold", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 4, 10)\n    var arg01 : Int = 100\n    var x0 : Boolean = belowThreshold(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 20, 4, 10)\n    var arg11 : Int = 5\n    var x1 : Boolean = belowThreshold(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 20, 4, 10)\n    var arg21 : Int = 21\n    var x2 : Boolean = belowThreshold(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(1, 20, 4, 10)\n    var arg31 : Int = 22\n    var x3 : Boolean = belowThreshold(arg30, arg31)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 8, 4, 10)\n    var arg41 : Int = 11\n    var x4 : Boolean = belowThreshold(arg40, arg41)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(1, 8, 4, 10)\n    var arg51 : Int = 10\n    var x5 : Boolean = belowThreshold(arg50, arg51)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "החזר True אם כל המספרים ברשימה l נמצאים מתחת לסף t.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/19", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * הוסף שני מספרים x ו-y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    def add(x : Int, y : Int) : Int = {\n", "entry_point": "add", "test": "\n\n    var arg00 : Int = 0\n    var arg01 : Int = 1\n    var x0 : Int = add(arg00, arg01)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 0\n    var x1 : Int = add(arg10, arg11)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 2\n    var arg21 : Int = 3\n    var x2 : Int = add(arg20, arg21)\n    var v2 : Int = 5\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5\n    var arg31 : Int = 7\n    var x3 : Int = add(arg30, arg31)\n    var v3 : Int = 12\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var arg41 : Int = 5\n    var x4 : Int = add(arg40, arg41)\n    var v4 : Int = 12\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 572\n    var arg51 : Int = 725\n    var x5 : Int = add(arg50, arg51)\n    var v5 : Int = 1297\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 51\n    var arg61 : Int = 804\n    var x6 : Int = add(arg60, arg61)\n    var v6 : Int = 855\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 645\n    var arg71 : Int = 96\n    var x7 : Int = add(arg70, arg71)\n    var v7 : Int = 741\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 712\n    var arg81 : Int = 853\n    var x8 : Int = add(arg80, arg81)\n    var v8 : Int = 1565\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 223\n    var arg91 : Int = 101\n    var x9 : Int = add(arg90, arg91)\n    var v9 : Int = 324\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 76\n    var arg101 : Int = 29\n    var x10 : Int = add(arg100, arg101)\n    var v10 : Int = 105\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 416\n    var arg111 : Int = 149\n    var x11 : Int = add(arg110, arg111)\n    var v11 : Int = 565\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 145\n    var arg121 : Int = 409\n    var x12 : Int = add(arg120, arg121)\n    var v12 : Int = 554\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : Int = 535\n    var arg131 : Int = 430\n    var x13 : Int = add(arg130, arg131)\n    var v13 : Int = 965\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : Int = 118\n    var arg141 : Int = 303\n    var x14 : Int = add(arg140, arg141)\n    var v14 : Int = 421\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : Int = 287\n    var arg151 : Int = 94\n    var x15 : Int = add(arg150, arg151)\n    var v15 : Int = 381\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n    var arg160 : Int = 768\n    var arg161 : Int = 257\n    var x16 : Int = add(arg160, arg161)\n    var v16 : Int = 1025\n    assert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \" + x16)\n\n    var arg170 : Int = 421\n    var arg171 : Int = 677\n    var x17 : Int = add(arg170, arg171)\n    var v17 : Int = 1098\n    assert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \" + x17)\n\n    var arg180 : Int = 802\n    var arg181 : Int = 814\n    var x18 : Int = add(arg180, arg181)\n    var v18 : Int = 1616\n    assert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \" + x18)\n\n    var arg190 : Int = 510\n    var arg191 : Int = 922\n    var x19 : Int = add(arg190, arg191)\n    var v19 : Int = 1432\n    assert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \" + x19)\n\n    var arg200 : Int = 345\n    var arg201 : Int = 819\n    var x20 : Int = add(arg200, arg201)\n    var v20 : Int = 1164\n    assert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \" + x20)\n\n    var arg210 : Int = 895\n    var arg211 : Int = 436\n    var x21 : Int = add(arg210, arg211)\n    var v21 : Int = 1331\n    assert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \" + x21)\n\n    var arg220 : Int = 123\n    var arg221 : Int = 424\n    var x22 : Int = add(arg220, arg221)\n    var v22 : Int = 547\n    assert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \" + x22)\n\n    var arg230 : Int = 923\n    var arg231 : Int = 245\n    var x23 : Int = add(arg230, arg231)\n    var v23 : Int = 1168\n    assert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \" + x23)\n\n    var arg240 : Int = 23\n    var arg241 : Int = 438\n    var x24 : Int = add(arg240, arg241)\n    var v24 : Int = 461\n    assert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \" + x24)\n\n    var arg250 : Int = 565\n    var arg251 : Int = 133\n    var x25 : Int = add(arg250, arg251)\n    var v25 : Int = 698\n    assert(x25 == v25, \"Exception -- test case 25 did not pass. x25 = \" + x25)\n\n    var arg260 : Int = 945\n    var arg261 : Int = 925\n    var x26 : Int = add(arg260, arg261)\n    var v26 : Int = 1870\n    assert(x26 == v26, \"Exception -- test case 26 did not pass. x26 = \" + x26)\n\n    var arg270 : Int = 261\n    var arg271 : Int = 983\n    var x27 : Int = add(arg270, arg271)\n    var v27 : Int = 1244\n    assert(x27 == v27, \"Exception -- test case 27 did not pass. x27 = \" + x27)\n\n    var arg280 : Int = 139\n    var arg281 : Int = 577\n    var x28 : Int = add(arg280, arg281)\n    var v28 : Int = 716\n    assert(x28 == v28, \"Exception -- test case 28 did not pass. x28 = \" + x28)\n\n    var arg290 : Int = 763\n    var arg291 : Int = 178\n    var x29 : Int = add(arg290, arg291)\n    var v29 : Int = 941\n    assert(x29 == v29, \"Exception -- test case 29 did not pass. x29 = \" + x29)\n\n    var arg300 : Int = 147\n    var arg301 : Int = 892\n    var x30 : Int = add(arg300, arg301)\n    var v30 : Int = 1039\n    assert(x30 == v30, \"Exception -- test case 30 did not pass. x30 = \" + x30)\n\n    var arg310 : Int = 436\n    var arg311 : Int = 402\n    var x31 : Int = add(arg310, arg311)\n    var v31 : Int = 838\n    assert(x31 == v31, \"Exception -- test case 31 did not pass. x31 = \" + x31)\n\n    var arg320 : Int = 610\n    var arg321 : Int = 581\n    var x32 : Int = add(arg320, arg321)\n    var v32 : Int = 1191\n    assert(x32 == v32, \"Exception -- test case 32 did not pass. x32 = \" + x32)\n\n    var arg330 : Int = 103\n    var arg331 : Int = 416\n    var x33 : Int = add(arg330, arg331)\n    var v33 : Int = 519\n    assert(x33 == v33, \"Exception -- test case 33 did not pass. x33 = \" + x33)\n\n    var arg340 : Int = 339\n    var arg341 : Int = 990\n    var x34 : Int = add(arg340, arg341)\n    var v34 : Int = 1329\n    assert(x34 == v34, \"Exception -- test case 34 did not pass. x34 = \" + x34)\n\n    var arg350 : Int = 130\n    var arg351 : Int = 504\n    var x35 : Int = add(arg350, arg351)\n    var v35 : Int = 634\n    assert(x35 == v35, \"Exception -- test case 35 did not pass. x35 = \" + x35)\n\n    var arg360 : Int = 242\n    var arg361 : Int = 717\n    var x36 : Int = add(arg360, arg361)\n    var v36 : Int = 959\n    assert(x36 == v36, \"Exception -- test case 36 did not pass. x36 = \" + x36)\n\n    var arg370 : Int = 562\n    var arg371 : Int = 110\n    var x37 : Int = add(arg370, arg371)\n    var v37 : Int = 672\n    assert(x37 == v37, \"Exception -- test case 37 did not pass. x37 = \" + x37)\n\n    var arg380 : Int = 396\n    var arg381 : Int = 909\n    var x38 : Int = add(arg380, arg381)\n    var v38 : Int = 1305\n    assert(x38 == v38, \"Exception -- test case 38 did not pass. x38 = \" + x38)\n\n    var arg390 : Int = 887\n    var arg391 : Int = 703\n    var x39 : Int = add(arg390, arg391)\n    var v39 : Int = 1590\n    assert(x39 == v39, \"Exception -- test case 39 did not pass. x39 = \" + x39)\n\n    var arg400 : Int = 870\n    var arg401 : Int = 551\n    var x40 : Int = add(arg400, arg401)\n    var v40 : Int = 1421\n    assert(x40 == v40, \"Exception -- test case 40 did not pass. x40 = \" + x40)\n\n    var arg410 : Int = 422\n    var arg411 : Int = 391\n    var x41 : Int = add(arg410, arg411)\n    var v41 : Int = 813\n    assert(x41 == v41, \"Exception -- test case 41 did not pass. x41 = \" + x41)\n\n    var arg420 : Int = 299\n    var arg421 : Int = 505\n    var x42 : Int = add(arg420, arg421)\n    var v42 : Int = 804\n    assert(x42 == v42, \"Exception -- test case 42 did not pass. x42 = \" + x42)\n\n    var arg430 : Int = 346\n    var arg431 : Int = 56\n    var x43 : Int = add(arg430, arg431)\n    var v43 : Int = 402\n    assert(x43 == v43, \"Exception -- test case 43 did not pass. x43 = \" + x43)\n\n    var arg440 : Int = 36\n    var arg441 : Int = 706\n    var x44 : Int = add(arg440, arg441)\n    var v44 : Int = 742\n    assert(x44 == v44, \"Exception -- test case 44 did not pass. x44 = \" + x44)\n\n    var arg450 : Int = 738\n    var arg451 : Int = 411\n    var x45 : Int = add(arg450, arg451)\n    var v45 : Int = 1149\n    assert(x45 == v45, \"Exception -- test case 45 did not pass. x45 = \" + x45)\n\n    var arg460 : Int = 679\n    var arg461 : Int = 87\n    var x46 : Int = add(arg460, arg461)\n    var v46 : Int = 766\n    assert(x46 == v46, \"Exception -- test case 46 did not pass. x46 = \" + x46)\n\n    var arg470 : Int = 25\n    var arg471 : Int = 303\n    var x47 : Int = add(arg470, arg471)\n    var v47 : Int = 328\n    assert(x47 == v47, \"Exception -- test case 47 did not pass. x47 = \" + x47)\n\n    var arg480 : Int = 161\n    var arg481 : Int = 612\n    var x48 : Int = add(arg480, arg481)\n    var v48 : Int = 773\n    assert(x48 == v48, \"Exception -- test case 48 did not pass. x48 = \" + x48)\n\n    var arg490 : Int = 306\n    var arg491 : Int = 841\n    var x49 : Int = add(arg490, arg491)\n    var v49 : Int = 1147\n    assert(x49 == v49, \"Exception -- test case 49 did not pass. x49 = \" + x49)\n\n    var arg500 : Int = 973\n    var arg501 : Int = 411\n    var x50 : Int = add(arg500, arg501)\n    var v50 : Int = 1384\n    assert(x50 == v50, \"Exception -- test case 50 did not pass. x50 = \" + x50)\n\n    var arg510 : Int = 711\n    var arg511 : Int = 157\n    var x51 : Int = add(arg510, arg511)\n    var v51 : Int = 868\n    assert(x51 == v51, \"Exception -- test case 51 did not pass. x51 = \" + x51)\n\n    var arg520 : Int = 471\n    var arg521 : Int = 27\n    var x52 : Int = add(arg520, arg521)\n    var v52 : Int = 498\n    assert(x52 == v52, \"Exception -- test case 52 did not pass. x52 = \" + x52)\n\n    var arg530 : Int = 714\n    var arg531 : Int = 792\n    var x53 : Int = add(arg530, arg531)\n    var v53 : Int = 1506\n    assert(x53 == v53, \"Exception -- test case 53 did not pass. x53 = \" + x53)\n\n    var arg540 : Int = 38\n    var arg541 : Int = 206\n    var x54 : Int = add(arg540, arg541)\n    var v54 : Int = 244\n    assert(x54 == v54, \"Exception -- test case 54 did not pass. x54 = \" + x54)\n\n    var arg550 : Int = 907\n    var arg551 : Int = 343\n    var x55 : Int = add(arg550, arg551)\n    var v55 : Int = 1250\n    assert(x55 == v55, \"Exception -- test case 55 did not pass. x55 = \" + x55)\n\n    var arg560 : Int = 23\n    var arg561 : Int = 760\n    var x56 : Int = add(arg560, arg561)\n    var v56 : Int = 783\n    assert(x56 == v56, \"Exception -- test case 56 did not pass. x56 = \" + x56)\n\n    var arg570 : Int = 524\n    var arg571 : Int = 859\n    var x57 : Int = add(arg570, arg571)\n    var v57 : Int = 1383\n    assert(x57 == v57, \"Exception -- test case 57 did not pass. x57 = \" + x57)\n\n    var arg580 : Int = 30\n    var arg581 : Int = 529\n    var x58 : Int = add(arg580, arg581)\n    var v58 : Int = 559\n    assert(x58 == v58, \"Exception -- test case 58 did not pass. x58 = \" + x58)\n\n    var arg590 : Int = 341\n    var arg591 : Int = 691\n    var x59 : Int = add(arg590, arg591)\n    var v59 : Int = 1032\n    assert(x59 == v59, \"Exception -- test case 59 did not pass. x59 = \" + x59)\n\n    var arg600 : Int = 167\n    var arg601 : Int = 729\n    var x60 : Int = add(arg600, arg601)\n    var v60 : Int = 896\n    assert(x60 == v60, \"Exception -- test case 60 did not pass. x60 = \" + x60)\n\n    var arg610 : Int = 636\n    var arg611 : Int = 289\n    var x61 : Int = add(arg610, arg611)\n    var v61 : Int = 925\n    assert(x61 == v61, \"Exception -- test case 61 did not pass. x61 = \" + x61)\n\n    var arg620 : Int = 503\n    var arg621 : Int = 144\n    var x62 : Int = add(arg620, arg621)\n    var v62 : Int = 647\n    assert(x62 == v62, \"Exception -- test case 62 did not pass. x62 = \" + x62)\n\n    var arg630 : Int = 51\n    var arg631 : Int = 985\n    var x63 : Int = add(arg630, arg631)\n    var v63 : Int = 1036\n    assert(x63 == v63, \"Exception -- test case 63 did not pass. x63 = \" + x63)\n\n    var arg640 : Int = 287\n    var arg641 : Int = 149\n    var x64 : Int = add(arg640, arg641)\n    var v64 : Int = 436\n    assert(x64 == v64, \"Exception -- test case 64 did not pass. x64 = \" + x64)\n\n    var arg650 : Int = 659\n    var arg651 : Int = 75\n    var x65 : Int = add(arg650, arg651)\n    var v65 : Int = 734\n    assert(x65 == v65, \"Exception -- test case 65 did not pass. x65 = \" + x65)\n\n    var arg660 : Int = 462\n    var arg661 : Int = 797\n    var x66 : Int = add(arg660, arg661)\n    var v66 : Int = 1259\n    assert(x66 == v66, \"Exception -- test case 66 did not pass. x66 = \" + x66)\n\n    var arg670 : Int = 406\n    var arg671 : Int = 141\n    var x67 : Int = add(arg670, arg671)\n    var v67 : Int = 547\n    assert(x67 == v67, \"Exception -- test case 67 did not pass. x67 = \" + x67)\n\n    var arg680 : Int = 106\n    var arg681 : Int = 44\n    var x68 : Int = add(arg680, arg681)\n    var v68 : Int = 150\n    assert(x68 == v68, \"Exception -- test case 68 did not pass. x68 = \" + x68)\n\n    var arg690 : Int = 300\n    var arg691 : Int = 934\n    var x69 : Int = add(arg690, arg691)\n    var v69 : Int = 1234\n    assert(x69 == v69, \"Exception -- test case 69 did not pass. x69 = \" + x69)\n\n    var arg700 : Int = 471\n    var arg701 : Int = 524\n    var x70 : Int = add(arg700, arg701)\n    var v70 : Int = 995\n    assert(x70 == v70, \"Exception -- test case 70 did not pass. x70 = \" + x70)\n\n    var arg710 : Int = 122\n    var arg711 : Int = 429\n    var x71 : Int = add(arg710, arg711)\n    var v71 : Int = 551\n    assert(x71 == v71, \"Exception -- test case 71 did not pass. x71 = \" + x71)\n\n    var arg720 : Int = 735\n    var arg721 : Int = 195\n    var x72 : Int = add(arg720, arg721)\n    var v72 : Int = 930\n    assert(x72 == v72, \"Exception -- test case 72 did not pass. x72 = \" + x72)\n\n    var arg730 : Int = 335\n    var arg731 : Int = 484\n    var x73 : Int = add(arg730, arg731)\n    var v73 : Int = 819\n    assert(x73 == v73, \"Exception -- test case 73 did not pass. x73 = \" + x73)\n\n    var arg740 : Int = 28\n    var arg741 : Int = 809\n    var x74 : Int = add(arg740, arg741)\n    var v74 : Int = 837\n    assert(x74 == v74, \"Exception -- test case 74 did not pass. x74 = \" + x74)\n\n    var arg750 : Int = 430\n    var arg751 : Int = 20\n    var x75 : Int = add(arg750, arg751)\n    var v75 : Int = 450\n    assert(x75 == v75, \"Exception -- test case 75 did not pass. x75 = \" + x75)\n\n    var arg760 : Int = 916\n    var arg761 : Int = 635\n    var x76 : Int = add(arg760, arg761)\n    var v76 : Int = 1551\n    assert(x76 == v76, \"Exception -- test case 76 did not pass. x76 = \" + x76)\n\n    var arg770 : Int = 301\n    var arg771 : Int = 999\n    var x77 : Int = add(arg770, arg771)\n    var v77 : Int = 1300\n    assert(x77 == v77, \"Exception -- test case 77 did not pass. x77 = \" + x77)\n\n    var arg780 : Int = 454\n    var arg781 : Int = 466\n    var x78 : Int = add(arg780, arg781)\n    var v78 : Int = 920\n    assert(x78 == v78, \"Exception -- test case 78 did not pass. x78 = \" + x78)\n\n    var arg790 : Int = 905\n    var arg791 : Int = 259\n    var x79 : Int = add(arg790, arg791)\n    var v79 : Int = 1164\n    assert(x79 == v79, \"Exception -- test case 79 did not pass. x79 = \" + x79)\n\n    var arg800 : Int = 168\n    var arg801 : Int = 205\n    var x80 : Int = add(arg800, arg801)\n    var v80 : Int = 373\n    assert(x80 == v80, \"Exception -- test case 80 did not pass. x80 = \" + x80)\n\n    var arg810 : Int = 570\n    var arg811 : Int = 434\n    var x81 : Int = add(arg810, arg811)\n    var v81 : Int = 1004\n    assert(x81 == v81, \"Exception -- test case 81 did not pass. x81 = \" + x81)\n\n    var arg820 : Int = 64\n    var arg821 : Int = 959\n    var x82 : Int = add(arg820, arg821)\n    var v82 : Int = 1023\n    assert(x82 == v82, \"Exception -- test case 82 did not pass. x82 = \" + x82)\n\n    var arg830 : Int = 957\n    var arg831 : Int = 510\n    var x83 : Int = add(arg830, arg831)\n    var v83 : Int = 1467\n    assert(x83 == v83, \"Exception -- test case 83 did not pass. x83 = \" + x83)\n\n    var arg840 : Int = 722\n    var arg841 : Int = 598\n    var x84 : Int = add(arg840, arg841)\n    var v84 : Int = 1320\n    assert(x84 == v84, \"Exception -- test case 84 did not pass. x84 = \" + x84)\n\n    var arg850 : Int = 770\n    var arg851 : Int = 226\n    var x85 : Int = add(arg850, arg851)\n    var v85 : Int = 996\n    assert(x85 == v85, \"Exception -- test case 85 did not pass. x85 = \" + x85)\n\n    var arg860 : Int = 579\n    var arg861 : Int = 66\n    var x86 : Int = add(arg860, arg861)\n    var v86 : Int = 645\n    assert(x86 == v86, \"Exception -- test case 86 did not pass. x86 = \" + x86)\n\n    var arg870 : Int = 117\n    var arg871 : Int = 674\n    var x87 : Int = add(arg870, arg871)\n    var v87 : Int = 791\n    assert(x87 == v87, \"Exception -- test case 87 did not pass. x87 = \" + x87)\n\n    var arg880 : Int = 530\n    var arg881 : Int = 30\n    var x88 : Int = add(arg880, arg881)\n    var v88 : Int = 560\n    assert(x88 == v88, \"Exception -- test case 88 did not pass. x88 = \" + x88)\n\n    var arg890 : Int = 776\n    var arg891 : Int = 345\n    var x89 : Int = add(arg890, arg891)\n    var v89 : Int = 1121\n    assert(x89 == v89, \"Exception -- test case 89 did not pass. x89 = \" + x89)\n\n    var arg900 : Int = 327\n    var arg901 : Int = 389\n    var x90 : Int = add(arg900, arg901)\n    var v90 : Int = 716\n    assert(x90 == v90, \"Exception -- test case 90 did not pass. x90 = \" + x90)\n\n    var arg910 : Int = 596\n    var arg911 : Int = 12\n    var x91 : Int = add(arg910, arg911)\n    var v91 : Int = 608\n    assert(x91 == v91, \"Exception -- test case 91 did not pass. x91 = \" + x91)\n\n    var arg920 : Int = 599\n    var arg921 : Int = 511\n    var x92 : Int = add(arg920, arg921)\n    var v92 : Int = 1110\n    assert(x92 == v92, \"Exception -- test case 92 did not pass. x92 = \" + x92)\n\n    var arg930 : Int = 936\n    var arg931 : Int = 476\n    var x93 : Int = add(arg930, arg931)\n    var v93 : Int = 1412\n    assert(x93 == v93, \"Exception -- test case 93 did not pass. x93 = \" + x93)\n\n    var arg940 : Int = 461\n    var arg941 : Int = 14\n    var x94 : Int = add(arg940, arg941)\n    var v94 : Int = 475\n    assert(x94 == v94, \"Exception -- test case 94 did not pass. x94 = \" + x94)\n\n    var arg950 : Int = 966\n    var arg951 : Int = 157\n    var x95 : Int = add(arg950, arg951)\n    var v95 : Int = 1123\n    assert(x95 == v95, \"Exception -- test case 95 did not pass. x95 = \" + x95)\n\n    var arg960 : Int = 326\n    var arg961 : Int = 91\n    var x96 : Int = add(arg960, arg961)\n    var v96 : Int = 417\n    assert(x96 == v96, \"Exception -- test case 96 did not pass. x96 = \" + x96)\n\n    var arg970 : Int = 392\n    var arg971 : Int = 455\n    var x97 : Int = add(arg970, arg971)\n    var v97 : Int = 847\n    assert(x97 == v97, \"Exception -- test case 97 did not pass. x97 = \" + x97)\n\n    var arg980 : Int = 446\n    var arg981 : Int = 477\n    var x98 : Int = add(arg980, arg981)\n    var v98 : Int = 923\n    assert(x98 == v98, \"Exception -- test case 98 did not pass. x98 = \" + x98)\n\n    var arg990 : Int = 324\n    var arg991 : Int = 860\n    var x99 : Int = add(arg990, arg991)\n    var v99 : Int = 1184\n    assert(x99 == v99, \"Exception -- test case 99 did not pass. x99 = \" + x99)\n\n    var arg1000 : Int = 945\n    var arg1001 : Int = 85\n    var x100 : Int = add(arg1000, arg1001)\n    var v100 : Int = 1030\n    assert(x100 == v100, \"Exception -- test case 100 did not pass. x100 = \" + x100)\n\n    var arg1010 : Int = 886\n    var arg1011 : Int = 582\n    var x101 : Int = add(arg1010, arg1011)\n    var v101 : Int = 1468\n    assert(x101 == v101, \"Exception -- test case 101 did not pass. x101 = \" + x101)\n\n    var arg1020 : Int = 886\n    var arg1021 : Int = 712\n    var x102 : Int = add(arg1020, arg1021)\n    var v102 : Int = 1598\n    assert(x102 == v102, \"Exception -- test case 102 did not pass. x102 = \" + x102)\n\n    var arg1030 : Int = 842\n    var arg1031 : Int = 953\n    var x103 : Int = add(arg1030, arg1031)\n    var v103 : Int = 1795\n    assert(x103 == v103, \"Exception -- test case 103 did not pass. x103 = \" + x103)\n\n\n}\n", "description": "הוסף שני מספרים x ו-y", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/20", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * בדוק אם שתי מילים כוללות את אותם התווים.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n", "entry_point": "sameChars", "test": "\n\n    var arg00 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg01 : String = \"\"\"dddzzzzzzzddeddabc\"\"\"\n    var x0 : Boolean = sameChars(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcd\"\"\"\n    var arg11 : String = \"\"\"dddddddabc\"\"\"\n    var x1 : Boolean = sameChars(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"dddddddabc\"\"\"\n    var arg21 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = sameChars(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"eabcd\"\"\"\n    var arg31 : String = \"\"\"dddddddabc\"\"\"\n    var x3 : Boolean = sameChars(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"abcd\"\"\"\n    var arg41 : String = \"\"\"dddddddabcf\"\"\"\n    var x4 : Boolean = sameChars(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"eabcdzzzz\"\"\"\n    var arg51 : String = \"\"\"dddzzzzzzzddddabc\"\"\"\n    var x5 : Boolean = sameChars(arg50, arg51)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"aabb\"\"\"\n    var arg61 : String = \"\"\"aaccc\"\"\"\n    var x6 : Boolean = sameChars(arg60, arg61)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "בדוק אם שתי מילים כוללות את אותם התווים.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/21", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר את המספר ה-n של סדרת פיבונאצ'י.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     *\n     */\n    def fib(n : Int) : Int = {\n", "entry_point": "fib", "test": "\n\n    var arg00 : Int = 10\n    var x0 : Int = fib(arg00)\n    var v0 : Int = 55\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = fib(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Int = fib(arg20)\n    var v2 : Int = 21\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 11\n    var x3 : Int = fib(arg30)\n    var v3 : Int = 89\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 12\n    var x4 : Int = fib(arg40)\n    var v4 : Int = 144\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "החזר את המספר ה-n של סדרת פיבונאצ'י.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/22", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר את האיברים המשותפים והייחודיים של שני רשימות ממוינות.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    def common(l1 : List[Int], l2 : List[Any]) : List[Any] = {\n", "entry_point": "common", "test": "\n\n    var arg00 : List[Int] = List(1, 4, 3, 34, 653, 2, 5)\n    var arg01 : List[Any] = List(5, 7, 1, 5, 9, 653, 121)\n    var x0 : List[Any] = common(arg00, arg01)\n    var v0 : List[Any] = List(1, 5, 653)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(5, 3, 2, 8)\n    var arg11 : List[Any] = List(3, 2)\n    var x1 : List[Any] = common(arg10, arg11)\n    var v1 : List[Any] = List(2, 3)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(4, 3, 2, 8)\n    var arg21 : List[Any] = List(3, 2, 4)\n    var x2 : List[Any] = common(arg20, arg21)\n    var v2 : List[Any] = List(2, 3, 4)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(4, 3, 2, 8)\n    var arg31 : List[Any] = List()\n    var x3 : List[Any] = common(arg30, arg31)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "החזר את האיברים המשותפים והייחודיים של שני רשימות ממוינות.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/23", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * החזר את הגורם הראשון הגדול ביותר של n. הנח כי n > 1 ואינו מספר ראשוני.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    def largestPrimeFactor(n : Int) : Int = {\n", "entry_point": "largestPrimeFactor", "test": "\n\n    var arg00 : Int = 15\n    var x0 : Int = largestPrimeFactor(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 27\n    var x1 : Int = largestPrimeFactor(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 63\n    var x2 : Int = largestPrimeFactor(arg20)\n    var v2 : Int = 7\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 330\n    var x3 : Int = largestPrimeFactor(arg30)\n    var v3 : Int = 11\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 13195\n    var x4 : Int = largestPrimeFactor(arg40)\n    var v4 : Int = 29\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "החזר את הגורם הראשון הגדול ביותר של n. הנח כי n > 1 ואינו מספר ראשוני.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/24", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * sum_to_n הוא פונקציה שמסכמת מספרים מ-1 עד n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    def sumToN(n : Int) : Int = {\n", "entry_point": "sumToN", "test": "\n\n    var arg00 : Int = 1\n    var x0 : Int = sumToN(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = sumToN(arg10)\n    var v1 : Int = 21\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 11\n    var x2 : Int = sumToN(arg20)\n    var v2 : Int = 66\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 30\n    var x3 : Int = sumToN(arg30)\n    var v3 : Int = 465\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 100\n    var x4 : Int = sumToN(arg40)\n    var v4 : Int = 5050\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "sum_to_n הוא פונקציה שמסכמת מספרים מ-1 עד n.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/25", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * xs מייצגים מקדמים של פולינום.\n     *     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *      החזר את הנגזרת של הפולינום הזה באותה הצורה.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    def derivative(xs : List[Int]) : List[Any] = {\n", "entry_point": "derivative", "test": "\n\n    var arg00 : List[Int] = List(3, 1, 2, 4, 5)\n    var x0 : List[Any] = derivative(arg00)\n    var v0 : List[Any] = List(1, 4, 12, 20)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3)\n    var x1 : List[Any] = derivative(arg10)\n    var v1 : List[Any] = List(2, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 2, 1)\n    var x2 : List[Any] = derivative(arg20)\n    var v2 : List[Any] = List(2, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(3, 2, 1, 0, 4)\n    var x3 : List[Any] = derivative(arg30)\n    var v3 : List[Any] = List(2, 2, 0, 16)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var x4 : List[Any] = derivative(arg40)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "xs מייצגים מקדמים של פולינום.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     החזר את הנגזרת של הפולינום הזה באותה הצורה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/26", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * הרצף מספרי FibFib הוא רצף דומה לרצף פיבונאצ'י המוגדר כך:\n     *     fibfib(0) == 0\n     *     fibfib(1) == 0\n     *     fibfib(2) == 1\n     *     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     *     אנא כתוב פונקציה לחישוב ביצועי של האיבר ה-n של רצף מספרי FibFib.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    def fibfib(n : Int) : Int = {\n", "entry_point": "fibfib", "test": "\n\n    var arg00 : Int = 2\n    var x0 : Int = fibfib(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var x1 : Int = fibfib(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : Int = fibfib(arg20)\n    var v2 : Int = 4\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 8\n    var x3 : Int = fibfib(arg30)\n    var v3 : Int = 24\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 10\n    var x4 : Int = fibfib(arg40)\n    var v4 : Int = 81\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 12\n    var x5 : Int = fibfib(arg50)\n    var v5 : Int = 274\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 14\n    var x6 : Int = fibfib(arg60)\n    var v6 : Int = 927\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "הרצף מספרי FibFib הוא רצף דומה לרצף פיבונאצ'י המוגדר כך:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    אנא כתוב פונקציה לחישוב ביצועי של האיבר ה-n של רצף מספרי FibFib.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/27", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * כתוב פונקציה בשם vowels_count המקבלת מחרוזת המייצגת מילה ומחזירה את מספר התווים הקוליים במחרוזת. התווים הקוליים במקרה זה הם 'a', 'e', 'i', 'o', 'u'. כאן, 'y' הוא גם תו קולי, אך רק כאשר הוא בסוף המילה הנתונה.\n     * \n     * דוגמה:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    def vowelsCount(s : String) : Int = {\n", "entry_point": "vowelsCount", "test": "\n\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var x0 : Int = vowelsCount(arg00)\n    var v0 : Int = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Alone\"\"\"\n    var x1 : Int = vowelsCount(arg10)\n    var v1 : Int = 3\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"key\"\"\"\n    var x2 : Int = vowelsCount(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"bye\"\"\"\n    var x3 : Int = vowelsCount(arg30)\n    var v3 : Int = 1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"keY\"\"\"\n    var x4 : Int = vowelsCount(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"bYe\"\"\"\n    var x5 : Int = vowelsCount(arg50)\n    var v5 : Int = 1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"ACEDY\"\"\"\n    var x6 : Int = vowelsCount(arg60)\n    var v6 : Int = 3\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "כתוב פונקציה בשם vowels_count המקבלת מחרוזת המייצגת מילה ומחזירה את מספר התווים הקוליים במחרוזת. התווים הקוליים במקרה זה הם 'a', 'e', 'i', 'o', 'u'. כאן, 'y' הוא גם תו קולי, אך רק כאשר הוא בסוף המילה הנתונה.\n\nדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/28", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * קיבלתם רשימה לא ריקה של מספרים שלמים חיוביים. החזירו את המספר הגדול ביותר שהוא גדול מאפס והתדירות שלו גדולה או שווה לערך של המספר עצמו. התדירות של מספר הוא מספר הפעמים שהוא מופיע ברשימה. אם אין ערך כזה, החזירו -1.\n     * דוגמאות:\n     * \n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    def search(lst : List[Int]) : Int = {\n", "entry_point": "search", "test": "\n\n    var arg00 : List[Int] = List(5, 5, 5, 5, 1)\n    var x0 : Int = search(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, 1, 4, 1, 4, 4)\n    var x1 : Int = search(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3, 3)\n    var x2 : Int = search(arg20)\n    var v2 : Int = -1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(8, 8, 8, 8, 8, 8, 8, 8)\n    var x3 : Int = search(arg30)\n    var v3 : Int = 8\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(2, 3, 3, 2, 2)\n    var x4 : Int = search(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)\n    var x5 : Int = search(arg50)\n    var v5 : Int = 1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(3, 2, 8, 2)\n    var x6 : Int = search(arg60)\n    var v6 : Int = 2\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)\n    var x7 : Int = search(arg70)\n    var v7 : Int = 1\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(8, 8, 3, 6, 5, 6, 4)\n    var x8 : Int = search(arg80)\n    var v8 : Int = -1\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Int] = List(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)\n    var x9 : Int = search(arg90)\n    var v9 : Int = 1\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Int] = List(1, 9, 10, 1, 3)\n    var x10 : Int = search(arg100)\n    var v10 : Int = 1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : List[Int] = List(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)\n    var x11 : Int = search(arg110)\n    var v11 : Int = 5\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : List[Int] = List(1)\n    var x12 : Int = search(arg120)\n    var v12 : Int = 1\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : List[Int] = List(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)\n    var x13 : Int = search(arg130)\n    var v13 : Int = 4\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : List[Int] = List(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)\n    var x14 : Int = search(arg140)\n    var v14 : Int = 2\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : List[Int] = List(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)\n    var x15 : Int = search(arg150)\n    var v15 : Int = 1\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n    var arg160 : List[Int] = List(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)\n    var x16 : Int = search(arg160)\n    var v16 : Int = 4\n    assert(x16 == v16, \"Exception -- test case 16 did not pass. x16 = \" + x16)\n\n    var arg170 : List[Int] = List(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)\n    var x17 : Int = search(arg170)\n    var v17 : Int = 4\n    assert(x17 == v17, \"Exception -- test case 17 did not pass. x17 = \" + x17)\n\n    var arg180 : List[Int] = List(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)\n    var x18 : Int = search(arg180)\n    var v18 : Int = 2\n    assert(x18 == v18, \"Exception -- test case 18 did not pass. x18 = \" + x18)\n\n    var arg190 : List[Int] = List(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)\n    var x19 : Int = search(arg190)\n    var v19 : Int = -1\n    assert(x19 == v19, \"Exception -- test case 19 did not pass. x19 = \" + x19)\n\n    var arg200 : List[Int] = List(10)\n    var x20 : Int = search(arg200)\n    var v20 : Int = -1\n    assert(x20 == v20, \"Exception -- test case 20 did not pass. x20 = \" + x20)\n\n    var arg210 : List[Int] = List(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)\n    var x21 : Int = search(arg210)\n    var v21 : Int = 2\n    assert(x21 == v21, \"Exception -- test case 21 did not pass. x21 = \" + x21)\n\n    var arg220 : List[Int] = List(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)\n    var x22 : Int = search(arg220)\n    var v22 : Int = 1\n    assert(x22 == v22, \"Exception -- test case 22 did not pass. x22 = \" + x22)\n\n    var arg230 : List[Int] = List(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)\n    var x23 : Int = search(arg230)\n    var v23 : Int = 1\n    assert(x23 == v23, \"Exception -- test case 23 did not pass. x23 = \" + x23)\n\n    var arg240 : List[Int] = List(3, 10, 10, 9, 2)\n    var x24 : Int = search(arg240)\n    var v24 : Int = -1\n    assert(x24 == v24, \"Exception -- test case 24 did not pass. x24 = \" + x24)\n\n\n}\n", "description": "קיבלתם רשימה לא ריקה של מספרים שלמים חיוביים. החזירו את המספר הגדול ביותר שהוא גדול מאפס והתדירות שלו גדולה או שווה לערך של המספר עצמו. התדירות של מספר הוא מספר הפעמים שהוא מופיע ברשימה. אם אין ערך כזה, החזירו -1.\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/29", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתונות אורכי הצלעות של משולש. החזר את שטח המשולש מעוגל ל-2 נקודות עשרוניות אם הצלעות מהווים משולש תקין. אחרת, החזר -1. שלושת הצלעות מהוות משולש תקין כאשר סכום כל שני צלעות גדול מהצלע השלישי. דוגמה:\n     * \n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    def triangleArea(a : Int, b : Int, c : Int) : Double = {\n", "entry_point": "triangleArea", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var arg02 : Int = 5\n    var x0 : Double = triangleArea(arg00, arg01, arg02)\n    var v0 : Double = 6.0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 10\n    var x1 : Double = triangleArea(arg10, arg11, arg12)\n    var v1 : Double = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 4\n    var arg21 : Int = 8\n    var arg22 : Int = 5\n    var x2 : Double = triangleArea(arg20, arg21, arg22)\n    var v2 : Double = 8.18\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 2\n    var arg31 : Int = 2\n    var arg32 : Int = 2\n    var x3 : Double = triangleArea(arg30, arg31, arg32)\n    var v3 : Double = 1.73\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 1\n    var arg41 : Int = 2\n    var arg42 : Int = 3\n    var x4 : Double = triangleArea(arg40, arg41, arg42)\n    var v4 : Double = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 10\n    var arg51 : Int = 5\n    var arg52 : Int = 7\n    var x5 : Double = triangleArea(arg50, arg51, arg52)\n    var v5 : Double = 16.25\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 2\n    var arg61 : Int = 6\n    var arg62 : Int = 3\n    var x6 : Double = triangleArea(arg60, arg61, arg62)\n    var v6 : Double = -1\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 1\n    var arg71 : Int = 1\n    var arg72 : Int = 1\n    var x7 : Double = triangleArea(arg70, arg71, arg72)\n    var v7 : Double = 0.43\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 2\n    var arg81 : Int = 2\n    var arg82 : Int = 10\n    var x8 : Double = triangleArea(arg80, arg81, arg82)\n    var v8 : Double = -1\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "נתונות אורכי הצלעות של משולש. החזר את שטח המשולש מעוגל ל-2 נקודות עשרוניות אם הצלעות מהווים משולש תקין. אחרת, החזר -1. שלושת הצלעות מהוות משולש תקין כאשר סכום כל שני צלעות גדול מהצלע השלישי. דוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/30", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * כתוב פונקציה שמחזירה True אם האובייקט q יכול לטוס, ו-False אחרת.\n     * האובייקט q יכול לטוס אם הוא מאוזן (זהו רשימה פלינדרומית) וסכום האיברים שלו קטן או שווה למשקל המקסימלי האפשרי w.\n     * \n     * דוגמה:\n     * will_it_fly([1, 2], 5) ➞ False\n     * # 1+2 קטן מהמשקל המקסימלי האפשרי, אך הוא לא מאוזן.\n     * \n     * will_it_fly([3, 2, 3], 1) ➞ False\n     * # הוא מאוזן, אך 3+2+3 גדול מהמשקל המקסימלי האפשרי.\n     * \n     * will_it_fly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 קטן מהמשקל המקסימלי האפשרי, והוא מאוזן.\n     * \n     * will_it_fly([3], 5) ➞ True\n     * # 3 קטן מהמשקל המקסימלי האפשרי, והוא מאוזן.\n     * \n     *\n     */\n    def willItFly(q : List[Int], w : Int) : Boolean = {\n", "entry_point": "willItFly", "test": "\n\n    var arg00 : List[Int] = List(3, 2, 3)\n    var arg01 : Int = 9\n    var x0 : Boolean = willItFly(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2)\n    var arg11 : Int = 5\n    var x1 : Boolean = willItFly(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(3)\n    var arg21 : Int = 5\n    var x2 : Boolean = willItFly(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(3, 2, 3)\n    var arg31 : Int = 1\n    var x3 : Boolean = willItFly(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1, 2, 3)\n    var arg41 : Int = 6\n    var x4 : Boolean = willItFly(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(5)\n    var arg51 : Int = 5\n    var x5 : Boolean = willItFly(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "כתוב פונקציה שמחזירה True אם האובייקט q יכול לטוס, ו-False אחרת.\nהאובייקט q יכול לטוס אם הוא מאוזן (זהו רשימה פלינדרומית) וסכום האיברים שלו קטן או שווה למשקל המקסימלי האפשרי w.\n\nדוגמה:\nwill_it_fly([1, 2], 5) ➞ False\n# 1+2 קטן מהמשקל המקסימלי האפשרי, אך הוא לא מאוזן.\n\nwill_it_fly([3, 2, 3], 1) ➞ False\n# הוא מאוזן, אך 3+2+3 גדול מהמשקל המקסימלי האפשרי.\n\nwill_it_fly([3, 2, 3], 9) ➞ True\n# 3+2+3 קטן מהמשקל המקסימלי האפשרי, והוא מאוזן.\n\nwill_it_fly([3], 5) ➞ True\n# 3 קטן מהמשקל המקסימלי האפשרי, והוא מאוזן.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/31", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * כתוב פונקציה שמחזירה אמת אם המספר הנתון הוא כפל של 3 מספרים ראשוניים ושקר אחרת.\n     *     ידוע ש-(a) קטן מ-100.\n     *     לדוגמה:\n     * \n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    def isMultiplyPrime(a : Int) : Boolean = {\n", "entry_point": "isMultiplyPrime", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Boolean = isMultiplyPrime(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 30\n    var x1 : Boolean = isMultiplyPrime(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 8\n    var x2 : Boolean = isMultiplyPrime(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 10\n    var x3 : Boolean = isMultiplyPrime(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 125\n    var x4 : Boolean = isMultiplyPrime(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 105\n    var x5 : Boolean = isMultiplyPrime(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 126\n    var x6 : Boolean = isMultiplyPrime(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 729\n    var x7 : Boolean = isMultiplyPrime(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 891\n    var x8 : Boolean = isMultiplyPrime(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1001\n    var x9 : Boolean = isMultiplyPrime(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n\n}\n", "description": "כתוב פונקציה שמחזירה אמת אם המספר הנתון הוא כפל של 3 מספרים ראשוניים ושקר אחרת.\n    ידוע ש-(a) קטן מ-100.\n    לדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/32", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * יש לך מספר בצורת עשרונית והמטרה שלך היא להמיר אותו לפורמט בינארי. הפונקציה צריכה להחזיר מחרוזת, כאשר כל תו מייצג מספר בינארי. כל תו במחרוזת יהיה '0' או '1'.\n     * \n     * יהיו זוג תווים נוספים 'db' בתחילת ובסוף המחרוזת. התווים הנוספים נמצאים שם כדי לעזור עם הפורמט.\n     * \n     * דוגמאות:\n     * \n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    def decimalToBinary(decimal : Int) : String = {\n", "entry_point": "decimalToBinary", "test": "\n\n    var arg00 : Int = 0\n    var x0 : String = decimalToBinary(arg00)\n    var v0 : String = \"\"\"db0db\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 32\n    var x1 : String = decimalToBinary(arg10)\n    var v1 : String = \"\"\"db100000db\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 103\n    var x2 : String = decimalToBinary(arg20)\n    var v2 : String = \"\"\"db1100111db\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 15\n    var x3 : String = decimalToBinary(arg30)\n    var v3 : String = \"\"\"db1111db\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "יש לך מספר בצורת עשרונית והמטרה שלך היא להמיר אותו לפורמט בינארי. הפונקציה צריכה להחזיר מחרוזת, כאשר כל תו מייצג מספר בינארי. כל תו במחרוזת יהיה '0' או '1'.\n\nיהיו זוג תווים נוספים 'db' בתחילת ובסוף המחרוזת. התווים הנוספים נמצאים שם כדי לעזור עם הפורמט.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/33", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתון לך מחרוזת s.\n     * המטרה שלך היא לבדוק אם המחרוזת היא שמחה או לא.\n     * מחרוזת שמחה היא אם אורכה הוא לפחות 3 וכל 3 אותיות רצופות הם שונים.\n     * לדוגמה:\n     * \n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    def isHappy(s : String) : Boolean = {\n", "entry_point": "isHappy", "test": "\n\n    var arg00 : String = \"\"\"a\"\"\"\n    var x0 : Boolean = isHappy(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"aa\"\"\"\n    var x1 : Boolean = isHappy(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcd\"\"\"\n    var x2 : Boolean = isHappy(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"aabb\"\"\"\n    var x3 : Boolean = isHappy(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"adb\"\"\"\n    var x4 : Boolean = isHappy(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"xyy\"\"\"\n    var x5 : Boolean = isHappy(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"iopaxpoi\"\"\"\n    var x6 : Boolean = isHappy(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"iopaxioi\"\"\"\n    var x7 : Boolean = isHappy(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n\n}\n", "description": "נתון לך מחרוזת s.\nהמטרה שלך היא לבדוק אם המחרוזת היא שמחה או לא.\nמחרוזת שמחה היא אם אורכה הוא לפחות 3 וכל 3 אותיות רצופות הם שונים.\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/34", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * זו השבוע האחרון של הסמסטר והמורה צריך לתת את הציונים לתלמידים. המורה יצרה אלגוריתם משלה לציון. הבעיה היחידה היא שהיא איבדה את הקוד שהשתמשה בו לציון. היא נתנה לך רשימה של ציוני GPA לכמה תלמידים ואתה צריך לכתוב פונקציה שיכולה להפיק רשימה של ציוני אותיות באמצעות הטבלה הבאה:\n     *              GPA       |    Letter grade\n     *               4.0                A+\n     *             > 3.7                A \n     *             > 3.3                A- \n     *             > 3.0                B+\n     *             > 2.7                B \n     *             > 2.3                B-\n     *             > 2.0                C+\n     *             > 1.7                C\n     *             > 1.3                C-\n     *             > 1.0                D+ \n     *             > 0.7                D \n     *             > 0.0                D-\n     *               0.0                E\n     *     \n     * \n     *     דוגמה:\n     * \n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    def numericalLetterGrade(grades : List[Double]) : List[String] = {\n", "entry_point": "numericalLetterGrade", "test": "\n\n    var arg00 : List[Double] = List(4.0, 3, 1.7, 2, 3.5)\n    var x0 : List[String] = numericalLetterGrade(arg00)\n    var v0 : List[String] = List(\"\"\"A+\"\"\", \"\"\"B\"\"\", \"\"\"C-\"\"\", \"\"\"C\"\"\", \"\"\"A-\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(1.2)\n    var x1 : List[String] = numericalLetterGrade(arg10)\n    var v1 : List[String] = List(\"\"\"D+\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(0.5)\n    var x2 : List[String] = numericalLetterGrade(arg20)\n    var v2 : List[String] = List(\"\"\"D-\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(0.0)\n    var x3 : List[String] = numericalLetterGrade(arg30)\n    var v3 : List[String] = List(\"\"\"E\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(1, 0.3, 1.5, 2.8, 3.3)\n    var x4 : List[String] = numericalLetterGrade(arg40)\n    var v4 : List[String] = List(\"\"\"D\"\"\", \"\"\"D-\"\"\", \"\"\"C-\"\"\", \"\"\"B\"\"\", \"\"\"B+\"\"\")\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Double] = List(0, 0.7)\n    var x5 : List[String] = numericalLetterGrade(arg50)\n    var v5 : List[String] = List(\"\"\"E\"\"\", \"\"\"D-\"\"\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "זו השבוע האחרון של הסמסטר והמורה צריך לתת את הציונים לתלמידים. המורה יצרה אלגוריתם משלה לציון. הבעיה היחידה היא שהיא איבדה את הקוד שהשתמשה בו לציון. היא נתנה לך רשימה של ציוני GPA לכמה תלמידים ואתה צריך לכתוב פונקציה שיכולה להפיק רשימה של ציוני אותיות באמצעות הטבלה הבאה:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    דוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/35", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * כתוב פונקציה שמקבלת מחרוזת ומחזירה True אם אורך המחרוזת הוא מספר ראשוני או False אחרת\n     * דוגמאות\n     * \n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    def primeLength(string : String) : Boolean = {\n", "entry_point": "primeLength", "test": "\n\n    var arg00 : String = \"\"\"Hello\"\"\"\n    var x0 : Boolean = primeLength(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdcba\"\"\"\n    var x1 : Boolean = primeLength(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"kittens\"\"\"\n    var x2 : Boolean = primeLength(arg20)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"orange\"\"\"\n    var x3 : Boolean = primeLength(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"wow\"\"\"\n    var x4 : Boolean = primeLength(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"world\"\"\"\n    var x5 : Boolean = primeLength(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"MadaM\"\"\"\n    var x6 : Boolean = primeLength(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"Wow\"\"\"\n    var x7 : Boolean = primeLength(arg70)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"\"\"\"\n    var x8 : Boolean = primeLength(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"HI\"\"\"\n    var x9 : Boolean = primeLength(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"go\"\"\"\n    var x10 : Boolean = primeLength(arg100)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"gogo\"\"\"\n    var x11 : Boolean = primeLength(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"aaaaaaaaaaaaaaa\"\"\"\n    var x12 : Boolean = primeLength(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : String = \"\"\"Madam\"\"\"\n    var x13 : Boolean = primeLength(arg130)\n    var v13 : Boolean = true\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n    var arg140 : String = \"\"\"M\"\"\"\n    var x14 : Boolean = primeLength(arg140)\n    var v14 : Boolean = false\n    assert(x14 == v14, \"Exception -- test case 14 did not pass. x14 = \" + x14)\n\n    var arg150 : String = \"\"\"0\"\"\"\n    var x15 : Boolean = primeLength(arg150)\n    var v15 : Boolean = false\n    assert(x15 == v15, \"Exception -- test case 15 did not pass. x15 = \" + x15)\n\n\n}\n", "description": "כתוב פונקציה שמקבלת מחרוזת ומחזירה True אם אורך המחרוזת הוא מספר ראשוני או False אחרת\nדוגמאות", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/36", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתון מספר שלם חיובי N, החזר את סכום הספרות שלו במספרים בינאריים.\n     * \n     * דוגמה:\n     * עבור N = 1000, סכום הספרות יהיה 1 והפלט צריך להיות \"1\".\n     * עבור N = 150, סכום הספרות יהיה 6 והפלט צריך להיות \"110\".\n     * עבור N = 147, סכום הספרות יהיה 12 והפלט צריך להיות \"1100\".\n     * \n     * משתנים:\n     * @N מספר שלם\n     *      הגבלות: 0 ≤ N ≤ 10000.\n     * \n     * פלט:\n     * מחרוזת מספר בינארי.\n     * \n     *\n     */\n    def solve(n : Int) : String = {\n", "entry_point": "solve", "test": "\n\n    var arg00 : Int = 1000\n    var x0 : String = solve(arg00)\n    var v0 : String = \"\"\"1\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 150\n    var x1 : String = solve(arg10)\n    var v1 : String = \"\"\"110\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 147\n    var x2 : String = solve(arg20)\n    var v2 : String = \"\"\"1100\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 333\n    var x3 : String = solve(arg30)\n    var v3 : String = \"\"\"1001\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 963\n    var x4 : String = solve(arg40)\n    var v4 : String = \"\"\"10010\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "נתון מספר שלם חיובי N, החזר את סכום הספרות שלו במספרים בינאריים.\n\nדוגמה:\nעבור N = 1000, סכום הספרות יהיה 1 והפלט צריך להיות \"1\".\nעבור N = 150, סכום הספרות יהיה 6 והפלט צריך להיות \"110\".\nעבור N = 147, סכום הספרות יהיה 12 והפלט צריך להיות \"1100\".\n\nמשתנים:\n@N מספר שלם\n     הגבלות: 0 ≤ N ≤ 10000.\n\nפלט:\nמחרוזת מספר בינארי.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/37", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון לך נתונים דו-ממדיים, בתור רשימות מקוננות, הדומים למטריצה, אך לא כמו מטריצות, כיוון שכל שורה עשויה להכיל מספר שונה של עמודות. נתון רשימה (lst) ומספר שלם (x), מצא מספרים שווים ל-x ברשימה והחזר רשימת זוגות, [(x1, y1), (x2, y2) ...] כך שכל זוג הוא קואורדינטה - (שורה, עמודות), החל מ-0. מיין את הקואורדינטות בהתחלה לפי השורות בסדר עולה. כמו כן, מיין את הקואורדינטות של השורה לפי העמודות בסדר יורד.\n     * \n     * דוגמאות:\n     * \n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    def getRow(lst : List[Any], x : Int) : List[Any] = {\n", "entry_point": "getRow", "test": "\n\n    var arg00 : List[Any] = List()\n    var arg01 : Int = 1\n    var x0 : List[Any] = getRow(arg00, arg01)\n    var v0 : List[Any] = List()\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(List(1))\n    var arg11 : Int = 2\n    var x1 : List[Any] = getRow(arg10, arg11)\n    var v1 : List[Any] = List()\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(List(), List(1), List(1, 2, 3))\n    var arg21 : Int = 3\n    var x2 : List[Any] = getRow(arg20, arg21)\n    var v2 : List[Any] = List(List(2, 2))\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n\n}\n", "description": "נתון לך נתונים דו-ממדיים, בתור רשימות מקוננות, הדומים למטריצה, אך לא כמו מטריצות, כיוון שכל שורה עשויה להכיל מספר שונה של עמודות. נתון רשימה (lst) ומספר שלם (x), מצא מספרים שווים ל-x ברשימה והחזר רשימת זוגות, [(x1, y1), (x2, y2) ...] כך שכל זוג הוא קואורדינטה - (שורה, עמודות), החל מ-0. מיין את הקואורדינטות בהתחלה לפי השורות בסדר עולה. כמו כן, מיין את הקואורדינטות של השורה לפי העמודות בסדר יורד.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/38", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * קיבלת רשימה של מספרים שלמים.\n     * כתוב פונקציה next_smallest() שמחזירה את האיבר השני הקטן ביותר ברשימה.\n     * החזר null אם אין איבר כזה.\n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    def nextSmallest(lst : List[Any]) : Any = {\n", "entry_point": "nextSmallest", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 3, 4, 5)\n    var x0 : Any = nextSmallest(arg00)\n    var v0 : Any = 2\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 1, 4, 3, 2)\n    var x1 : Any = nextSmallest(arg10)\n    var v1 : Any = 2\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List()\n    var x2 : Any = nextSmallest(arg20)\n    var v2 : Any = \"none\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, 1)\n    var x3 : Any = nextSmallest(arg30)\n    var v3 : Any = \"none\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, 1, 1, 1, 0)\n    var x4 : Any = nextSmallest(arg40)\n    var v4 : Any = 1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1, 1)\n    var x5 : Any = nextSmallest(arg50)\n    var v5 : Any = \"none\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(-35, 34, 12, -45)\n    var x6 : Any = nextSmallest(arg60)\n    var v6 : Any = -35\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "קיבלת רשימה של מספרים שלמים.\nכתוב פונקציה next_smallest() שמחזירה את האיבר השני הקטן ביותר ברשימה.\nהחזר null אם אין איבר כזה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/39", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * ינתן לך מחרוזת של מילים, ומטרתך היא לספור את מספר המשעממויות. משעממות הן משפטים שמתחילים עם המילה \"אני\". משפטים מופרדים על ידי '.', '?' או '!'.\n     * \n     * לדוגמה:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    def isBored(s : String) : Int = {\n", "entry_point": "isBored", "test": "\n\n    var arg00 : String = \"\"\"Hello world\"\"\"\n    var x0 : Int = isBored(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Is the sky blue?\"\"\"\n    var x1 : Int = isBored(arg10)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"I love It !\"\"\"\n    var x2 : Int = isBored(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"bIt\"\"\"\n    var x3 : Int = isBored(arg30)\n    var v3 : Int = 0\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"I feel good today. I will be productive. will kill It\"\"\"\n    var x4 : Int = isBored(arg40)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"You and I are going for a walk\"\"\"\n    var x5 : Int = isBored(arg50)\n    var v5 : Int = 0\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "ינתן לך מחרוזת של מילים, ומטרתך היא לספור את מספר המשעממויות. משעממות הן משפטים שמתחילים עם המילה \"אני\". משפטים מופרדים על ידי '.', '?' או '!'.\n\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/40", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתונה לך רשימה של מספרים שלמים.\n     * עליך למצוא את הערך הראשון הגדול ביותר שהוא מספר ראשוני ולהחזיר את סכום הספרות שלו.\n     * \n     * דוגמאות:\n     * \n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    def skjkasdkd(lst : List[Int]) : Int = {\n", "entry_point": "skjkasdkd", "test": "\n\n    var arg00 : List[Int] = List(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)\n    var x0 : Int = skjkasdkd(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)\n    var x1 : Int = skjkasdkd(arg10)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)\n    var x2 : Int = skjkasdkd(arg20)\n    var v2 : Int = 13\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)\n    var x3 : Int = skjkasdkd(arg30)\n    var v3 : Int = 11\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(0, 81, 12, 3, 1, 21)\n    var x4 : Int = skjkasdkd(arg40)\n    var v4 : Int = 3\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(0, 8, 1, 2, 1, 7)\n    var x5 : Int = skjkasdkd(arg50)\n    var v5 : Int = 7\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(8191)\n    var x6 : Int = skjkasdkd(arg60)\n    var v6 : Int = 19\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(8191, 123456, 127, 7)\n    var x7 : Int = skjkasdkd(arg70)\n    var v7 : Int = 19\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(127, 97, 8192)\n    var x8 : Int = skjkasdkd(arg80)\n    var v8 : Int = 10\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "נתונה לך רשימה של מספרים שלמים.\nעליך למצוא את הערך הראשון הגדול ביותר שהוא מספר ראשוני ולהחזיר את סכום הספרות שלו.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/41", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מילון, החזר True אם כל המפתחות הם מחרוזות באותיות קטנות או כל המפתחות הם מחרוזות באותיות גדולות, אחרת החזר False. הפונקציה צריכה להחזיר False אם המילון הנתון ריק. דוגמאות:\n     * \n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    def checkDictCase(dict : Map[Any, Any]) : Boolean = {\n", "entry_point": "checkDictCase", "test": "\n\n    var arg00 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", \"\"\"b\"\"\" -> \"\"\"banana\"\"\")\n    var x0 : Boolean = checkDictCase(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", \"\"\"A\"\"\" -> \"\"\"banana\"\"\", \"\"\"B\"\"\" -> \"\"\"banana\"\"\")\n    var x1 : Boolean = checkDictCase(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Map[Any, Any] = Map(\"\"\"p\"\"\" -> \"\"\"pineapple\"\"\", 5 -> \"\"\"banana\"\"\", \"\"\"a\"\"\" -> \"\"\"apple\"\"\")\n    var x2 : Boolean = checkDictCase(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Map[Any, Any] = Map(\"\"\"Name\"\"\" -> \"\"\"John\"\"\", \"\"\"Age\"\"\" -> \"\"\"36\"\"\", \"\"\"City\"\"\" -> \"\"\"Houston\"\"\")\n    var x3 : Boolean = checkDictCase(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Map[Any, Any] = Map(\"\"\"STATE\"\"\" -> \"\"\"NC\"\"\", \"\"\"ZIP\"\"\" -> \"\"\"12345\"\"\")\n    var x4 : Boolean = checkDictCase(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Map[Any, Any] = Map(\"\"\"fruit\"\"\" -> \"\"\"Orange\"\"\", \"\"\"taste\"\"\" -> \"\"\"Sweet\"\"\")\n    var x5 : Boolean = checkDictCase(arg50)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Map[Any, Any] = Map()\n    var x6 : Boolean = checkDictCase(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "נתון מילון, החזר True אם כל המפתחות הם מחרוזות באותיות קטנות או כל המפתחות הם מחרוזות באותיות גדולות, אחרת החזר False. הפונקציה צריכה להחזיר False אם המילון הנתון ריק. דוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/42", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * צור פונקציה שמקבלת ערך (מחרוזת) המייצג מספר ומחזירה את המספר השלם הקרוב ביותר אליו. אם המספר זהה מרחק משני מספרים שלמים, עגל אותו לפי הכיוון המרחק מהאפס.\n     * \n     * דוגמאות:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    def closestInteger(value : String) : Int = {\n", "entry_point": "closestInteger", "test": "\n\n    var arg00 : String = \"\"\"10\"\"\"\n    var x0 : Int = closestInteger(arg00)\n    var v0 : Int = 10\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"14.5\"\"\"\n    var x1 : Int = closestInteger(arg10)\n    var v1 : Int = 15\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"-15.5\"\"\"\n    var x2 : Int = closestInteger(arg20)\n    var v2 : Int = -16\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"15.3\"\"\"\n    var x3 : Int = closestInteger(arg30)\n    var v3 : Int = 15\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"0\"\"\"\n    var x4 : Int = closestInteger(arg40)\n    var v4 : Int = 0\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "צור פונקציה שמקבלת ערך (מחרוזת) המייצג מספר ומחזירה את המספר השלם הקרוב ביותר אליו. אם המספר זהה מרחק משני מספרים שלמים, עגל אותו לפי הכיוון המרחק מהאפס.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/43", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מספר שלם חיובי n, עליך ליצור ערימה של n רמות אבנים.\n     * הרמה הראשונה כוללת n אבנים.\n     * מספר האבנים ברמה הבאה הוא:\n     * - המספר הבא האי-זוגי אם n הוא מספר אי-זוגי.\n     * - המספר הבא הזוגי אם n הוא מספר זוגי.\n     * החזר את מספר האבנים בכל רמה ברשימה, כאשר האיבר במקום i מייצג את מספר האבנים ברמה (i+1).\n     * \n     * דוגמאות:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    def makeAPile(n : Int) : List[Int] = {\n", "entry_point": "makeAPile", "test": "\n\n    var arg00 : Int = 3\n    var x0 : List[Int] = makeAPile(arg00)\n    var v0 : List[Int] = List(3, 5, 7)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : List[Int] = makeAPile(arg10)\n    var v1 : List[Int] = List(4, 6, 8, 10)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : List[Int] = makeAPile(arg20)\n    var v2 : List[Int] = List(5, 7, 9, 11, 13)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 6\n    var x3 : List[Int] = makeAPile(arg30)\n    var v3 : List[Int] = List(6, 8, 10, 12, 14, 16)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 8\n    var x4 : List[Int] = makeAPile(arg40)\n    var v4 : List[Int] = List(8, 10, 12, 14, 16, 18, 20, 22)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "נתון מספר שלם חיובי n, עליך ליצור ערימה של n רמות אבנים.\nהרמה הראשונה כוללת n אבנים.\nמספר האבנים ברמה הבאה הוא:\n- המספר הבא האי-זוגי אם n הוא מספר אי-זוגי.\n- המספר הבא הזוגי אם n הוא מספר זוגי.\nהחזר את מספר האבנים בכל רמה ברשימה, כאשר האיבר במקום i מייצג את מספר האבנים ברמה (i+1).\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/44", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * ינתן לך מחרוזת של מילים המופרדות בפסיקים או ברווחים. המטרה שלך היא לפצל את המחרוזת למילים ולהחזיר מערך של המילים.\n     * \n     * לדוגמה:\n     * \n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    def wordsString(s : String) : List[Any] = {\n", "entry_point": "wordsString", "test": "\n\n    var arg00 : String = \"\"\"Hi, my name is John\"\"\"\n    var x0 : List[Any] = wordsString(arg00)\n    var v0 : List[Any] = List(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\", \"\"\"is\"\"\", \"\"\"John\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"One, two, three, four, five, six\"\"\"\n    var x1 : List[Any] = wordsString(arg10)\n    var v1 : List[Any] = List(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Hi, my name\"\"\"\n    var x2 : List[Any] = wordsString(arg20)\n    var v2 : List[Any] = List(\"\"\"Hi\"\"\", \"\"\"my\"\"\", \"\"\"name\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"One,, two, three, four, five, six,\"\"\"\n    var x3 : List[Any] = wordsString(arg30)\n    var v3 : List[Any] = List(\"\"\"One\"\"\", \"\"\"two\"\"\", \"\"\"three\"\"\", \"\"\"four\"\"\", \"\"\"five\"\"\", \"\"\"six\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"\"\"\"\n    var x4 : List[Any] = wordsString(arg40)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"ahmed     , gamal\"\"\"\n    var x5 : List[Any] = wordsString(arg50)\n    var v5 : List[Any] = List(\"\"\"ahmed\"\"\", \"\"\"gamal\"\"\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "ינתן לך מחרוזת של מילים המופרדות בפסיקים או ברווחים. המטרה שלך היא לפצל את המחרוזת למילים ולהחזיר מערך של המילים.\n\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/45", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * פונקציה זו מקבלת שני מספרים חיוביים x ו-y ומחזירה את המספר הזוגי הגדול ביותר שנמצא בטווח [x, y] כולל. אם אין מספר כזה, הפונקציה צריכה להחזיר -1.\n     * \n     * לדוגמה:\n     * \n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    def chooseNum(x : Int, y : Int) : Int = {\n", "entry_point": "chooseNum", "test": "\n\n    var arg00 : Int = 12\n    var arg01 : Int = 15\n    var x0 : Int = chooseNum(arg00, arg01)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 13\n    var arg11 : Int = 12\n    var x1 : Int = chooseNum(arg10, arg11)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 33\n    var arg21 : Int = 12354\n    var x2 : Int = chooseNum(arg20, arg21)\n    var v2 : Int = 12354\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5234\n    var arg31 : Int = 5233\n    var x3 : Int = chooseNum(arg30, arg31)\n    var v3 : Int = -1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 6\n    var arg41 : Int = 29\n    var x4 : Int = chooseNum(arg40, arg41)\n    var v4 : Int = 28\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 27\n    var arg51 : Int = 10\n    var x5 : Int = chooseNum(arg50, arg51)\n    var v5 : Int = -1\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 7\n    var arg61 : Int = 7\n    var x6 : Int = chooseNum(arg60, arg61)\n    var v6 : Int = -1\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 546\n    var arg71 : Int = 546\n    var x7 : Int = chooseNum(arg70, arg71)\n    var v7 : Int = 546\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n\n}\n", "description": "פונקציה זו מקבלת שני מספרים חיוביים x ו-y ומחזירה את המספר הזוגי הגדול ביותר שנמצא בטווח [x, y] כולל. אם אין מספר כזה, הפונקציה צריכה להחזיר -1.\n\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/46", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתונים שני מספרים שלמים חיוביים n ו-m, והמטרה שלך היא לחשב את הממוצע של המספרים מ-n עד m (כולל n ו-m). עגל את התשובה למספר השלם הקרוב ביותר והמר את זה לבינארי. אם n גדול מ-m, החזר -1. דוגמה:\n     * \n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    def roundedAvg(n : Int, m : Int) : Any = {\n", "entry_point": "roundedAvg", "test": "\n\n    var arg00 : Int = 1\n    var arg01 : Int = 5\n    var x0 : Any = roundedAvg(arg00, arg01)\n    var v0 : Any = \"\"\"0b11\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var arg11 : Int = 13\n    var x1 : Any = roundedAvg(arg10, arg11)\n    var v1 : Any = \"\"\"0b1010\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 964\n    var arg21 : Int = 977\n    var x2 : Any = roundedAvg(arg20, arg21)\n    var v2 : Any = \"\"\"0b1111001010\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 996\n    var arg31 : Int = 997\n    var x3 : Any = roundedAvg(arg30, arg31)\n    var v3 : Any = \"\"\"0b1111100100\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 560\n    var arg41 : Int = 851\n    var x4 : Any = roundedAvg(arg40, arg41)\n    var v4 : Any = \"\"\"0b1011000010\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 185\n    var arg51 : Int = 546\n    var x5 : Any = roundedAvg(arg50, arg51)\n    var v5 : Any = \"\"\"0b101101110\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 362\n    var arg61 : Int = 496\n    var x6 : Any = roundedAvg(arg60, arg61)\n    var v6 : Any = \"\"\"0b110101101\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 350\n    var arg71 : Int = 902\n    var x7 : Any = roundedAvg(arg70, arg71)\n    var v7 : Any = \"\"\"0b1001110010\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 197\n    var arg81 : Int = 233\n    var x8 : Any = roundedAvg(arg80, arg81)\n    var v8 : Any = \"\"\"0b11010111\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 7\n    var arg91 : Int = 5\n    var x9 : Any = roundedAvg(arg90, arg91)\n    var v9 : Any = -1\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 5\n    var arg101 : Int = 1\n    var x10 : Any = roundedAvg(arg100, arg101)\n    var v10 : Any = -1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 5\n    var arg111 : Int = 5\n    var x11 : Any = roundedAvg(arg110, arg111)\n    var v11 : Any = \"\"\"0b101\"\"\"\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n\n}\n", "description": "נתונים שני מספרים שלמים חיוביים n ו-m, והמטרה שלך היא לחשב את הממוצע של המספרים מ-n עד m (כולל n ו-m). עגל את התשובה למספר השלם הקרוב ביותר והמר את זה לבינארי. אם n גדול מ-m, החזר -1. דוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/47", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * מימוש הפונקציה f שמקבלת את n כפרמטר ומחזירה רשימה בגודל n, כך שערך האיבר במקום i הוא הפקטוריאל של i אם i הוא מספר זוגי, או סכום המספרים מ-1 עד i אחרת. i מתחיל מ-1. הפקטוריאל של i הוא הכפל של המספרים מ-1 עד i (1 * 2 * ... * i). דוגמה:\n     * \n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    def f(n : Int) : List[Int] = {\n", "entry_point": "f", "test": "\n\n    var arg00 : Int = 5\n    var x0 : List[Int] = f(arg00)\n    var v0 : List[Int] = List(1, 2, 6, 24, 15)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 7\n    var x1 : List[Int] = f(arg10)\n    var v1 : List[Int] = List(1, 2, 6, 24, 15, 720, 28)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 1\n    var x2 : List[Int] = f(arg20)\n    var v2 : List[Int] = List(1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 3\n    var x3 : List[Int] = f(arg30)\n    var v3 : List[Int] = List(1, 2, 6)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "מימוש הפונקציה f שמקבלת את n כפרמטר ומחזירה רשימה בגודל n, כך שערך האיבר במקום i הוא הפקטוריאל של i אם i הוא מספר זוגי, או סכום המספרים מ-1 עד i אחרת. i מתחיל מ-1. הפקטוריאל של i הוא הכפל של המספרים מ-1 עד i (1 * 2 * ... * i). דוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/48", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מספר שלם חיובי n, יש להחזיר טאפל שמכיל את מספר הפלינדרומים הזוגיים והאי זוגיים שנמצאים בטווח (1, n), כולל.\n     * \n     * דוגמה 1:\n     * \n     *     קלט: 3\n     *     פלט: (1, 2)\n     *     הסבר:\n     *     פלינדרומים הם 1, 2, 3. אחד מהם הוא זוגי ושניים מהם הם אי זוגיים.\n     * \n     * דוגמה 2:\n     * \n     *     קלט: 12\n     *     פלט: (4, 6)\n     *     הסבר:\n     *     פלינדרומים הם 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ארבעה מהם הם זוגיים וששה מהם הם אי זוגיים.\n     * \n     * הערה:\n     *     1. 1 <= n <= 10^3\n     *     2. הטאפל שמוחזר מכיל את מספר הפלינדרומים הזוגיים והאי זוגיים בהתאמה.\n     * \n     *\n     */\n    def evenOddPalindrome(n : Int) : List[Int] = {\n", "entry_point": "evenOddPalindrome", "test": "\n\n    var arg00 : Int = 123\n    var x0 : List[Int] = evenOddPalindrome(arg00)\n    var v0 : List[Int] = List(8, 13)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 12\n    var x1 : List[Int] = evenOddPalindrome(arg10)\n    var v1 : List[Int] = List(4, 6)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var x2 : List[Int] = evenOddPalindrome(arg20)\n    var v2 : List[Int] = List(1, 2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 63\n    var x3 : List[Int] = evenOddPalindrome(arg30)\n    var v3 : List[Int] = List(6, 8)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 25\n    var x4 : List[Int] = evenOddPalindrome(arg40)\n    var v4 : List[Int] = List(5, 6)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 19\n    var x5 : List[Int] = evenOddPalindrome(arg50)\n    var v5 : List[Int] = List(4, 6)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 9\n    var x6 : List[Int] = evenOddPalindrome(arg60)\n    var v6 : List[Int] = List(4, 5)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 1\n    var x7 : List[Int] = evenOddPalindrome(arg70)\n    var v7 : List[Int] = List(0, 1)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n\n}\n", "description": "נתון מספר שלם חיובי n, יש להחזיר טאפל שמכיל את מספר הפלינדרומים הזוגיים והאי זוגיים שנמצאים בטווח (1, n), כולל.\n\nדוגמה 1:\n\n    קלט: 3\n    פלט: (1, 2)\n    הסבר:\n    פלינדרומים הם 1, 2, 3. אחד מהם הוא זוגי ושניים מהם הם אי זוגיים.\n\nדוגמה 2:\n\n    קלט: 12\n    פלט: (4, 6)\n    הסבר:\n    פלינדרומים הם 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ארבעה מהם הם זוגיים וששה מהם הם אי זוגיים.\n\nהערה:\n    1. 1 <= n <= 10^3\n    2. הטאפל שמוחזר מכיל את מספר הפלינדרומים הזוגיים והאי זוגיים בהתאמה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/49", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * יש לנו מערך 'arr' של N מספרים arr[1], arr[2], ..., arr[N]. המספרים במערך יהיו בסדר רנדומלי. המטרה שלך היא לקבוע אם ניתן לקבל מערך ממוין בסדר לא יורד על ידי ביצוע הפעולה הבאה על המערך הנתון:\n     *     ניתן לבצע פעולת הזזת ימינה כל מספר של פעמים.\n     *     \n     *     פעולת ההזזה הימנית אחת משמעותה להזיז את כל האיברים של המערך במקום אחד לכיוון הימין. האיבר האחרון של המערך יועבר למקום ההתחלתי במערך, כלומר לאינדקס 0.\n     * \n     *     אם ניתן לקבל את המערך הממוין על ידי ביצוע הפעולה הנ\"ל, יש להחזיר True, אחרת יש להחזיר False.\n     *     אם המערך הנתון ריק, יש להחזיר True.\n     * \n     *     לתשומת לב: הרשימה הנתונה מובטחת להכיל איברים ייחודיים.\n     * \n     *     לדוגמה:\n     * \n     *     move_one_ball([3, 4, 5, 1, 2])==>True\n     *     הסבר: על ידי ביצוע 2 פעולות הזזה ימינה, ניתן להשיג סדר לא יורד עבור המערך הנתון.\n     *     move_one_ball([3, 5, 4, 1, 2])==>False\n     *     הסבר: אי אפשר לקבל סדר לא יורד עבור המערך הנתון על ידי ביצוע כל מספר של פעולות הזזה ימינה.\n     * \n     *             \n     *\n     */\n    def moveOneBall(arr : List[Any]) : Boolean = {\n", "entry_point": "moveOneBall", "test": "\n\n    var arg00 : List[Any] = List(3, 4, 5, 1, 2)\n    var x0 : Boolean = moveOneBall(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(3, 5, 10, 1, 2)\n    var x1 : Boolean = moveOneBall(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(4, 3, 1, 2)\n    var x2 : Boolean = moveOneBall(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(3, 5, 4, 1, 2)\n    var x3 : Boolean = moveOneBall(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List()\n    var x4 : Boolean = moveOneBall(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "יש לנו מערך 'arr' של N מספרים arr[1], arr[2], ..., arr[N]. המספרים במערך יהיו בסדר רנדומלי. המטרה שלך היא לקבוע אם ניתן לקבל מערך ממוין בסדר לא יורד על ידי ביצוע הפעולה הבאה על המערך הנתון:\n    ניתן לבצע פעולת הזזת ימינה כל מספר של פעמים.\n    \n    פעולת ההזזה הימנית אחת משמעותה להזיז את כל האיברים של המערך במקום אחד לכיוון הימין. האיבר האחרון של המערך יועבר למקום ההתחלתי במערך, כלומר לאינדקס 0.\n\n    אם ניתן לקבל את המערך הממוין על ידי ביצוע הפעולה הנ\"ל, יש להחזיר True, אחרת יש להחזיר False.\n    אם המערך הנתון ריק, יש להחזיר True.\n\n    לתשומת לב: הרשימה הנתונה מובטחת להכיל איברים ייחודיים.\n\n    לדוגמה:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    הסבר: על ידי ביצוע 2 פעולות הזזה ימינה, ניתן להשיג סדר לא יורד עבור המערך הנתון.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    הסבר: אי אפשר לקבל סדר לא יורד עבור המערך הנתון על ידי ביצוע כל מספר של פעולות הזזה ימינה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/50", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * בבעיה זו, תכתבו פונקציה שמקבלת שתי רשימות של מספרים,\n     *     ומקבלת החלטה אם ניתן לבצע החלפת איברים\n     *     ביניהם כדי להפוך את lst1 לרשימה של מספרים זוגיים בלבד.\n     *     אין מגבלה על מספר האיברים שניתן להחליף בין lst1 ו-lst2.\n     *     אם ניתן להחליף איברים בין lst1 ו-lst2 כדי להפוך\n     *     את כל האיברים של lst1 להיות זוגיים, יש להחזיר \"YES\".\n     *     אחרת, יש להחזיר \"NO\".\n     *     לדוגמה:\n     *     exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     *     exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     *     ניתן להניח כי הרשימות הקלט יהיו לא ריקות.\n     * \n     *\n     */\n    def exchange(lst1 : List[Int], lst2 : List[Int]) : String = {\n", "entry_point": "exchange", "test": "\n\n    var arg00 : List[Int] = List(1, 2, 3, 4)\n    var arg01 : List[Int] = List(1, 2, 3, 4)\n    var x0 : String = exchange(arg00, arg01)\n    var v0 : String = \"\"\"YES\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(1, 2, 3, 4)\n    var arg11 : List[Int] = List(1, 5, 3, 4)\n    var x1 : String = exchange(arg10, arg11)\n    var v1 : String = \"\"\"NO\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(1, 2, 3, 4)\n    var arg21 : List[Int] = List(2, 1, 4, 3)\n    var x2 : String = exchange(arg20, arg21)\n    var v2 : String = \"\"\"YES\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(5, 7, 3)\n    var arg31 : List[Int] = List(2, 6, 4)\n    var x3 : String = exchange(arg30, arg31)\n    var v3 : String = \"\"\"YES\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(5, 7, 3)\n    var arg41 : List[Int] = List(2, 6, 3)\n    var x4 : String = exchange(arg40, arg41)\n    var v4 : String = \"\"\"NO\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(3, 2, 6, 1, 8, 9)\n    var arg51 : List[Int] = List(3, 5, 5, 1, 1, 1)\n    var x5 : String = exchange(arg50, arg51)\n    var v5 : String = \"\"\"NO\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(100, 200)\n    var arg61 : List[Int] = List(200, 200)\n    var x6 : String = exchange(arg60, arg61)\n    var v6 : String = \"\"\"YES\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "בבעיה זו, תכתבו פונקציה שמקבלת שתי רשימות של מספרים,\n    ומקבלת החלטה אם ניתן לבצע החלפת איברים\n    ביניהם כדי להפוך את lst1 לרשימה של מספרים זוגיים בלבד.\n    אין מגבלה על מספר האיברים שניתן להחליף בין lst1 ו-lst2.\n    אם ניתן להחליף איברים בין lst1 ו-lst2 כדי להפוך\n    את כל האיברים של lst1 להיות זוגיים, יש להחזיר \"YES\".\n    אחרת, יש להחזיר \"NO\".\n    לדוגמה:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    ניתן להניח כי הרשימות הקלט יהיו לא ריקות.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/51", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * מטלה\n     *     נתונות שתי מחרוזות s ו-c, עליכם למחוק את כל התווים ב-s שזהים לכל תו ב-c\n     *     ולאחר מכן לבדוק אם המחרוזת התוצאה היא פלינדרום.\n     *     מחרוזת נקראת פלינדרום אם היא קוראת אותו הדבר לפנים ולאחור.\n     *     עליכם להחזיר טופל המכיל את המחרוזת התוצאה ו-True/False עבור הבדיקה.\n     *     דוגמא\n     *     עבור s = \"abcde\", c = \"ae\", התוצאה צריכה להיות ('bcd',False)\n     *     עבור s = \"abcdef\", c = \"b\" התוצאה צריכה להיות ('acdef',False)\n     *     עבור s = \"abcdedcba\", c = \"ab\", התוצאה צריכה להיות ('cdedc',True)\n     * \n     *\n     */\n    def reverseDelete(s : String, c : String) : List[Any] = {\n", "entry_point": "reverseDelete", "test": "\n\n    var arg00 : String = \"\"\"abcde\"\"\"\n    var arg01 : String = \"\"\"ae\"\"\"\n    var x0 : List[Any] = reverseDelete(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"bcd\"\"\", false)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"abcdef\"\"\"\n    var arg11 : String = \"\"\"b\"\"\"\n    var x1 : List[Any] = reverseDelete(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"acdef\"\"\", false)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"abcdedcba\"\"\"\n    var arg21 : String = \"\"\"ab\"\"\"\n    var x2 : List[Any] = reverseDelete(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"cdedc\"\"\", true)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"dwik\"\"\"\n    var arg31 : String = \"\"\"w\"\"\"\n    var x3 : List[Any] = reverseDelete(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"dik\"\"\", false)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"a\"\"\"\n    var arg41 : String = \"\"\"a\"\"\"\n    var x4 : List[Any] = reverseDelete(arg40, arg41)\n    var v4 : List[Any] = List(\"\"\"\"\"\", true)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"abcdedcba\"\"\"\n    var arg51 : String = \"\"\"\"\"\"\n    var x5 : List[Any] = reverseDelete(arg50, arg51)\n    var v5 : List[Any] = List(\"\"\"abcdedcba\"\"\", true)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"abcdedcba\"\"\"\n    var arg61 : String = \"\"\"v\"\"\"\n    var x6 : List[Any] = reverseDelete(arg60, arg61)\n    var v6 : List[Any] = List(\"\"\"abcdedcba\"\"\", true)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"vabba\"\"\"\n    var arg71 : String = \"\"\"v\"\"\"\n    var x7 : List[Any] = reverseDelete(arg70, arg71)\n    var v7 : List[Any] = List(\"\"\"abba\"\"\", true)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"mamma\"\"\"\n    var arg81 : String = \"\"\"mia\"\"\"\n    var x8 : List[Any] = reverseDelete(arg80, arg81)\n    var v8 : List[Any] = List(\"\"\"\"\"\", true)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "מטלה\n    נתונות שתי מחרוזות s ו-c, עליכם למחוק את כל התווים ב-s שזהים לכל תו ב-c\n    ולאחר מכן לבדוק אם המחרוזת התוצאה היא פלינדרום.\n    מחרוזת נקראת פלינדרום אם היא קוראת אותו הדבר לפנים ולאחור.\n    עליכם להחזיר טופל המכיל את המחרוזת התוצאה ו-True/False עבור הבדיקה.\n    דוגמא\n    עבור s = \"abcde\", c = \"ae\", התוצאה צריכה להיות ('bcd',False)\n    עבור s = \"abcdef\", c = \"b\" התוצאה צריכה להיות ('acdef',False)\n    עבור s = \"abcdedcba\", c = \"ab\", התוצאה צריכה להיות ('cdedc',True)", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/52", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * קיבלתם רשת מלבנית של בארות. כל שורה מייצגת באר יחידה, וכל 1 בשורה מייצג יחידת מים יחידה. לכל באר יש דלי תואם שניתן להשתמש בו כדי לחלץ מים ממנו, וכל הדליים יש להם את אותה הקיבולת. המטרה שלכם היא להשתמש בדליים כדי לרוקן את הבארות. פלט: מספר הפעמים שעליכם להוריד את הדליים.\n     * \n     * דוגמה 1:\n     *     קלט:\n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     פלט: 6\n     * \n     * דוגמה 2:\n     *     קלט:\n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     פלט: 5\n     * \n     * דוגמה 3:\n     *     קלט:\n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     פלט: 0\n     * \n     * הגבלות:\n     *     * כל הבארות יש להם אותו אורך\n     *     * 1 <= אורך הרשת <= 10^2\n     *     * 1 <= אורך השורה הראשונה של הרשת <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= קיבולת <= 10\n     * \n     *\n     */\n    def maxFill(grid : List[List[Int]], capacity : Int) : Int = {\n", "entry_point": "maxFill", "test": "\n\n    var arg00 : List[List[Int]] = List(List(0, 0, 1, 0), List(0, 1, 0, 0), List(1, 1, 1, 1))\n    var arg01 : Int = 1\n    var x0 : Int = maxFill(arg00, arg01)\n    var v0 : Int = 6\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[List[Int]] = List(List(0, 0, 1, 1), List(0, 0, 0, 0), List(1, 1, 1, 1), List(0, 1, 1, 1))\n    var arg11 : Int = 2\n    var x1 : Int = maxFill(arg10, arg11)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[List[Int]] = List(List(0, 0, 0), List(0, 0, 0))\n    var arg21 : Int = 5\n    var x2 : Int = maxFill(arg20, arg21)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[List[Int]] = List(List(1, 1, 1, 1), List(1, 1, 1, 1))\n    var arg31 : Int = 2\n    var x3 : Int = maxFill(arg30, arg31)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[List[Int]] = List(List(1, 1, 1, 1), List(1, 1, 1, 1))\n    var arg41 : Int = 9\n    var x4 : Int = maxFill(arg40, arg41)\n    var v4 : Int = 2\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "קיבלתם רשת מלבנית של בארות. כל שורה מייצגת באר יחידה, וכל 1 בשורה מייצג יחידת מים יחידה. לכל באר יש דלי תואם שניתן להשתמש בו כדי לחלץ מים ממנו, וכל הדליים יש להם את אותה הקיבולת. המטרה שלכם היא להשתמש בדליים כדי לרוקן את הבארות. פלט: מספר הפעמים שעליכם להוריד את הדליים.\n\nדוגמה 1:\n    קלט:\n        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity : 1\n    פלט: 6\n\nדוגמה 2:\n    קלט:\n        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity : 2\n    פלט: 5\n\nדוגמה 3:\n    קלט:\n        grid : [[0,0,0], [0,0,0]]\n        bucket_capacity : 5\n    פלט: 0\n\nהגבלות:\n    * כל הבארות יש להם אותו אורך\n    * 1 <= אורך הרשת <= 10^2\n    * 1 <= אורך השורה הראשונה של הרשת <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= קיבולת <= 10", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/53", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתון מחרוזת s ומספר טבעי n, עליך לממש פונקציה שמחזירה רשימה של כל המילים מהמחרוזת s שמכילות בדיוק n עיצורים, בסדר שהן מופיעות במחרוזת s. אם המחרוזת s ריקה, הפונקציה צריכה להחזיר רשימה ריקה. שים לב: ניתן להניח שהמחרוזת הקלט מכילה רק אותיות ורווחים. דוגמאות:\n     * \n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    def selectWords(s : String, n : Int) : List[Any] = {\n", "entry_point": "selectWords", "test": "\n\n    var arg00 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg01 : Int = 4\n    var x0 : List[Any] = selectWords(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"little\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Mary had a little lamb\"\"\"\n    var arg11 : Int = 3\n    var x1 : List[Any] = selectWords(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"Mary\"\"\", \"\"\"lamb\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"simple white space\"\"\"\n    var arg21 : Int = 2\n    var x2 : List[Any] = selectWords(arg20, arg21)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Hello world\"\"\"\n    var arg31 : Int = 4\n    var x3 : List[Any] = selectWords(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"world\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Uncle sam\"\"\"\n    var arg41 : Int = 3\n    var x4 : List[Any] = selectWords(arg40, arg41)\n    var v4 : List[Any] = List(\"\"\"Uncle\"\"\")\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"\"\"\"\n    var arg51 : Int = 4\n    var x5 : List[Any] = selectWords(arg50, arg51)\n    var v5 : List[Any] = List()\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"a b c d e f\"\"\"\n    var arg61 : Int = 1\n    var x6 : List[Any] = selectWords(arg60, arg61)\n    var v6 : List[Any] = List(\"\"\"b\"\"\", \"\"\"c\"\"\", \"\"\"d\"\"\", \"\"\"f\"\"\")\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "נתון מחרוזת s ומספר טבעי n, עליך לממש פונקציה שמחזירה רשימה של כל המילים מהמחרוזת s שמכילות בדיוק n עיצורים, בסדר שהן מופיעות במחרוזת s. אם המחרוזת s ריקה, הפונקציה צריכה להחזיר רשימה ריקה. שים לב: ניתן להניח שהמחרוזת הקלט מכילה רק אותיות ורווחים. דוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/54", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מערך של מספרים שלמים ומספר שלם חיובי k, יש להחזיר רשימה ממוינת בגודל k עם המספרים הגדולים ביותר במערך.\n     * \n     * דוגמה 1:\n     *     קלט: arr = [-3, -4, 5], k = 3\n     *     פלט: [-4, -3, 5]\n     * \n     * דוגמה 2:\n     *     קלט: arr = [4, -4, 4], k = 2\n     *     פלט: [4, 4]\n     * \n     * דוגמה 3:\n     *     קלט: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     פלט: [2]\n     * \n     * הערות:\n     *     1. אורך המערך יהיה בטווח של [1, 1000].\n     *     2. האיברים במערך יהיו בטווח של [-1000, 1000].\n     *     3. 0 <= k <= אורך המערך.\n     * \n     *\n     */\n    def maximum(arr : List[Int], k : Int) : List[Any] = {\n", "entry_point": "maximum", "test": "\n\n    var arg00 : List[Int] = List(-3, -4, 5)\n    var arg01 : Int = 3\n    var x0 : List[Any] = maximum(arg00, arg01)\n    var v0 : List[Any] = List(-4, -3, 5)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(4, -4, 4)\n    var arg11 : Int = 2\n    var x1 : List[Any] = maximum(arg10, arg11)\n    var v1 : List[Any] = List(4, 4)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-3, 2, 1, 2, -1, -2, 1)\n    var arg21 : Int = 1\n    var x2 : List[Any] = maximum(arg20, arg21)\n    var v2 : List[Any] = List(2)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(123, -123, 20, 0, 1, 2, -3)\n    var arg31 : Int = 3\n    var x3 : List[Any] = maximum(arg30, arg31)\n    var v3 : List[Any] = List(2, 20, 123)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(-123, 20, 0, 1, 2, -3)\n    var arg41 : Int = 4\n    var x4 : List[Any] = maximum(arg40, arg41)\n    var v4 : List[Any] = List(0, 1, 2, 20)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(5, 15, 0, 3, -13, -8, 0)\n    var arg51 : Int = 7\n    var x5 : List[Any] = maximum(arg50, arg51)\n    var v5 : List[Any] = List(-13, -8, 0, 0, 3, 5, 15)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(-1, 0, 2, 5, 3, -10)\n    var arg61 : Int = 2\n    var x6 : List[Any] = maximum(arg60, arg61)\n    var v6 : List[Any] = List(3, 5)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(1, 0, 5, -7)\n    var arg71 : Int = 1\n    var x7 : List[Any] = maximum(arg70, arg71)\n    var v7 : List[Any] = List(5)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Int] = List(4, -4)\n    var arg81 : Int = 2\n    var x8 : List[Any] = maximum(arg80, arg81)\n    var v8 : List[Any] = List(-4, 4)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Int] = List(-10, 10)\n    var arg91 : Int = 2\n    var x9 : List[Any] = maximum(arg90, arg91)\n    var v9 : List[Any] = List(-10, 10)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Int] = List(1, 2, 3, -23, 243, -400, 0)\n    var arg101 : Int = 0\n    var x10 : List[Any] = maximum(arg100, arg101)\n    var v10 : List[Any] = List()\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n\n}\n", "description": "נתון מערך של מספרים שלמים ומספר שלם חיובי k, יש להחזיר רשימה ממוינת בגודל k עם המספרים הגדולים ביותר במערך.\n\nדוגמה 1:\n    קלט: arr = [-3, -4, 5], k = 3\n    פלט: [-4, -3, 5]\n\nדוגמה 2:\n    קלט: arr = [4, -4, 4], k = 2\n    פלט: [4, 4]\n\nדוגמה 3:\n    קלט: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    פלט: [2]\n\nהערות:\n    1. אורך המערך יהיה בטווח של [1, 1000].\n    2. האיברים במערך יהיו בטווח של [-1000, 1000].\n    3. 0 <= k <= אורך המערך.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/55", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מערך של מספרים שלמים לא ריקים arr ומספר שלם k, החזר את סכום האיברים עם לכל היותר שני ספרות מה-k הראשונים של arr.\n     * \n     * דוגמה:\n     * \n     *     קלט: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     פלט: 24 # סכום של 21 + 3\n     * \n     * הגבלות:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     * \n     *\n     */\n    def addElements(arr : List[Int], k : Int) : Int = {\n", "entry_point": "addElements", "test": "\n\n    var arg00 : List[Int] = List(1, -2, -3, 41, 57, 76, 87, 88, 99)\n    var arg01 : Int = 3\n    var x0 : Int = addElements(arg00, arg01)\n    var v0 : Int = -4\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(111, 121, 3, 4000, 5, 6)\n    var arg11 : Int = 2\n    var x1 : Int = addElements(arg10, arg11)\n    var v1 : Int = 0\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(11, 21, 3, 90, 5, 6, 7, 8, 9)\n    var arg21 : Int = 4\n    var x2 : Int = addElements(arg20, arg21)\n    var v2 : Int = 125\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    var arg31 : Int = 4\n    var x3 : Int = addElements(arg30, arg31)\n    var v3 : Int = 24\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(1)\n    var arg41 : Int = 1\n    var x4 : Int = addElements(arg40, arg41)\n    var v4 : Int = 1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "נתון מערך של מספרים שלמים לא ריקים arr ומספר שלם k, החזר את סכום האיברים עם לכל היותר שני ספרות מה-k הראשונים של arr.\n\nדוגמה:\n\n    קלט: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    פלט: 24 # סכום של 21 + 3\n\nהגבלות:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/56", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתונים לך שני מרווחים,\n     *     כאשר כל מרווח הוא זוג של מספרים שלמים. למשל, מרווח = (התחלה, סיום) = (1, 2).\n     *     המרווחים הנתונים הם סגורים, כלומר המרווח (התחלה, סיום)\n     *     כולל את ההתחלה והסיום.\n     *     עבור כל מרווח נתון, נניח שההתחלה שלו קטנה או שווה לסיום שלו.\n     *     המטרה שלך היא לקבוע אם אורך החיתוך של שני המרווחים הוא מספר ראשוני.\n     *     למשל, החיתוך של המרווחים (1, 3), (2, 4) הוא (2, 3)\n     *     שאורכו הוא 1, שאינו מספר ראשוני.\n     *     אם אורך החיתוך הוא מספר ראשוני, החזר \"YES\",\n     *     אחרת, החזר \"NO\".\n     *     אם שני המרווחים אינם מתקלקלים, החזר \"NO\".\n     * \n     * \n     *     [קלט/פלט] דוגמאות:\n     * \n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    def intersection(interval1 : List[Int], interval2 : List[Int]) : String = {\n", "entry_point": "intersection", "test": "\n\n    var arg00 : List[Int] = List(1, 2)\n    var arg01 : List[Int] = List(2, 3)\n    var x0 : String = intersection(arg00, arg01)\n    var v0 : String = \"\"\"NO\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Int] = List(-1, 1)\n    var arg11 : List[Int] = List(0, 4)\n    var x1 : String = intersection(arg10, arg11)\n    var v1 : String = \"\"\"NO\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Int] = List(-3, -1)\n    var arg21 : List[Int] = List(-5, 5)\n    var x2 : String = intersection(arg20, arg21)\n    var v2 : String = \"\"\"YES\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Int] = List(-2, 2)\n    var arg31 : List[Int] = List(-4, 0)\n    var x3 : String = intersection(arg30, arg31)\n    var v3 : String = \"\"\"YES\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Int] = List(-11, 2)\n    var arg41 : List[Int] = List(-1, -1)\n    var x4 : String = intersection(arg40, arg41)\n    var v4 : String = \"\"\"NO\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Int] = List(1, 2)\n    var arg51 : List[Int] = List(3, 5)\n    var x5 : String = intersection(arg50, arg51)\n    var v5 : String = \"\"\"NO\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Int] = List(1, 2)\n    var arg61 : List[Int] = List(1, 2)\n    var x6 : String = intersection(arg60, arg61)\n    var v6 : String = \"\"\"NO\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Int] = List(-2, -2)\n    var arg71 : List[Int] = List(-3, -2)\n    var x7 : String = intersection(arg70, arg71)\n    var v7 : String = \"\"\"NO\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n\n}\n", "description": "נתונים לך שני מרווחים,\n    כאשר כל מרווח הוא זוג של מספרים שלמים. למשל, מרווח = (התחלה, סיום) = (1, 2).\n    המרווחים הנתונים הם סגורים, כלומר המרווח (התחלה, סיום)\n    כולל את ההתחלה והסיום.\n    עבור כל מרווח נתון, נניח שההתחלה שלו קטנה או שווה לסיום שלו.\n    המטרה שלך היא לקבוע אם אורך החיתוך של שני המרווחים הוא מספר ראשוני.\n    למשל, החיתוך של המרווחים (1, 3), (2, 4) הוא (2, 3)\n    שאורכו הוא 1, שאינו מספר ראשוני.\n    אם אורך החיתוך הוא מספר ראשוני, החזר \"YES\",\n    אחרת, החזר \"NO\".\n    אם שני המרווחים אינם מתקלקלים, החזר \"NO\".\n\n\n    [קלט/פלט] דוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/57", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * כולם מכירים את רצף פיבונאצ'י, הוא נחקר עמוקות על ידי מתמטיקאים במאה האחרונה. אך מה שאנשים לא יודעים זה רצף טריבונאצ'י. רצף טריבונאצ'י מוגדר על ידי הנוסחה הבאה:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, אם n הוא זוגי.\n     * tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), אם n הוא אי-זוגי.\n     * לדוגמה:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     * = 2 + 3 + 3 = 8\n     * נתון לך מספר שלם לא-שלילי n, עליך להחזיר רשימה של n + 1 המספרים הראשונים ברצף טריבונאצ'י.\n     * לדוגמה:\n     * tri(3) = [1, 3, 2, 8]\n     * \n     *\n     */\n    def tri(n : Int) : List[Double] = {\n", "entry_point": "tri", "test": "\n\n    var arg00 : Int = 3\n    var x0 : List[Double] = tri(arg00)\n    var v0 : List[Double] = List(1, 3, 2.0, 8.0)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 4\n    var x1 : List[Double] = tri(arg10)\n    var v1 : List[Double] = List(1, 3, 2.0, 8.0, 3.0)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 5\n    var x2 : List[Double] = tri(arg20)\n    var v2 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 6\n    var x3 : List[Double] = tri(arg30)\n    var v3 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var x4 : List[Double] = tri(arg40)\n    var v4 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 8\n    var x5 : List[Double] = tri(arg50)\n    var v5 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 9\n    var x6 : List[Double] = tri(arg60)\n    var v6 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0)\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 20\n    var x7 : List[Double] = tri(arg70)\n    var v7 : List[Double] = List(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0)\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 0\n    var x8 : List[Double] = tri(arg80)\n    var v8 : List[Double] = List(1)\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1\n    var x9 : List[Double] = tri(arg90)\n    var v9 : List[Double] = List(1, 3)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n\n}\n", "description": "כולם מכירים את רצף פיבונאצ'י, הוא נחקר עמוקות על ידי מתמטיקאים במאה האחרונה. אך מה שאנשים לא יודעים זה רצף טריבונאצ'י. רצף טריבונאצ'י מוגדר על ידי הנוסחה הבאה:\ntri(1) = 3\ntri(n) = 1 + n / 2, אם n הוא זוגי.\ntri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), אם n הוא אי-זוגי.\nלדוגמה:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nנתון לך מספר שלם לא-שלילי n, עליך להחזיר רשימה של n + 1 המספרים הראשונים ברצף טריבונאצ'י.\nלדוגמה:\ntri(3) = [1, 3, 2, 8]", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/58", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתון מספר שלם חיובי n, החזר את כפל הספרות האי-זוגיות.\n     * החזר 0 אם כל הספרות הן זוגיות.\n     * לדוגמה:\n     * \n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    def digits(n : Int) : Int = {\n", "entry_point": "digits", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = digits(arg00)\n    var v0 : Int = 5\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 54\n    var x1 : Int = digits(arg10)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 120\n    var x2 : Int = digits(arg20)\n    var v2 : Int = 1\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 5014\n    var x3 : Int = digits(arg30)\n    var v3 : Int = 5\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 98765\n    var x4 : Int = digits(arg40)\n    var v4 : Int = 315\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 5576543\n    var x5 : Int = digits(arg50)\n    var v5 : Int = 2625\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 2468\n    var x6 : Int = digits(arg60)\n    var v6 : Int = 0\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "נתון מספר שלם חיובי n, החזר את כפל הספרות האי-זוגיות.\nהחזר 0 אם כל הספרות הן זוגיות.\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/59", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * צור פונקציה שמקבלת מחרוזת כקלט המכילה רק סוגריים מרובעים.\n     * הפונקציה צריכה להחזיר אמת רק אם קיים תת-רצף תקין של סוגריים מרובעים\n     * בו לפחות סוגריים מרובעים אחד מכיל סוגריים מרובעים נושאים.\n     * is_nested('[[]]') ➞ True\n     * is_nested('[]]]]]]][[[[[]') ➞ False\n     * is_nested('[][]') ➞ False\n     * is_nested('[]') ➞ False\n     * is_nested('[[][]]') ➞ True\n     * is_nested('[[]][[') ➞ True\n     *\n     */\n    def isNested(string : String) : Boolean = {\n", "entry_point": "isNested", "test": "\n\n    var arg00 : String = \"\"\"[[]]\"\"\"\n    var x0 : Boolean = isNested(arg00)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"[]]]]]]][[[[[]\"\"\"\n    var x1 : Boolean = isNested(arg10)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"[][]\"\"\"\n    var x2 : Boolean = isNested(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"[]\"\"\"\n    var x3 : Boolean = isNested(arg30)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"[[[[]]]]\"\"\"\n    var x4 : Boolean = isNested(arg40)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"[]]]]]]]]]]\"\"\"\n    var x5 : Boolean = isNested(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"[][][[]]\"\"\"\n    var x6 : Boolean = isNested(arg60)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"[[]\"\"\"\n    var x7 : Boolean = isNested(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"[]]\"\"\"\n    var x8 : Boolean = isNested(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"[[]][[\"\"\"\n    var x9 : Boolean = isNested(arg90)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"[[][]]\"\"\"\n    var x10 : Boolean = isNested(arg100)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"\"\"\"\n    var x11 : Boolean = isNested(arg110)\n    var v11 : Boolean = false\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"[[[[[[[[\"\"\"\n    var x12 : Boolean = isNested(arg120)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : String = \"\"\"]]]]]]]]\"\"\"\n    var x13 : Boolean = isNested(arg130)\n    var v13 : Boolean = false\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n\n}\n", "description": "צור פונקציה שמקבלת מחרוזת כקלט המכילה רק סוגריים מרובעים.\nהפונקציה צריכה להחזיר אמת רק אם קיים תת-רצף תקין של סוגריים מרובעים\nבו לפחות סוגריים מרובעים אחד מכיל סוגריים מרובעים נושאים.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/60", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * קיבלת רשימה של מספרים.\n     *     עליך להחזיר את סכום המספרים ברשימה שהוצבעו בריבוע,\n     *     לעגל כל איבר ברשימה למספר שלם עליון (Ceiling) תחילה.\n     *     דוגמאות:\n     *     עבור lst = [1,2,3] הפלט צריך להיות 14\n     *     עבור lst = [1,4,9] הפלט צריך להיות 98\n     *     עבור lst = [1,3,5,7] הפלט צריך להיות 84\n     *     עבור lst = [1.4,4.2,0] הפלט צריך להיות 29\n     *     עבור lst = [-2.4,1,1] הפלט צריך להיות 6\n     * \n     * \n\n     *\n     */\n    def sumSquares(lst : List[Double]) : Int = {\n", "entry_point": "sumSquares", "test": "\n\n    var arg00 : List[Double] = List(1, 2, 3)\n    var x0 : Int = sumSquares(arg00)\n    var v0 : Int = 14\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Double] = List(1.0, 2, 3)\n    var x1 : Int = sumSquares(arg10)\n    var v1 : Int = 14\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Double] = List(1, 3, 5, 7)\n    var x2 : Int = sumSquares(arg20)\n    var v2 : Int = 84\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Double] = List(1.4, 4.2, 0)\n    var x3 : Int = sumSquares(arg30)\n    var v3 : Int = 29\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Double] = List(-2.4, 1, 1)\n    var x4 : Int = sumSquares(arg40)\n    var v4 : Int = 6\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Double] = List(100, 1, 15, 2)\n    var x5 : Int = sumSquares(arg50)\n    var v5 : Int = 10230\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Double] = List(10000, 10000)\n    var x6 : Int = sumSquares(arg60)\n    var v6 : Int = 200000000\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Double] = List(-1.4, 4.6, 6.3)\n    var x7 : Int = sumSquares(arg70)\n    var v7 : Int = 75\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Double] = List(-1.4, 17.9, 18.9, 19.9)\n    var x8 : Int = sumSquares(arg80)\n    var v8 : Int = 1086\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Double] = List(0)\n    var x9 : Int = sumSquares(arg90)\n    var v9 : Int = 0\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Double] = List(-1)\n    var x10 : Int = sumSquares(arg100)\n    var v10 : Int = 1\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : List[Double] = List(-1, 1, 0)\n    var x11 : Int = sumSquares(arg110)\n    var v11 : Int = 2\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n\n}\n", "description": "קיבלת רשימה של מספרים.\n    עליך להחזיר את סכום המספרים ברשימה שהוצבעו בריבוע,\n    לעגל כל איבר ברשימה למספר שלם עליון (Ceiling) תחילה.\n    דוגמאות:\n    עבור lst = [1,2,3] הפלט צריך להיות 14\n    עבור lst = [1,4,9] הפלט צריך להיות 98\n    עבור lst = [1,3,5,7] הפלט צריך להיות 84\n    עבור lst = [1.4,4.2,0] הפלט צריך להיות 29\n    עבור lst = [-2.4,1,1] הפלט צריך להיות 6", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/61", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * צור פונקציה שמחזירה True אם התו האחרון במחרוזת הנתונה הוא תו אלפביתי ואינו חלק ממילה, ו-False אחרת.\n     * לתשומת לב: \"מילה\" היא קבוצת תווים המופרדים באמצעות רווח.\n     * \n     * דוגמאות:\n     * \n     * check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n     * check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n     * check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n     * check_if_last_char_is_a_letter(\"\") ➞ False \n     *\n     */\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n", "entry_point": "checkIfLastCharIsALetter", "test": "\n\n    var arg00 : String = \"\"\"apple\"\"\"\n    var x0 : Boolean = checkIfLastCharIsALetter(arg00)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"apple pi e\"\"\"\n    var x1 : Boolean = checkIfLastCharIsALetter(arg10)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"eeeee\"\"\"\n    var x2 : Boolean = checkIfLastCharIsALetter(arg20)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"A\"\"\"\n    var x3 : Boolean = checkIfLastCharIsALetter(arg30)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Pumpkin pie \"\"\"\n    var x4 : Boolean = checkIfLastCharIsALetter(arg40)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"Pumpkin pie 1\"\"\"\n    var x5 : Boolean = checkIfLastCharIsALetter(arg50)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"\"\"\"\n    var x6 : Boolean = checkIfLastCharIsALetter(arg60)\n    var v6 : Boolean = false\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"eeeee e \"\"\"\n    var x7 : Boolean = checkIfLastCharIsALetter(arg70)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"apple pie\"\"\"\n    var x8 : Boolean = checkIfLastCharIsALetter(arg80)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"apple pi e \"\"\"\n    var x9 : Boolean = checkIfLastCharIsALetter(arg90)\n    var v9 : Boolean = false\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n\n}\n", "description": "צור פונקציה שמחזירה True אם התו האחרון במחרוזת הנתונה הוא תו אלפביתי ואינו חלק ממילה, ו-False אחרת.\nלתשומת לב: \"מילה\" היא קבוצת תווים המופרדים באמצעות רווח.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/62", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * צור פונקציה שמחזירה את האינדקס הגדול ביותר של אלמנט שאינו גדול או שווה לאלמנט הקודם לו. אם לא קיים אלמנט כזה, החזר -1. המערך הנתון לא יכיל ערכים כפולים.\n     * \n     * דוגמאות:\n     * \n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    def canArrange(arr : List[Any]) : Int = {\n", "entry_point": "canArrange", "test": "\n\n    var arg00 : List[Any] = List(1, 2, 4, 3, 5)\n    var x0 : Int = canArrange(arg00)\n    var v0 : Int = 3\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1, 2, 4, 5)\n    var x1 : Int = canArrange(arg10)\n    var v1 : Int = -1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 4, 2, 5, 6, 7, 8, 9, 10)\n    var x2 : Int = canArrange(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(4, 8, 5, 7, 3)\n    var x3 : Int = canArrange(arg30)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List()\n    var x4 : Int = canArrange(arg40)\n    var v4 : Int = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n\n}\n", "description": "צור פונקציה שמחזירה את האינדקס הגדול ביותר של אלמנט שאינו גדול או שווה לאלמנט הקודם לו. אם לא קיים אלמנט כזה, החזר -1. המערך הנתון לא יכיל ערכים כפולים.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/63", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * צור פונקציה שמחזירה טופל (a, b), כאשר 'a' הוא המספר השלילי הגדול ביותר, ו-'b' הוא המספר החיובי הקטן ביותר ברשימה.\n     *     אם אין מספרים שליליים או חיוביים, החזר אותם כ-None.\n     * \n     *     דוגמאות:\n     * \n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    def largestSmallestIntegers(lst : List[Any]) : List[Any] = {\n", "entry_point": "largestSmallestIntegers", "test": "\n\n    var arg00 : List[Any] = List(2, 4, 1, 3, 5, 7)\n    var x0 : List[Any] = largestSmallestIntegers(arg00)\n    var v0 : List[Any] = List(\"none\", 1)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(2, 4, 1, 3, 5, 7, 0)\n    var x1 : List[Any] = largestSmallestIntegers(arg10)\n    var v1 : List[Any] = List(\"none\", 1)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(1, 3, 2, 4, 5, 6, -2)\n    var x2 : List[Any] = largestSmallestIntegers(arg20)\n    var v2 : List[Any] = List(-2, 1)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(4, 5, 3, 6, 2, 7, -7)\n    var x3 : List[Any] = largestSmallestIntegers(arg30)\n    var v3 : List[Any] = List(-7, 2)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(7, 3, 8, 4, 9, 2, 5, -9)\n    var x4 : List[Any] = largestSmallestIntegers(arg40)\n    var v4 : List[Any] = List(-9, 2)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List()\n    var x5 : List[Any] = largestSmallestIntegers(arg50)\n    var v5 : List[Any] = List(\"none\", \"none\")\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(0)\n    var x6 : List[Any] = largestSmallestIntegers(arg60)\n    var v6 : List[Any] = List(\"none\", \"none\")\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : List[Any] = List(-1, -3, -5, -6)\n    var x7 : List[Any] = largestSmallestIntegers(arg70)\n    var v7 : List[Any] = List(-1, \"none\")\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : List[Any] = List(-1, -3, -5, -6, 0)\n    var x8 : List[Any] = largestSmallestIntegers(arg80)\n    var v8 : List[Any] = List(-1, \"none\")\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : List[Any] = List(-6, -4, -4, -3, 1)\n    var x9 : List[Any] = largestSmallestIntegers(arg90)\n    var v9 : List[Any] = List(-3, 1)\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : List[Any] = List(-6, -4, -4, -3, -100, 1)\n    var x10 : List[Any] = largestSmallestIntegers(arg100)\n    var v10 : List[Any] = List(-3, 1)\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n\n}\n", "description": "צור פונקציה שמחזירה טופל (a, b), כאשר 'a' הוא המספר השלילי הגדול ביותר, ו-'b' הוא המספר החיובי הקטן ביותר ברשימה.\n    אם אין מספרים שליליים או חיוביים, החזר אותם כ-None.\n\n    דוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/64", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * הפקטוריאל הברזילאי מוגדר כך:\n     *     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     *     כאשר n > 0\n     * \n     *     לדוגמה:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    def specialFactorial(n : Int) : Int = {\n", "entry_point": "specialFactorial", "test": "\n\n    var arg00 : Int = 4\n    var x0 : Int = specialFactorial(arg00)\n    var v0 : Int = 288\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 5\n    var x1 : Int = specialFactorial(arg10)\n    var v1 : Int = 34560\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 7\n    var x2 : Int = specialFactorial(arg20)\n    var v2 : Int = 125411328000\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 1\n    var x3 : Int = specialFactorial(arg30)\n    var v3 : Int = 1\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "הפקטוריאל הברזילאי מוגדר כך:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    כאשר n > 0\n\n    לדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/65", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * קיבלת מחרוזת המייצגת משפט,\n     * המשפט מכיל מילים מופרדות על ידי רווח,\n     * ועליך להחזיר מחרוזת המכילה את המילים מהמשפט המקורי,\n     * שאורכן הוא מספר ראשוני,\n     * סדר המילים במחרוזת החדשה צריך להיות זהה למקורי.\n     * \n     * דוגמה 1:\n     *     קלט: sentence = \"This is a test\"\n     *     פלט: \"is\"\n     * \n     * דוגמה 2:\n     *     קלט: sentence = \"lets go for swimming\"\n     *     פלט: \"go for\"\n     * \n     * הגבלות:\n     *     * 1 <= len(sentence) <= 100\n     *     * המשפט מכיל רק אותיות.\n     * \n     *\n     */\n    def wordsInSentence(sentence : String) : String = {\n", "entry_point": "wordsInSentence", "test": "\n\n    var arg00 : String = \"\"\"This is a test\"\"\"\n    var x0 : String = wordsInSentence(arg00)\n    var v0 : String = \"\"\"is\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"lets go for swimming\"\"\"\n    var x1 : String = wordsInSentence(arg10)\n    var v1 : String = \"\"\"go for\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"there is no place available here\"\"\"\n    var x2 : String = wordsInSentence(arg20)\n    var v2 : String = \"\"\"there is no place\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Hi I am Hussein\"\"\"\n    var x3 : String = wordsInSentence(arg30)\n    var v3 : String = \"\"\"Hi am Hussein\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"go for it\"\"\"\n    var x4 : String = wordsInSentence(arg40)\n    var v4 : String = \"\"\"go for it\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"here\"\"\"\n    var x5 : String = wordsInSentence(arg50)\n    var v5 : String = \"\"\"\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"here is\"\"\"\n    var x6 : String = wordsInSentence(arg60)\n    var v6 : String = \"\"\"is\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "קיבלת מחרוזת המייצגת משפט,\nהמשפט מכיל מילים מופרדות על ידי רווח,\nועליך להחזיר מחרוזת המכילה את המילים מהמשפט המקורי,\nשאורכן הוא מספר ראשוני,\nסדר המילים במחרוזת החדשה צריך להיות זהה למקורי.\n\nדוגמה 1:\n    קלט: sentence = \"This is a test\"\n    פלט: \"is\"\n\nדוגמה 2:\n    קלט: sentence = \"lets go for swimming\"\n    פלט: \"go for\"\n\nהגבלות:\n    * 1 <= len(sentence) <= 100\n    * המשפט מכיל רק אותיות.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/66", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * המטרה שלך היא ליישם פונקציה שתפשט את הביטוי\n     *     x * n. הפונקציה מחזירה True אם x * n מבוצע למספר שלם ו-False\n     *     אחרת. המשתנים x ו-n הם מיוצגים כמחרוזות של שבר, ויש להם את הפורמט הבא,\n     *     <מונה>/<מכנה> כאשר המונה והמכנה הם מספרים שלמים חיוביים.\n     * \n     *     אתה יכול להניח ש-x ו-n הם שברים תקינים ואינם מכילים אפס כמכנה.\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    def simplify(x : String, n : String) : Boolean = {\n", "entry_point": "simplify", "test": "\n\n    var arg00 : String = \"\"\"1/5\"\"\"\n    var arg01 : String = \"\"\"5/1\"\"\"\n    var x0 : Boolean = simplify(arg00, arg01)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1/6\"\"\"\n    var arg11 : String = \"\"\"2/1\"\"\"\n    var x1 : Boolean = simplify(arg10, arg11)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"5/1\"\"\"\n    var arg21 : String = \"\"\"3/1\"\"\"\n    var x2 : Boolean = simplify(arg20, arg21)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"7/10\"\"\"\n    var arg31 : String = \"\"\"10/2\"\"\"\n    var x3 : Boolean = simplify(arg30, arg31)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"2/10\"\"\"\n    var arg41 : String = \"\"\"50/10\"\"\"\n    var x4 : Boolean = simplify(arg40, arg41)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"7/2\"\"\"\n    var arg51 : String = \"\"\"4/2\"\"\"\n    var x5 : Boolean = simplify(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"11/6\"\"\"\n    var arg61 : String = \"\"\"6/1\"\"\"\n    var x6 : Boolean = simplify(arg60, arg61)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"2/3\"\"\"\n    var arg71 : String = \"\"\"5/2\"\"\"\n    var x7 : Boolean = simplify(arg70, arg71)\n    var v7 : Boolean = false\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"5/2\"\"\"\n    var arg81 : String = \"\"\"3/5\"\"\"\n    var x8 : Boolean = simplify(arg80, arg81)\n    var v8 : Boolean = false\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : String = \"\"\"2/4\"\"\"\n    var arg91 : String = \"\"\"8/4\"\"\"\n    var x9 : Boolean = simplify(arg90, arg91)\n    var v9 : Boolean = true\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : String = \"\"\"2/4\"\"\"\n    var arg101 : String = \"\"\"4/2\"\"\"\n    var x10 : Boolean = simplify(arg100, arg101)\n    var v10 : Boolean = true\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : String = \"\"\"1/5\"\"\"\n    var arg111 : String = \"\"\"5/1\"\"\"\n    var x11 : Boolean = simplify(arg110, arg111)\n    var v11 : Boolean = true\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : String = \"\"\"1/5\"\"\"\n    var arg121 : String = \"\"\"1/5\"\"\"\n    var x12 : Boolean = simplify(arg120, arg121)\n    var v12 : Boolean = false\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n\n}\n", "description": "המטרה שלך היא ליישם פונקציה שתפשט את הביטוי\n    x * n. הפונקציה מחזירה True אם x * n מבוצע למספר שלם ו-False\n    אחרת. המשתנים x ו-n הם מיוצגים כמחרוזות של שבר, ויש להם את הפורמט הבא,\n    <מונה>/<מכנה> כאשר המונה והמכנה הם מספרים שלמים חיוביים.\n\n    אתה יכול להניח ש-x ו-n הם שברים תקינים ואינם מכילים אפס כמכנה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/67", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * כתוב פונקציה הממיינת את רשימת המספרים הנתונה בסדר עולה לפי סכום הספרות שלהם. שים לב: אם ישנם פריטים מרובים עם סכום דומה של הספרות שלהם, מיין אותם על פי האינדקס שלהם ברשימה המקורית.\n     * \n     * לדוגמה:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    def orderByPoints(nums : List[Any]) : List[Any] = {\n", "entry_point": "orderByPoints", "test": "\n\n    var arg00 : List[Any] = List(1, 11, -1, -11, -12)\n    var x0 : List[Any] = orderByPoints(arg00)\n    var v0 : List[Any] = List(-1, -11, 1, -12, 11)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)\n    var x1 : List[Any] = orderByPoints(arg10)\n    var v1 : List[Any] = List(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List()\n    var x2 : List[Any] = orderByPoints(arg20)\n    var v2 : List[Any] = List()\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(1, -11, -32, 43, 54, -98, 2, -3)\n    var x3 : List[Any] = orderByPoints(arg30)\n    var v3 : List[Any] = List(-3, -32, -98, -11, 1, 2, 43, 54)\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    var x4 : List[Any] = orderByPoints(arg40)\n    var v4 : List[Any] = List(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(0, 6, 6, -76, -21, 23, 4)\n    var x5 : List[Any] = orderByPoints(arg50)\n    var v5 : List[Any] = List(-76, -21, 0, 4, 23, 6, 6)\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "כתוב פונקציה הממיינת את רשימת המספרים הנתונה בסדר עולה לפי סכום הספרות שלהם. שים לב: אם ישנם פריטים מרובים עם סכום דומה של הספרות שלהם, מיין אותם על פי האינדקס שלהם ברשימה המקורית.\n\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/68", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * כתוב פונקציה שמקבלת מערך של מספרים כקלט ומחזירה את מספר האיברים במערך שגדולים מ-10 ושהספרות הראשונות והאחרונות של המספר הן אי-זוגיות (1, 3, 5, 7, 9). לדוגמה:\n     * \n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    def specialfilter(nums : List[Any]) : Int = {\n", "entry_point": "specialfilter", "test": "\n\n    var arg00 : List[Any] = List(5, -2, 1, -5)\n    var x0 : Int = specialfilter(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(15, -73, 14, -15)\n    var x1 : Int = specialfilter(arg10)\n    var v1 : Int = 1\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(33, -2, -3, 45, 21, 109)\n    var x2 : Int = specialfilter(arg20)\n    var v2 : Int = 2\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(43, -12, 93, 125, 121, 109)\n    var x3 : Int = specialfilter(arg30)\n    var v3 : Int = 4\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(71, -2, -33, 75, 21, 19)\n    var x4 : Int = specialfilter(arg40)\n    var v4 : Int = 3\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(1)\n    var x5 : Int = specialfilter(arg50)\n    var v5 : Int = 0\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List()\n    var x6 : Int = specialfilter(arg60)\n    var v6 : Int = 0\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "כתוב פונקציה שמקבלת מערך של מספרים כקלט ומחזירה את מספר האיברים במערך שגדולים מ-10 ושהספרות הראשונות והאחרונות של המספר הן אי-זוגיות (1, 3, 5, 7, 9). לדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/69", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * קיבלתם מספר שלם חיובי n. עליכם ליצור מערך של מספרים שלמים a באורך n.\n     *         עבור כל i (1 ≤ i ≤ n), ערך a[i] יהיה i * i - i + 1.\n     *         החזירו את מספר הטריפלטים (a[i], a[j], a[k]) של a כאשר i < j < k, \n     *     ו-a[i] + a[j] + a[k] הוא מרובע של 3.\n     * \n     *     דוגמה :\n     *         קלט: n = 5\n     *         פלט: 1\n     *         הסבר: \n     *         a = [1, 3, 7, 13, 21]\n     *         הטריפלט היחיד החוקי הוא (1, 7, 13).\n     * \n     *\n     */\n    def getMaxTriples(n : Int) : Int = {\n", "entry_point": "getMaxTriples", "test": "\n\n    var arg00 : Int = 5\n    var x0 : Int = getMaxTriples(arg00)\n    var v0 : Int = 1\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 6\n    var x1 : Int = getMaxTriples(arg10)\n    var v1 : Int = 4\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var x2 : Int = getMaxTriples(arg20)\n    var v2 : Int = 36\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 100\n    var x3 : Int = getMaxTriples(arg30)\n    var v3 : Int = 53361\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "קיבלתם מספר שלם חיובי n. עליכם ליצור מערך של מספרים שלמים a באורך n.\n        עבור כל i (1 ≤ i ≤ n), ערך a[i] יהיה i * i - i + 1.\n        החזירו את מספר הטריפלטים (a[i], a[j], a[k]) של a כאשר i < j < k, \n    ו-a[i] + a[j] + a[k] הוא מרובע של 3.\n\n    דוגמה :\n        קלט: n = 5\n        פלט: 1\n        הסבר: \n        a = [1, 3, 7, 13, 21]\n        הטריפלט היחיד החוקי הוא (1, 7, 13).", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/70", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * יש שמונה כוכבי לכת במערכת השמש שלנו: הכוכב הקרוב ביותר לשמש הוא מרקורי, הבא בתור הוא ונוס, אז כדור הארץ, מאדים, יופיטר, כוכב השבת, אורנוס ונפטון. כתוב פונקציה שמקבלת שני שמות כוכבי לכת כמחרוזות planet1 ו- planet2. הפונקציה צריכה להחזיר טופל שמכיל את כל הכוכבים שלהם המסלולים נמצאים בין מסלול הכוכב planet1 למסלול הכוכב planet2, ממוינים לפי הקירבה לשמש. הפונקציה צריכה להחזיר טופל ריק אם planet1 או planet2 אינם שמות כוכבי לכת נכונים. דוגמאות\n     * \n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    def bf(planet1 : String, planet2 : String) : List[Any] = {\n", "entry_point": "bf", "test": "\n\n    var arg00 : String = \"\"\"Jupiter\"\"\"\n    var arg01 : String = \"\"\"Neptune\"\"\"\n    var x0 : List[Any] = bf(arg00, arg01)\n    var v0 : List[Any] = List(\"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\")\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Earth\"\"\"\n    var arg11 : String = \"\"\"Mercury\"\"\"\n    var x1 : List[Any] = bf(arg10, arg11)\n    var v1 : List[Any] = List(\"\"\"Venus\"\"\")\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"Mercury\"\"\"\n    var arg21 : String = \"\"\"Uranus\"\"\"\n    var x2 : List[Any] = bf(arg20, arg21)\n    var v2 : List[Any] = List(\"\"\"Venus\"\"\", \"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\")\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"Neptune\"\"\"\n    var arg31 : String = \"\"\"Venus\"\"\"\n    var x3 : List[Any] = bf(arg30, arg31)\n    var v3 : List[Any] = List(\"\"\"Earth\"\"\", \"\"\"Mars\"\"\", \"\"\"Jupiter\"\"\", \"\"\"Saturn\"\"\", \"\"\"Uranus\"\"\")\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"Earth\"\"\"\n    var arg41 : String = \"\"\"Earth\"\"\"\n    var x4 : List[Any] = bf(arg40, arg41)\n    var v4 : List[Any] = List()\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"Mars\"\"\"\n    var arg51 : String = \"\"\"Earth\"\"\"\n    var x5 : List[Any] = bf(arg50, arg51)\n    var v5 : List[Any] = List()\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"Jupiter\"\"\"\n    var arg61 : String = \"\"\"Makemake\"\"\"\n    var x6 : List[Any] = bf(arg60, arg61)\n    var v6 : List[Any] = List()\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "יש שמונה כוכבי לכת במערכת השמש שלנו: הכוכב הקרוב ביותר לשמש הוא מרקורי, הבא בתור הוא ונוס, אז כדור הארץ, מאדים, יופיטר, כוכב השבת, אורנוס ונפטון. כתוב פונקציה שמקבלת שני שמות כוכבי לכת כמחרוזות planet1 ו- planet2. הפונקציה צריכה להחזיר טופל שמכיל את כל הכוכבים שלהם המסלולים נמצאים בין מסלול הכוכב planet1 למסלול הכוכב planet2, ממוינים לפי הקירבה לשמש. הפונקציה צריכה להחזיר טופל ריק אם planet1 או planet2 אינם שמות כוכבי לכת נכונים. דוגמאות", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/71", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * תיאור התוכנית היא תוכנית פשוטה שצריכה להחזיר את ערך x אם n הוא מספר ראשוני ולהחזיר את ערך y אחרת.\n     * \n     * דוגמאות:\n     * \n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     *\n     */\n    def xOrY(n : Int, x : Int, y : Int) : Int = {\n", "entry_point": "xOrY", "test": "\n\n    var arg00 : Int = 7\n    var arg01 : Int = 34\n    var arg02 : Int = 12\n    var x0 : Int = xOrY(arg00, arg01, arg02)\n    var v0 : Int = 34\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 15\n    var arg11 : Int = 8\n    var arg12 : Int = 5\n    var x1 : Int = xOrY(arg10, arg11, arg12)\n    var v1 : Int = 5\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 3\n    var arg21 : Int = 33\n    var arg22 : Int = 5212\n    var x2 : Int = xOrY(arg20, arg21, arg22)\n    var v2 : Int = 33\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 1259\n    var arg31 : Int = 3\n    var arg32 : Int = 52\n    var x3 : Int = xOrY(arg30, arg31, arg32)\n    var v3 : Int = 3\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7919\n    var arg41 : Int = -1\n    var arg42 : Int = 12\n    var x4 : Int = xOrY(arg40, arg41, arg42)\n    var v4 : Int = -1\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 3609\n    var arg51 : Int = 1245\n    var arg52 : Int = 583\n    var x5 : Int = xOrY(arg50, arg51, arg52)\n    var v5 : Int = 583\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 91\n    var arg61 : Int = 56\n    var arg62 : Int = 129\n    var x6 : Int = xOrY(arg60, arg61, arg62)\n    var v6 : Int = 129\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 6\n    var arg71 : Int = 34\n    var arg72 : Int = 1234\n    var x7 : Int = xOrY(arg70, arg71, arg72)\n    var v7 : Int = 1234\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 1\n    var arg81 : Int = 2\n    var arg82 : Int = 0\n    var x8 : Int = xOrY(arg80, arg81, arg82)\n    var v8 : Int = 0\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 2\n    var arg91 : Int = 2\n    var arg92 : Int = 0\n    var x9 : Int = xOrY(arg90, arg91, arg92)\n    var v9 : Int = 2\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n\n}\n", "description": "תיאור התוכנית היא תוכנית פשוטה שצריכה להחזיר את ערך x אם n הוא מספר ראשוני ולהחזיר את ערך y אחרת.\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/72", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתונה רשימה של מספרים, החזר את סכום הריבועים של המספרים ברשימה שזוגיים. התעלם ממספרים שהם שליליים או לא שלמים.\n     *     \n     *     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     *     double_the_difference([-1, -2, 0]) == 0\n     *     double_the_difference([9, -2]) == 81\n     *     double_the_difference([0]) == 0  \n     *    \n     *     אם הרשימה ריקה, החזר 0.\n     * \n     *\n     */\n    def doubleTheDifference(lst : List[Any]) : Int = {\n", "entry_point": "doubleTheDifference", "test": "\n\n    var arg00 : List[Any] = List()\n    var x0 : Int = doubleTheDifference(arg00)\n    var v0 : Int = 0\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : List[Any] = List(5, 4)\n    var x1 : Int = doubleTheDifference(arg10)\n    var v1 : Int = 25\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : List[Any] = List(0.1, 0.2, 0.3)\n    var x2 : Int = doubleTheDifference(arg20)\n    var v2 : Int = 0\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : List[Any] = List(-10, -20, -30)\n    var x3 : Int = doubleTheDifference(arg30)\n    var v3 : Int = 0\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : List[Any] = List(-1, -2, 8)\n    var x4 : Int = doubleTheDifference(arg40)\n    var v4 : Int = 0\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : List[Any] = List(0.2, 3, 5)\n    var x5 : Int = doubleTheDifference(arg50)\n    var v5 : Int = 34\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : List[Any] = List(-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99)\n    var x6 : Int = doubleTheDifference(arg60)\n    var v6 : Int = 166650\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n\n}\n", "description": "נתונה רשימה של מספרים, החזר את סכום הריבועים של המספרים ברשימה שזוגיים. התעלם ממספרים שהם שליליים או לא שלמים.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    אם הרשימה ריקה, החזר 0.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/73", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * ינתן לך שם של מחלקה (מחרוזת) ורשימת הרחבות.\n     * הרחבות יש להשתמש בהן כדי לטעון מחלקות נוספות למחלקה. כוח ההרחבה הוא כדלקמן: תהיינה CAP מספר האותיות הגדולות בשם ההרחבה, ו- SM מספר האותיות הקטנות בשם ההרחבה, הכוח נתון על ידי המנה CAP - SM. עליך למצוא את ההרחבה החזקה ביותר ולהחזיר מחרוזת בפורמט הבא: ClassName.StrongestExtensionName.\n     * אם ישנן שתי או יותר הרחבות עם אותו כוח, עליך לבחור את האחת שמופיעה ראשונה ברשימה.\n     * לדוגמה, אם ניתן לך \"Slices\" כמחלקה ורשימת הרחבות: ['SErviNGSliCes', 'Cheese', 'StuFfed'] אז עליך להחזיר 'Slices.SErviNGSliCes' מכיוון ש-'SErviNGSliCes' היא ההרחבה החזקה ביותר (הכוח שלה הוא -1).\n     * דוגמה:\n     * \n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    def strongestExtension(className : String, extensions : List[String]) : String = {\n", "entry_point": "strongestExtension", "test": "\n\n    var arg00 : String = \"\"\"Watashi\"\"\"\n    var arg01 : List[String] = List(\"\"\"tEN\"\"\", \"\"\"niNE\"\"\", \"\"\"eIGHt8OKe\"\"\")\n    var x0 : String = strongestExtension(arg00, arg01)\n    var v0 : String = \"\"\"Watashi.eIGHt8OKe\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"Boku123\"\"\"\n    var arg11 : List[String] = List(\"\"\"nani\"\"\", \"\"\"NazeDa\"\"\", \"\"\"YEs.WeCaNe\"\"\", \"\"\"32145tggg\"\"\")\n    var x1 : String = strongestExtension(arg10, arg11)\n    var v1 : String = \"\"\"Boku123.YEs.WeCaNe\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"__YESIMHERE\"\"\"\n    var arg21 : List[String] = List(\"\"\"t\"\"\", \"\"\"eMptY\"\"\", \"\"\"nothing\"\"\", \"\"\"zeR00\"\"\", \"\"\"NuLl__\"\"\", \"\"\"123NoooneB321\"\"\")\n    var x2 : String = strongestExtension(arg20, arg21)\n    var v2 : String = \"\"\"__YESIMHERE.NuLl__\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"K\"\"\"\n    var arg31 : List[String] = List(\"\"\"Ta\"\"\", \"\"\"TAR\"\"\", \"\"\"t234An\"\"\", \"\"\"cosSo\"\"\")\n    var x3 : String = strongestExtension(arg30, arg31)\n    var v3 : String = \"\"\"K.TAR\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"__HAHA\"\"\"\n    var arg41 : List[String] = List(\"\"\"Tab\"\"\", \"\"\"123\"\"\", \"\"\"781345\"\"\", \"\"\"-_-\"\"\")\n    var x4 : String = strongestExtension(arg40, arg41)\n    var v4 : String = \"\"\"__HAHA.123\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"YameRore\"\"\"\n    var arg51 : List[String] = List(\"\"\"HhAas\"\"\", \"\"\"okIWILL123\"\"\", \"\"\"WorkOut\"\"\", \"\"\"Fails\"\"\", \"\"\"-_-\"\"\")\n    var x5 : String = strongestExtension(arg50, arg51)\n    var v5 : String = \"\"\"YameRore.okIWILL123\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"finNNalLLly\"\"\"\n    var arg61 : List[String] = List(\"\"\"Die\"\"\", \"\"\"NowW\"\"\", \"\"\"Wow\"\"\", \"\"\"WoW\"\"\")\n    var x6 : String = strongestExtension(arg60, arg61)\n    var v6 : String = \"\"\"finNNalLLly.WoW\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"_\"\"\"\n    var arg71 : List[String] = List(\"\"\"Bb\"\"\", \"\"\"91245\"\"\")\n    var x7 : String = strongestExtension(arg70, arg71)\n    var v7 : String = \"\"\"_.Bb\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : String = \"\"\"Sp\"\"\"\n    var arg81 : List[String] = List(\"\"\"671235\"\"\", \"\"\"Bb\"\"\")\n    var x8 : String = strongestExtension(arg80, arg81)\n    var v8 : String = \"\"\"Sp.671235\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n\n}\n", "description": "ינתן לך שם של מחלקה (מחרוזת) ורשימת הרחבות.\nהרחבות יש להשתמש בהן כדי לטעון מחלקות נוספות למחלקה. כוח ההרחבה הוא כדלקמן: תהיינה CAP מספר האותיות הגדולות בשם ההרחבה, ו- SM מספר האותיות הקטנות בשם ההרחבה, הכוח נתון על ידי המנה CAP - SM. עליך למצוא את ההרחבה החזקה ביותר ולהחזיר מחרוזת בפורמט הבא: ClassName.StrongestExtensionName.\nאם ישנן שתי או יותר הרחבות עם אותו כוח, עליך לבחור את האחת שמופיעה ראשונה ברשימה.\nלדוגמה, אם ניתן לך \"Slices\" כמחלקה ורשימת הרחבות: ['SErviNGSliCes', 'Cheese', 'StuFfed'] אז עליך להחזיר 'Slices.SErviNGSliCes' מכיוון ש-'SErviNGSliCes' היא ההרחבה החזקה ביותר (הכוח שלה הוא -1).\nדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/74", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * קיבלת שתי מילים. עליך להחזיר True אם המילה השנייה או אף אחת מהסיבובים שלה היא תת מחרוזת במילה הראשונה.\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n", "entry_point": "cycpatternCheck", "test": "\n\n    var arg00 : String = \"\"\"xyzw\"\"\"\n    var arg01 : String = \"\"\"xyw\"\"\"\n    var x0 : Boolean = cycpatternCheck(arg00, arg01)\n    var v0 : Boolean = false\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"yello\"\"\"\n    var arg11 : String = \"\"\"ell\"\"\"\n    var x1 : Boolean = cycpatternCheck(arg10, arg11)\n    var v1 : Boolean = true\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"whattup\"\"\"\n    var arg21 : String = \"\"\"ptut\"\"\"\n    var x2 : Boolean = cycpatternCheck(arg20, arg21)\n    var v2 : Boolean = false\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"efef\"\"\"\n    var arg31 : String = \"\"\"fee\"\"\"\n    var x3 : Boolean = cycpatternCheck(arg30, arg31)\n    var v3 : Boolean = true\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"abab\"\"\"\n    var arg41 : String = \"\"\"aabb\"\"\"\n    var x4 : Boolean = cycpatternCheck(arg40, arg41)\n    var v4 : Boolean = false\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"winemtt\"\"\"\n    var arg51 : String = \"\"\"tinem\"\"\"\n    var x5 : Boolean = cycpatternCheck(arg50, arg51)\n    var v5 : Boolean = true\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n\n}\n", "description": "קיבלת שתי מילים. עליך להחזיר True אם המילה השנייה או אף אחת מהסיבובים שלה היא תת מחרוזת במילה הראשונה.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/75", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מספר שלם חיובי, לקבל את המספר הרומי המתאים לו כמחרוזת ולהחזיר אותו באותיות קטנות.\n     * הגבלות: 1 <= num <= 1000\n     * \n     * דוגמאות:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    def intToMiniRoman(number : Int) : String = {\n", "entry_point": "intToMiniRoman", "test": "\n\n    var arg00 : Int = 19\n    var x0 : String = intToMiniRoman(arg00)\n    var v0 : String = \"\"\"xix\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 152\n    var x1 : String = intToMiniRoman(arg10)\n    var v1 : String = \"\"\"clii\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 251\n    var x2 : String = intToMiniRoman(arg20)\n    var v2 : String = \"\"\"ccli\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 426\n    var x3 : String = intToMiniRoman(arg30)\n    var v3 : String = \"\"\"cdxxvi\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 500\n    var x4 : String = intToMiniRoman(arg40)\n    var v4 : String = \"\"\"d\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 1\n    var x5 : String = intToMiniRoman(arg50)\n    var v5 : String = \"\"\"i\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 4\n    var x6 : String = intToMiniRoman(arg60)\n    var v6 : String = \"\"\"iv\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 43\n    var x7 : String = intToMiniRoman(arg70)\n    var v7 : String = \"\"\"xliii\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 90\n    var x8 : String = intToMiniRoman(arg80)\n    var v8 : String = \"\"\"xc\"\"\"\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 94\n    var x9 : String = intToMiniRoman(arg90)\n    var v9 : String = \"\"\"xciv\"\"\"\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 532\n    var x10 : String = intToMiniRoman(arg100)\n    var v10 : String = \"\"\"dxxxii\"\"\"\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n    var arg110 : Int = 900\n    var x11 : String = intToMiniRoman(arg110)\n    var v11 : String = \"\"\"cm\"\"\"\n    assert(x11 == v11, \"Exception -- test case 11 did not pass. x11 = \" + x11)\n\n    var arg120 : Int = 994\n    var x12 : String = intToMiniRoman(arg120)\n    var v12 : String = \"\"\"cmxciv\"\"\"\n    assert(x12 == v12, \"Exception -- test case 12 did not pass. x12 = \" + x12)\n\n    var arg130 : Int = 1000\n    var x13 : String = intToMiniRoman(arg130)\n    var v13 : String = \"\"\"m\"\"\"\n    assert(x13 == v13, \"Exception -- test case 13 did not pass. x13 = \" + x13)\n\n\n}\n", "description": "נתון מספר שלם חיובי, לקבל את המספר הרומי המתאים לו כמחרוזת ולהחזיר אותו באותיות קטנות.\nהגבלות: 1 <= num <= 1000\n\nדוגמאות:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/76", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתונות אורכי הצלעות של משולש. החזר True אם השלושה צלעים מהווים משולש ישר-זווית, אחרת החזר False. משולש ישר-זווית הוא משולש שבו זווית אחת היא זווית ישרה או 90 מעלות. דוגמה:\n     * \n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    def rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean = {\n", "entry_point": "rightAngleTriangle", "test": "\n\n    var arg00 : Int = 3\n    var arg01 : Int = 4\n    var arg02 : Int = 5\n    var x0 : Boolean = rightAngleTriangle(arg00, arg01, arg02)\n    var v0 : Boolean = true\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 1\n    var arg11 : Int = 2\n    var arg12 : Int = 3\n    var x1 : Boolean = rightAngleTriangle(arg10, arg11, arg12)\n    var v1 : Boolean = false\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 10\n    var arg21 : Int = 6\n    var arg22 : Int = 8\n    var x2 : Boolean = rightAngleTriangle(arg20, arg21, arg22)\n    var v2 : Boolean = true\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 2\n    var arg31 : Int = 2\n    var arg32 : Int = 2\n    var x3 : Boolean = rightAngleTriangle(arg30, arg31, arg32)\n    var v3 : Boolean = false\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : Int = 7\n    var arg41 : Int = 24\n    var arg42 : Int = 25\n    var x4 : Boolean = rightAngleTriangle(arg40, arg41, arg42)\n    var v4 : Boolean = true\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : Int = 10\n    var arg51 : Int = 5\n    var arg52 : Int = 7\n    var x5 : Boolean = rightAngleTriangle(arg50, arg51, arg52)\n    var v5 : Boolean = false\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : Int = 5\n    var arg61 : Int = 12\n    var arg62 : Int = 13\n    var x6 : Boolean = rightAngleTriangle(arg60, arg61, arg62)\n    var v6 : Boolean = true\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : Int = 15\n    var arg71 : Int = 8\n    var arg72 : Int = 17\n    var x7 : Boolean = rightAngleTriangle(arg70, arg71, arg72)\n    var v7 : Boolean = true\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n    var arg80 : Int = 48\n    var arg81 : Int = 55\n    var arg82 : Int = 73\n    var x8 : Boolean = rightAngleTriangle(arg80, arg81, arg82)\n    var v8 : Boolean = true\n    assert(x8 == v8, \"Exception -- test case 8 did not pass. x8 = \" + x8)\n\n    var arg90 : Int = 1\n    var arg91 : Int = 1\n    var arg92 : Int = 1\n    var x9 : Boolean = rightAngleTriangle(arg90, arg91, arg92)\n    var v9 : Boolean = false\n    assert(x9 == v9, \"Exception -- test case 9 did not pass. x9 = \" + x9)\n\n    var arg100 : Int = 2\n    var arg101 : Int = 2\n    var arg102 : Int = 10\n    var x10 : Boolean = rightAngleTriangle(arg100, arg101, arg102)\n    var v10 : Boolean = false\n    assert(x10 == v10, \"Exception -- test case 10 did not pass. x10 = \" + x10)\n\n\n}\n", "description": "נתונות אורכי הצלעות של משולש. החזר True אם השלושה צלעים מהווים משולש ישר-זווית, אחרת החזר False. משולש ישר-זווית הוא משולש שבו זווית אחת היא זווית ישרה או 90 מעלות. דוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/77", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * נתונה מחרוזת s.\n     *     אם s[i] הוא אות, הפוך את המקרה שלו מקטן לגדול או להיפך,\n     *     אחרת השאר אותו כפי שהוא.\n     *     אם המחרוזת אינה מכילה אותיות, הפוך את המחרוזת.\n     *     הפונקציה צריכה להחזיר את המחרוזת התוצאה.\n     *     דוגמאות\n     * \n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    def solve(s : String) : String = {\n", "entry_point": "solve", "test": "\n\n    var arg00 : String = \"\"\"AsDf\"\"\"\n    var x0 : String = solve(arg00)\n    var v0 : String = \"\"\"aSdF\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"1234\"\"\"\n    var x1 : String = solve(arg10)\n    var v1 : String = \"\"\"4321\"\"\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"ab\"\"\"\n    var x2 : String = solve(arg20)\n    var v2 : String = \"\"\"AB\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"#a@C\"\"\"\n    var x3 : String = solve(arg30)\n    var v3 : String = \"\"\"#A@c\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n    var arg40 : String = \"\"\"#AsdfW^45\"\"\"\n    var x4 : String = solve(arg40)\n    var v4 : String = \"\"\"#aSDFw^45\"\"\"\n    assert(x4 == v4, \"Exception -- test case 4 did not pass. x4 = \" + x4)\n\n    var arg50 : String = \"\"\"#6@2\"\"\"\n    var x5 : String = solve(arg50)\n    var v5 : String = \"\"\"2@6#\"\"\"\n    assert(x5 == v5, \"Exception -- test case 5 did not pass. x5 = \" + x5)\n\n    var arg60 : String = \"\"\"#\\$a^D\"\"\"\n    var x6 : String = solve(arg60)\n    var v6 : String = \"\"\"#\\$A^d\"\"\"\n    assert(x6 == v6, \"Exception -- test case 6 did not pass. x6 = \" + x6)\n\n    var arg70 : String = \"\"\"#ccc\"\"\"\n    var x7 : String = solve(arg70)\n    var v7 : String = \"\"\"#CCC\"\"\"\n    assert(x7 == v7, \"Exception -- test case 7 did not pass. x7 = \" + x7)\n\n\n}\n", "description": "נתונה מחרוזת s.\n    אם s[i] הוא אות, הפוך את המקרה שלו מקטן לגדול או להיפך,\n    אחרת השאר אותו כפי שהוא.\n    אם המחרוזת אינה מכילה אותיות, הפוך את המחרוזת.\n    הפונקציה צריכה להחזיר את המחרוזת התוצאה.\n    דוגמאות", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/78", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתון מחרוזת 'טקסט', החזר מחרוזת שקולה ל-md5 שלה.\n     *     אם 'טקסט' הוא מחרוזת ריקה, החזר null.\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    def stringToMd5(text : String) : Any = {\n", "entry_point": "stringToMd5", "test": "\n\n    var arg00 : String = \"\"\"Hello world\"\"\"\n    var x0 : Any = stringToMd5(arg00)\n    var v0 : Any = \"\"\"3e25960a79dbc69b674cd4ec67a72c62\"\"\"\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : String = \"\"\"\"\"\"\n    var x1 : Any = stringToMd5(arg10)\n    var v1 : Any = \"none\"\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : String = \"\"\"A B C\"\"\"\n    var x2 : Any = stringToMd5(arg20)\n    var v2 : Any = \"\"\"0ef78513b0cb8cef12743f5aeb35f888\"\"\"\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : String = \"\"\"password\"\"\"\n    var x3 : Any = stringToMd5(arg30)\n    var v3 : Any = \"\"\"5f4dcc3b5aa765d61d8327deb882cf99\"\"\"\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "נתון מחרוזת 'טקסט', החזר מחרוזת שקולה ל-md5 שלה.\n    אם 'טקסט' הוא מחרוזת ריקה, החזר null.", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
{"task_id": "scala/79", "prompt": "object Main extends App {\n    /**\n     * אתה מתכנת Scala מומחה, וזהו המטרה שלך.\n     * * נתונים שני מספרים חיוביים a ו-b, החזר את הספרות הזוגיות בין a ל-b, בסדר עולה.\n     * \n     * לדוגמה:\n     * \n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    def generateIntegers(a : Int, b : Int) : List[Any] = {\n", "entry_point": "generateIntegers", "test": "\n\n    var arg00 : Int = 2\n    var arg01 : Int = 10\n    var x0 : List[Any] = generateIntegers(arg00, arg01)\n    var v0 : List[Any] = List(2, 4, 6, 8)\n    assert(x0 == v0, \"Exception -- test case 0 did not pass. x0 = \" + x0)\n\n    var arg10 : Int = 10\n    var arg11 : Int = 2\n    var x1 : List[Any] = generateIntegers(arg10, arg11)\n    var v1 : List[Any] = List(2, 4, 6, 8)\n    assert(x1 == v1, \"Exception -- test case 1 did not pass. x1 = \" + x1)\n\n    var arg20 : Int = 132\n    var arg21 : Int = 2\n    var x2 : List[Any] = generateIntegers(arg20, arg21)\n    var v2 : List[Any] = List(2, 4, 6, 8)\n    assert(x2 == v2, \"Exception -- test case 2 did not pass. x2 = \" + x2)\n\n    var arg30 : Int = 17\n    var arg31 : Int = 89\n    var x3 : List[Any] = generateIntegers(arg30, arg31)\n    var v3 : List[Any] = List()\n    assert(x3 == v3, \"Exception -- test case 3 did not pass. x3 = \" + x3)\n\n\n}\n", "description": "נתונים שני מספרים חיוביים a ו-b, החזר את הספרות הזוגיות בין a ל-b, בסדר עולה.\n\nלדוגמה:", "language": "scala", "canonical_solution": NaN, "natural_language": "Hebrew"}
