{"task_id": "csharp/0", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνεται μια λίστα με λειτουργίες κατάθεσης και ανάληψης σε έναν τραπεζικό λογαριασμό που ξεκινά με μηδενικό υπόλοιπο. Η εργασία σας είναι να ανιχνεύσετε αν σε οποιοδήποτε σημείο το υπόλοιπο του λογαριασμού πέσει κάτω από το μηδέν, και σε αυτό το σημείο η συνάρτηση θα πρέπει να επιστρέψει True. Διαφορετικά θα πρέπει να επιστρέψει False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero (List<int> operations) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowZero(new List<int> {});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowZero(new List<int> {1,2,-3,1,2,-3});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowZero(new List<int> {1,2,-4,5,6});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-4});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-5});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowZero(new List<int> {1,-2,2,-2,5,-5,4,-4});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια λίστα με λειτουργίες κατάθεσης και ανάληψης σε έναν τραπεζικό λογαριασμό που ξεκινά με μηδενικό υπόλοιπο. Η εργασία σας είναι να ανιχνεύσετε αν σε οποιοδήποτε σημείο το υπόλοιπο του λογαριασμού πέσει κάτω από το μηδέν, και σε αυτό το σημείο η συνάρτηση θα πρέπει να επιστρέψει True. Διαφορετικά θα πρέπει να επιστρέψει False.", "entry_point": "BelowZero", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/1", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Για μια δεδομένη λίστα ακεραίων, επιστρέψτε ένα tuple που αποτελείται από το άθροισμα και το γινόμενο όλων των ακεραίων στη λίστα.\n        /// Το άθροισμα της κενής λίστας πρέπει να είναι ίσο με 0 και το γινόμενο της κενής λίστας πρέπει να είναι ίσο με 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static List<int> SumProduct (List<int> numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumProduct(new List<int> {});\n            var expected1 = new List<int> {0,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumProduct(new List<int> {1,1,1});\n            var expected2 = new List<int> {3,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumProduct(new List<int> {100,0});\n            var expected3 = new List<int> {100,0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumProduct(new List<int> {3,5,7});\n            var expected4 = new List<int> {15,105};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumProduct(new List<int> {10});\n            var expected5 = new List<int> {10,10};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Για μια δεδομένη λίστα ακεραίων, επιστρέψτε ένα tuple που αποτελείται από το άθροισμα και το γινόμενο όλων των ακεραίων στη λίστα.\nΤο άθροισμα της κενής λίστας πρέπει να είναι ίσο με 0 και το γινόμενο της κενής λίστας πρέπει να είναι ίσο με 1.", "entry_point": "SumProduct", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/2", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Τα εισαγόμενα είναι δύο συμβολοσειρές a και b που αποτελούνται μόνο από 1s και 0s.\n        ///     Εκτελέστε δυαδικό XOR σε αυτές τις εισόδους και επιστρέψτε το αποτέλεσμα επίσης ως συμβολοσειρά.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor (string a, string b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringXor(\"111000\",\"101010\");\n            var expected1 = \"010010\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringXor(\"1\",\"1\");\n            var expected2 = \"0\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringXor(\"0101\",\"0000\");\n            var expected3 = \"0101\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Τα εισαγόμενα είναι δύο συμβολοσειρές a και b που αποτελούνται μόνο από 1s και 0s.\n    Εκτελέστε δυαδικό XOR σε αυτές τις εισόδους και επιστρέψτε το αποτέλεσμα επίσης ως συμβολοσειρά.", "entry_point": "StringXor", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/3", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Από μια λίστα από αλφαριθμητικά, επιστρέψτε το μακρύτερο. Επιστρέψτε το πρώτο στην περίπτωση πολλαπλών αλφαριθμητικών με το ίδιο μήκος. Επιστρέψτε null στην περίπτωση που η εισαγωγική λίστα είναι άδεια.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest (List<string> strings) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Longest(new List<string> {});\n            var expected1 = null;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Longest(new List<string> {\"x\",\"y\",\"z\"});\n            var expected2 = \"x\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Longest(new List<string> {\"x\",\"yyy\",\"zzzz\",\"www\",\"kkkk\",\"abc\"});\n            var expected3 = \"zzzz\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Από μια λίστα από αλφαριθμητικά, επιστρέψτε το μακρύτερο. Επιστρέψτε το πρώτο στην περίπτωση πολλαπλών αλφαριθμητικών με το ίδιο μήκος. Επιστρέψτε null στην περίπτωση που η εισαγωγική λίστα είναι άδεια.", "entry_point": "Longest", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/4", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστροφή του μεγαλύτερου κοινού διαιρέτη δύο ακεραίων αριθμών a και b.\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor (int a, int b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GreatestCommonDivisor(3,7);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GreatestCommonDivisor(10,15);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GreatestCommonDivisor(49,14);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GreatestCommonDivisor(144,60);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστροφή του μεγαλύτερου κοινού διαιρέτη δύο ακεραίων αριθμών a και b.", "entry_point": "GreatestCommonDivisor", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/5", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Η είσοδος είναι μια συμβολοσειρά διαχωρισμένη με κενό από αριθμητικά χαρακτήρες από το 'μηδέν' έως το 'εννέα'.\n        ///     Οι έγκυρες επιλογές είναι 'μηδέν', 'ένα', 'δύο', 'τρία', 'τέσσερα', 'πέντε', 'έξι', 'επτά', 'οκτώ' και 'εννέα'.\n        ///     Επιστρέψτε τη συμβολοσειρά με τους αριθμούς ταξινομημένους από τον μικρότερο στον μεγαλύτερο.\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers (string numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortNumbers(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SortNumbers(\"three\");\n            var expected2 = \"three\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SortNumbers(\"three five nine\");\n            var expected3 = \"three five nine\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SortNumbers(\"five zero four seven nine eight\");\n            var expected4 = \"zero four five seven eight nine\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SortNumbers(\"six five four three two one zero\");\n            var expected5 = \"zero one two three four five six\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η είσοδος είναι μια συμβολοσειρά διαχωρισμένη με κενό από αριθμητικά χαρακτήρες από το 'μηδέν' έως το 'εννέα'.\n    Οι έγκυρες επιλογές είναι 'μηδέν', 'ένα', 'δύο', 'τρία', 'τέσσερα', 'πέντε', 'έξι', 'επτά', 'οκτώ' και 'εννέα'.\n    Επιστρέψτε τη συμβολοσειρά με τους αριθμούς ταξινομημένους από τον μικρότερο στον μεγαλύτερο.", "entry_point": "SortNumbers", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/6", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Δεδομένης μιας λίστας αριθμών (τουλάχιστον δύο στοιχείων), εφαρμόστε μια γραμμική μετασχηματιστική λειτουργία σε αυτήν τη λίστα, έτσι ώστε ο μικρότερος αριθμός να γίνει 0 και ο μεγαλύτερος να γίνει 1.\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit (List<double> numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RescaleToUnit(new List<double> {2.0,49.9});\n            var expected1 = new List<double> {0.0,1.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RescaleToUnit(new List<double> {100.0,49.9});\n            var expected2 = new List<double> {1.0,0.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RescaleToUnit(new List<double> {1.0,2.0,3.0,4.0,5.0});\n            var expected3 = new List<double> {0.0,0.25,0.5,0.75,1.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RescaleToUnit(new List<double> {2.0,1.0,5.0,3.0,4.0});\n            var expected4 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RescaleToUnit(new List<double> {12.0,11.0,15.0,13.0,14.0});\n            var expected5 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένης μιας λίστας αριθμών (τουλάχιστον δύο στοιχείων), εφαρμόστε μια γραμμική μετασχηματιστική λειτουργία σε αυτήν τη λίστα, έτσι ώστε ο μικρότερος αριθμός να γίνει 0 και ο μεγαλύτερος να γίνει 1.", "entry_point": "RescaleToUnit", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/7", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Για μια δεδομένη συμβολοσειρά, αντιστρέψτε τους πεζούς χαρακτήρες σε κεφαλαίους και τους κεφαλαίους σε πεζούς.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FlipCase(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = FlipCase(\"Hello!\");\n            var expected2 = \"hELLO!\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = FlipCase(\"These violent delights have violent ends\");\n            var expected3 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Για μια δεδομένη συμβολοσειρά, αντιστρέψτε τους πεζούς χαρακτήρες σε κεφαλαίους και τους κεφαλαίους σε πεζούς.", "entry_point": "FlipCase", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/8", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστρέψτε μόνο θετικούς αριθμούς στη λίστα.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetPositive(new List<int> {-1,-2,4,5,6});\n            var expected1 = new List<int> {4,5,6};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetPositive(new List<int> {5,3,-5,2,3,3,9,0,123,1,-10});\n            var expected2 = new List<int> {5,3,2,3,3,9,123,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetPositive(new List<int> {-1,-2});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetPositive(new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστρέψτε μόνο θετικούς αριθμούς στη λίστα.", "entry_point": "GetPositive", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/9", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστρέφει αληθές αν ένας δεδομένος αριθμός είναι πρώτος και ψευδές σε διαφορετική περίπτωση.\n        /// >>> IsPrime(6)\n        /// False\n        /// >>> IsPrime(101)\n        /// True\n        /// >>> IsPrime(11)\n        /// True\n        /// >>> IsPrime(13441)\n        /// True\n        /// >>> IsPrime(61)\n        /// True\n        /// >>> IsPrime(4)\n        /// False\n        /// >>> IsPrime(1)\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPrime (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPrime(6);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPrime(101);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPrime(11);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPrime(13441);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPrime(61);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPrime(4);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPrime(1);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsPrime(5);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsPrime(11);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsPrime(17);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsPrime(85);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsPrime(77);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsPrime(255379);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστρέφει αληθές αν ένας δεδομένος αριθμός είναι πρώτος και ψευδές σε διαφορετική περίπτωση.", "entry_point": "IsPrime", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/10", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστροφή ταξινομημένων μοναδικών στοιχείων σε μια λίστα.\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Unique(new List<int> {5,3,5,2,3,3,9,0,123});\n            var expected1 = new List<int> {0,2,3,5,9,123};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστροφή ταξινομημένων μοναδικών στοιχείων σε μια λίστα.", "entry_point": "Unique", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/11", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Η PrimeFib επιστρέφει τον n-οστό αριθμό που είναι Fibonacci και είναι επίσης πρώτος.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeFib(1);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeFib(2);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeFib(3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeFib(4);\n            var expected4 = 13;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeFib(5);\n            var expected5 = 89;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeFib(6);\n            var expected6 = 233;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeFib(7);\n            var expected7 = 1597;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeFib(8);\n            var expected8 = 28657;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeFib(9);\n            var expected9 = 514229;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeFib(10);\n            var expected10 = 433494437;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η prime_fib επιστρέφει τον n-οστό αριθμό που είναι Fibonacci και είναι επίσης πρώτος.", "entry_point": "PrimeFib", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/12", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Η TriplesSumToZero λαμβάνει μια λίστα ακεραίων ως είσοδο.\n        ///     επιστρέφει True αν υπάρχουν τρία διακριτά στοιχεία στη λίστα που\n        ///     άθροισμα τους είναι μηδέν, και False διαφορετικά.\n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriplesSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriplesSumToZero(new List<int> {1,3,5,-1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriplesSumToZero(new List<int> {1,3,-2,1});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriplesSumToZero(new List<int> {1,2,3,7});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriplesSumToZero(new List<int> {1,2,5,7});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriplesSumToZero(new List<int> {2,4,-5,3,9,7});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriplesSumToZero(new List<int> {1});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriplesSumToZero(new List<int> {1,3,5,-100});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriplesSumToZero(new List<int> {100,3,5,-100});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η triples_sum_to_zero λαμβάνει μια λίστα ακεραίων ως είσοδο.\n    επιστρέφει True αν υπάρχουν τρία διακριτά στοιχεία στη λίστα που\n    άθροισμα τους είναι μηδέν, και False διαφορετικά.", "entry_point": "TriplesSumToZero", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/13", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Η συνάρτηση PairsSumToZero παίρνει μια λίστα ακεραίων ως είσοδο.\n        ///     Επιστρέφει True αν υπάρχουν δύο διακριτά στοιχεία στη λίστα που\n        ///     έχουν άθροισμα μηδέν, και False αλλιώς.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PairsSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PairsSumToZero(new List<int> {1,3,-2,1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PairsSumToZero(new List<int> {1,2,3,7});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PairsSumToZero(new List<int> {2,4,-5,3,5,7});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PairsSumToZero(new List<int> {1});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PairsSumToZero(new List<int> {-3,9,-1,3,2,30});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PairsSumToZero(new List<int> {-3,9,-1,3,2,31});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PairsSumToZero(new List<int> {-3,9,-1,4,2,30});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PairsSumToZero(new List<int> {-3,9,-1,4,2,31});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η συνάρτηση pairs_sum_to_zero παίρνει μια λίστα ακεραίων ως είσοδο.\n    Επιστρέφει True αν υπάρχουν δύο διακριτά στοιχεία στη λίστα που\n    έχουν άθροισμα μηδέν, και False αλλιώς.", "entry_point": "PairsSumToZero", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/14", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Η ακολουθία αριθμών Fib4 είναι μια ακολουθία παρόμοια με την ακολουθία Fibonacci που ορίζεται ως εξής:\n        ///     Fib4(0) -> 0\n        ///     Fib4(1) -> 0\n        ///     Fib4(2) -> 2\n        ///     Fib4(3) -> 0\n        ///     Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n        ///     Παρακαλούμε γράψτε μια συνάρτηση για τον αποτελεσματικό υπολογισμό του n-οστού στοιχείου της ακολουθίας Fib4. Μην χρησιμοποιήσετε αναδρομή.\n        /// >>> Fib4(5)\n        /// 4\n        /// >>> Fib4(6)\n        /// 8\n        /// >>> Fib4(7)\n        /// 14\n        /// \n        /// </summary>\n        public static int Fib4 (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib4(5);\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib4(8);\n            var expected2 = 28;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib4(10);\n            var expected3 = 104;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib4(12);\n            var expected4 = 386;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η ακολουθία αριθμών Fib4 είναι μια ακολουθία παρόμοια με την ακολουθία Fibonacci που ορίζεται ως εξής:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Παρακαλούμε γράψτε μια συνάρτηση για τον αποτελεσματικό υπολογισμό του n-οστού στοιχείου της ακολουθίας Fib4. Μην χρησιμοποιήσετε αναδρομή.", "entry_point": "Fib4", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/15", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστροφή της μεσαίας τιμής των στοιχείων στη λίστα l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Median(new List<int> {3,1,2,4,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Median(new List<int> {-10,4,6,1000,10,20});\n            var expected2 = 8.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Median(new List<int> {5});\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Median(new List<int> {6,5});\n            var expected4 = 5.5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Median(new List<int> {8,1,3,9,9,2,7});\n            var expected5 = 7;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστροφή της μεσαίας τιμής των στοιχείων στη λίστα l.", "entry_point": "Median", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/16", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Ελέγχει αν η δοθείσα συμβολοσειρά είναι παλίνδρομη.\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPalindrome (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPalindrome(\"\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPalindrome(\"aba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPalindrome(\"aaaaa\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPalindrome(\"zbcd\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPalindrome(\"xywyx\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPalindrome(\"xywyz\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPalindrome(\"xywzx\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Ελέγχει αν η δοθείσα συμβολοσειρά είναι παλίνδρομη.", "entry_point": "IsPalindrome", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/17", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Η RemoveVowels είναι μια συνάρτηση που παίρνει ένα αλφαριθμητικό και επιστρέφει το αλφαριθμητικό χωρίς φωνήεντα.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// \n        /// </summary>\n        public static string RemoveVowels (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RemoveVowels(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RemoveVowels(\"abcdef\\nghijklm\");\n            var expected2 = \"bcdf\\nghjklm\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RemoveVowels(\"fedcba\");\n            var expected3 = \"fdcb\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RemoveVowels(\"eeeee\");\n            var expected4 = \"\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RemoveVowels(\"acBAA\");\n            var expected5 = \"cB\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RemoveVowels(\"EcBOO\");\n            var expected6 = \"cB\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RemoveVowels(\"ybcd\");\n            var expected7 = \"ybcd\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η remove_vowels είναι μια συνάρτηση που παίρνει ένα αλφαριθμητικό και επιστρέφει το αλφαριθμητικό χωρίς φωνήεντα.", "entry_point": "RemoveVowels", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/18", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστρέφει True αν όλοι οι αριθμοί στη λίστα l είναι κάτω από το κατώφλι t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold (List<int> l, int t) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowThreshold(new List<int> {1,2,4,10},100);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowThreshold(new List<int> {1,20,4,10},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowThreshold(new List<int> {1,20,4,10},21);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowThreshold(new List<int> {1,20,4,10},22);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowThreshold(new List<int> {1,8,4,10},11);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowThreshold(new List<int> {1,8,4,10},10);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστρέφει True αν όλοι οι αριθμοί στη λίστα l είναι κάτω από το κατώφλι t.", "entry_point": "BelowThreshold", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/19", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Προσθέστε δύο αριθμούς x και y.\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// \n        /// </summary>\n        public static int Add (int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Add(0,1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Add(1,0);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Add(2,3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Add(5,7);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Add(7,5);\n            var expected5 = 12;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Add(572,725);\n            var expected6 = 1297;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Add(51,804);\n            var expected7 = 855;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Add(645,96);\n            var expected8 = 741;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Add(712,853);\n            var expected9 = 1565;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Add(223,101);\n            var expected10 = 324;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Add(76,29);\n            var expected11 = 105;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Add(416,149);\n            var expected12 = 565;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Add(145,409);\n            var expected13 = 554;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Add(535,430);\n            var expected14 = 965;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Add(118,303);\n            var expected15 = 421;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Add(287,94);\n            var expected16 = 381;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Add(768,257);\n            var expected17 = 1025;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Add(421,677);\n            var expected18 = 1098;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Add(802,814);\n            var expected19 = 1616;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Add(510,922);\n            var expected20 = 1432;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Add(345,819);\n            var expected21 = 1164;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Add(895,436);\n            var expected22 = 1331;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Add(123,424);\n            var expected23 = 547;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Add(923,245);\n            var expected24 = 1168;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Add(23,438);\n            var expected25 = 461;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n            var actual26 = Add(565,133);\n            var expected26 = 698;\n            var result26 = compareLogic.Compare(actual26, expected26);\n            if (!result26.AreEqual) {throw new Exception(\"Exception --- test case 25 failed to pass\");}\n\n            var actual27 = Add(945,925);\n            var expected27 = 1870;\n            var result27 = compareLogic.Compare(actual27, expected27);\n            if (!result27.AreEqual) {throw new Exception(\"Exception --- test case 26 failed to pass\");}\n\n            var actual28 = Add(261,983);\n            var expected28 = 1244;\n            var result28 = compareLogic.Compare(actual28, expected28);\n            if (!result28.AreEqual) {throw new Exception(\"Exception --- test case 27 failed to pass\");}\n\n            var actual29 = Add(139,577);\n            var expected29 = 716;\n            var result29 = compareLogic.Compare(actual29, expected29);\n            if (!result29.AreEqual) {throw new Exception(\"Exception --- test case 28 failed to pass\");}\n\n            var actual30 = Add(763,178);\n            var expected30 = 941;\n            var result30 = compareLogic.Compare(actual30, expected30);\n            if (!result30.AreEqual) {throw new Exception(\"Exception --- test case 29 failed to pass\");}\n\n            var actual31 = Add(147,892);\n            var expected31 = 1039;\n            var result31 = compareLogic.Compare(actual31, expected31);\n            if (!result31.AreEqual) {throw new Exception(\"Exception --- test case 30 failed to pass\");}\n\n            var actual32 = Add(436,402);\n            var expected32 = 838;\n            var result32 = compareLogic.Compare(actual32, expected32);\n            if (!result32.AreEqual) {throw new Exception(\"Exception --- test case 31 failed to pass\");}\n\n            var actual33 = Add(610,581);\n            var expected33 = 1191;\n            var result33 = compareLogic.Compare(actual33, expected33);\n            if (!result33.AreEqual) {throw new Exception(\"Exception --- test case 32 failed to pass\");}\n\n            var actual34 = Add(103,416);\n            var expected34 = 519;\n            var result34 = compareLogic.Compare(actual34, expected34);\n            if (!result34.AreEqual) {throw new Exception(\"Exception --- test case 33 failed to pass\");}\n\n            var actual35 = Add(339,990);\n            var expected35 = 1329;\n            var result35 = compareLogic.Compare(actual35, expected35);\n            if (!result35.AreEqual) {throw new Exception(\"Exception --- test case 34 failed to pass\");}\n\n            var actual36 = Add(130,504);\n            var expected36 = 634;\n            var result36 = compareLogic.Compare(actual36, expected36);\n            if (!result36.AreEqual) {throw new Exception(\"Exception --- test case 35 failed to pass\");}\n\n            var actual37 = Add(242,717);\n            var expected37 = 959;\n            var result37 = compareLogic.Compare(actual37, expected37);\n            if (!result37.AreEqual) {throw new Exception(\"Exception --- test case 36 failed to pass\");}\n\n            var actual38 = Add(562,110);\n            var expected38 = 672;\n            var result38 = compareLogic.Compare(actual38, expected38);\n            if (!result38.AreEqual) {throw new Exception(\"Exception --- test case 37 failed to pass\");}\n\n            var actual39 = Add(396,909);\n            var expected39 = 1305;\n            var result39 = compareLogic.Compare(actual39, expected39);\n            if (!result39.AreEqual) {throw new Exception(\"Exception --- test case 38 failed to pass\");}\n\n            var actual40 = Add(887,703);\n            var expected40 = 1590;\n            var result40 = compareLogic.Compare(actual40, expected40);\n            if (!result40.AreEqual) {throw new Exception(\"Exception --- test case 39 failed to pass\");}\n\n            var actual41 = Add(870,551);\n            var expected41 = 1421;\n            var result41 = compareLogic.Compare(actual41, expected41);\n            if (!result41.AreEqual) {throw new Exception(\"Exception --- test case 40 failed to pass\");}\n\n            var actual42 = Add(422,391);\n            var expected42 = 813;\n            var result42 = compareLogic.Compare(actual42, expected42);\n            if (!result42.AreEqual) {throw new Exception(\"Exception --- test case 41 failed to pass\");}\n\n            var actual43 = Add(299,505);\n            var expected43 = 804;\n            var result43 = compareLogic.Compare(actual43, expected43);\n            if (!result43.AreEqual) {throw new Exception(\"Exception --- test case 42 failed to pass\");}\n\n            var actual44 = Add(346,56);\n            var expected44 = 402;\n            var result44 = compareLogic.Compare(actual44, expected44);\n            if (!result44.AreEqual) {throw new Exception(\"Exception --- test case 43 failed to pass\");}\n\n            var actual45 = Add(36,706);\n            var expected45 = 742;\n            var result45 = compareLogic.Compare(actual45, expected45);\n            if (!result45.AreEqual) {throw new Exception(\"Exception --- test case 44 failed to pass\");}\n\n            var actual46 = Add(738,411);\n            var expected46 = 1149;\n            var result46 = compareLogic.Compare(actual46, expected46);\n            if (!result46.AreEqual) {throw new Exception(\"Exception --- test case 45 failed to pass\");}\n\n            var actual47 = Add(679,87);\n            var expected47 = 766;\n            var result47 = compareLogic.Compare(actual47, expected47);\n            if (!result47.AreEqual) {throw new Exception(\"Exception --- test case 46 failed to pass\");}\n\n            var actual48 = Add(25,303);\n            var expected48 = 328;\n            var result48 = compareLogic.Compare(actual48, expected48);\n            if (!result48.AreEqual) {throw new Exception(\"Exception --- test case 47 failed to pass\");}\n\n            var actual49 = Add(161,612);\n            var expected49 = 773;\n            var result49 = compareLogic.Compare(actual49, expected49);\n            if (!result49.AreEqual) {throw new Exception(\"Exception --- test case 48 failed to pass\");}\n\n            var actual50 = Add(306,841);\n            var expected50 = 1147;\n            var result50 = compareLogic.Compare(actual50, expected50);\n            if (!result50.AreEqual) {throw new Exception(\"Exception --- test case 49 failed to pass\");}\n\n            var actual51 = Add(973,411);\n            var expected51 = 1384;\n            var result51 = compareLogic.Compare(actual51, expected51);\n            if (!result51.AreEqual) {throw new Exception(\"Exception --- test case 50 failed to pass\");}\n\n            var actual52 = Add(711,157);\n            var expected52 = 868;\n            var result52 = compareLogic.Compare(actual52, expected52);\n            if (!result52.AreEqual) {throw new Exception(\"Exception --- test case 51 failed to pass\");}\n\n            var actual53 = Add(471,27);\n            var expected53 = 498;\n            var result53 = compareLogic.Compare(actual53, expected53);\n            if (!result53.AreEqual) {throw new Exception(\"Exception --- test case 52 failed to pass\");}\n\n            var actual54 = Add(714,792);\n            var expected54 = 1506;\n            var result54 = compareLogic.Compare(actual54, expected54);\n            if (!result54.AreEqual) {throw new Exception(\"Exception --- test case 53 failed to pass\");}\n\n            var actual55 = Add(38,206);\n            var expected55 = 244;\n            var result55 = compareLogic.Compare(actual55, expected55);\n            if (!result55.AreEqual) {throw new Exception(\"Exception --- test case 54 failed to pass\");}\n\n            var actual56 = Add(907,343);\n            var expected56 = 1250;\n            var result56 = compareLogic.Compare(actual56, expected56);\n            if (!result56.AreEqual) {throw new Exception(\"Exception --- test case 55 failed to pass\");}\n\n            var actual57 = Add(23,760);\n            var expected57 = 783;\n            var result57 = compareLogic.Compare(actual57, expected57);\n            if (!result57.AreEqual) {throw new Exception(\"Exception --- test case 56 failed to pass\");}\n\n            var actual58 = Add(524,859);\n            var expected58 = 1383;\n            var result58 = compareLogic.Compare(actual58, expected58);\n            if (!result58.AreEqual) {throw new Exception(\"Exception --- test case 57 failed to pass\");}\n\n            var actual59 = Add(30,529);\n            var expected59 = 559;\n            var result59 = compareLogic.Compare(actual59, expected59);\n            if (!result59.AreEqual) {throw new Exception(\"Exception --- test case 58 failed to pass\");}\n\n            var actual60 = Add(341,691);\n            var expected60 = 1032;\n            var result60 = compareLogic.Compare(actual60, expected60);\n            if (!result60.AreEqual) {throw new Exception(\"Exception --- test case 59 failed to pass\");}\n\n            var actual61 = Add(167,729);\n            var expected61 = 896;\n            var result61 = compareLogic.Compare(actual61, expected61);\n            if (!result61.AreEqual) {throw new Exception(\"Exception --- test case 60 failed to pass\");}\n\n            var actual62 = Add(636,289);\n            var expected62 = 925;\n            var result62 = compareLogic.Compare(actual62, expected62);\n            if (!result62.AreEqual) {throw new Exception(\"Exception --- test case 61 failed to pass\");}\n\n            var actual63 = Add(503,144);\n            var expected63 = 647;\n            var result63 = compareLogic.Compare(actual63, expected63);\n            if (!result63.AreEqual) {throw new Exception(\"Exception --- test case 62 failed to pass\");}\n\n            var actual64 = Add(51,985);\n            var expected64 = 1036;\n            var result64 = compareLogic.Compare(actual64, expected64);\n            if (!result64.AreEqual) {throw new Exception(\"Exception --- test case 63 failed to pass\");}\n\n            var actual65 = Add(287,149);\n            var expected65 = 436;\n            var result65 = compareLogic.Compare(actual65, expected65);\n            if (!result65.AreEqual) {throw new Exception(\"Exception --- test case 64 failed to pass\");}\n\n            var actual66 = Add(659,75);\n            var expected66 = 734;\n            var result66 = compareLogic.Compare(actual66, expected66);\n            if (!result66.AreEqual) {throw new Exception(\"Exception --- test case 65 failed to pass\");}\n\n            var actual67 = Add(462,797);\n            var expected67 = 1259;\n            var result67 = compareLogic.Compare(actual67, expected67);\n            if (!result67.AreEqual) {throw new Exception(\"Exception --- test case 66 failed to pass\");}\n\n            var actual68 = Add(406,141);\n            var expected68 = 547;\n            var result68 = compareLogic.Compare(actual68, expected68);\n            if (!result68.AreEqual) {throw new Exception(\"Exception --- test case 67 failed to pass\");}\n\n            var actual69 = Add(106,44);\n            var expected69 = 150;\n            var result69 = compareLogic.Compare(actual69, expected69);\n            if (!result69.AreEqual) {throw new Exception(\"Exception --- test case 68 failed to pass\");}\n\n            var actual70 = Add(300,934);\n            var expected70 = 1234;\n            var result70 = compareLogic.Compare(actual70, expected70);\n            if (!result70.AreEqual) {throw new Exception(\"Exception --- test case 69 failed to pass\");}\n\n            var actual71 = Add(471,524);\n            var expected71 = 995;\n            var result71 = compareLogic.Compare(actual71, expected71);\n            if (!result71.AreEqual) {throw new Exception(\"Exception --- test case 70 failed to pass\");}\n\n            var actual72 = Add(122,429);\n            var expected72 = 551;\n            var result72 = compareLogic.Compare(actual72, expected72);\n            if (!result72.AreEqual) {throw new Exception(\"Exception --- test case 71 failed to pass\");}\n\n            var actual73 = Add(735,195);\n            var expected73 = 930;\n            var result73 = compareLogic.Compare(actual73, expected73);\n            if (!result73.AreEqual) {throw new Exception(\"Exception --- test case 72 failed to pass\");}\n\n            var actual74 = Add(335,484);\n            var expected74 = 819;\n            var result74 = compareLogic.Compare(actual74, expected74);\n            if (!result74.AreEqual) {throw new Exception(\"Exception --- test case 73 failed to pass\");}\n\n            var actual75 = Add(28,809);\n            var expected75 = 837;\n            var result75 = compareLogic.Compare(actual75, expected75);\n            if (!result75.AreEqual) {throw new Exception(\"Exception --- test case 74 failed to pass\");}\n\n            var actual76 = Add(430,20);\n            var expected76 = 450;\n            var result76 = compareLogic.Compare(actual76, expected76);\n            if (!result76.AreEqual) {throw new Exception(\"Exception --- test case 75 failed to pass\");}\n\n            var actual77 = Add(916,635);\n            var expected77 = 1551;\n            var result77 = compareLogic.Compare(actual77, expected77);\n            if (!result77.AreEqual) {throw new Exception(\"Exception --- test case 76 failed to pass\");}\n\n            var actual78 = Add(301,999);\n            var expected78 = 1300;\n            var result78 = compareLogic.Compare(actual78, expected78);\n            if (!result78.AreEqual) {throw new Exception(\"Exception --- test case 77 failed to pass\");}\n\n            var actual79 = Add(454,466);\n            var expected79 = 920;\n            var result79 = compareLogic.Compare(actual79, expected79);\n            if (!result79.AreEqual) {throw new Exception(\"Exception --- test case 78 failed to pass\");}\n\n            var actual80 = Add(905,259);\n            var expected80 = 1164;\n            var result80 = compareLogic.Compare(actual80, expected80);\n            if (!result80.AreEqual) {throw new Exception(\"Exception --- test case 79 failed to pass\");}\n\n            var actual81 = Add(168,205);\n            var expected81 = 373;\n            var result81 = compareLogic.Compare(actual81, expected81);\n            if (!result81.AreEqual) {throw new Exception(\"Exception --- test case 80 failed to pass\");}\n\n            var actual82 = Add(570,434);\n            var expected82 = 1004;\n            var result82 = compareLogic.Compare(actual82, expected82);\n            if (!result82.AreEqual) {throw new Exception(\"Exception --- test case 81 failed to pass\");}\n\n            var actual83 = Add(64,959);\n            var expected83 = 1023;\n            var result83 = compareLogic.Compare(actual83, expected83);\n            if (!result83.AreEqual) {throw new Exception(\"Exception --- test case 82 failed to pass\");}\n\n            var actual84 = Add(957,510);\n            var expected84 = 1467;\n            var result84 = compareLogic.Compare(actual84, expected84);\n            if (!result84.AreEqual) {throw new Exception(\"Exception --- test case 83 failed to pass\");}\n\n            var actual85 = Add(722,598);\n            var expected85 = 1320;\n            var result85 = compareLogic.Compare(actual85, expected85);\n            if (!result85.AreEqual) {throw new Exception(\"Exception --- test case 84 failed to pass\");}\n\n            var actual86 = Add(770,226);\n            var expected86 = 996;\n            var result86 = compareLogic.Compare(actual86, expected86);\n            if (!result86.AreEqual) {throw new Exception(\"Exception --- test case 85 failed to pass\");}\n\n            var actual87 = Add(579,66);\n            var expected87 = 645;\n            var result87 = compareLogic.Compare(actual87, expected87);\n            if (!result87.AreEqual) {throw new Exception(\"Exception --- test case 86 failed to pass\");}\n\n            var actual88 = Add(117,674);\n            var expected88 = 791;\n            var result88 = compareLogic.Compare(actual88, expected88);\n            if (!result88.AreEqual) {throw new Exception(\"Exception --- test case 87 failed to pass\");}\n\n            var actual89 = Add(530,30);\n            var expected89 = 560;\n            var result89 = compareLogic.Compare(actual89, expected89);\n            if (!result89.AreEqual) {throw new Exception(\"Exception --- test case 88 failed to pass\");}\n\n            var actual90 = Add(776,345);\n            var expected90 = 1121;\n            var result90 = compareLogic.Compare(actual90, expected90);\n            if (!result90.AreEqual) {throw new Exception(\"Exception --- test case 89 failed to pass\");}\n\n            var actual91 = Add(327,389);\n            var expected91 = 716;\n            var result91 = compareLogic.Compare(actual91, expected91);\n            if (!result91.AreEqual) {throw new Exception(\"Exception --- test case 90 failed to pass\");}\n\n            var actual92 = Add(596,12);\n            var expected92 = 608;\n            var result92 = compareLogic.Compare(actual92, expected92);\n            if (!result92.AreEqual) {throw new Exception(\"Exception --- test case 91 failed to pass\");}\n\n            var actual93 = Add(599,511);\n            var expected93 = 1110;\n            var result93 = compareLogic.Compare(actual93, expected93);\n            if (!result93.AreEqual) {throw new Exception(\"Exception --- test case 92 failed to pass\");}\n\n            var actual94 = Add(936,476);\n            var expected94 = 1412;\n            var result94 = compareLogic.Compare(actual94, expected94);\n            if (!result94.AreEqual) {throw new Exception(\"Exception --- test case 93 failed to pass\");}\n\n            var actual95 = Add(461,14);\n            var expected95 = 475;\n            var result95 = compareLogic.Compare(actual95, expected95);\n            if (!result95.AreEqual) {throw new Exception(\"Exception --- test case 94 failed to pass\");}\n\n            var actual96 = Add(966,157);\n            var expected96 = 1123;\n            var result96 = compareLogic.Compare(actual96, expected96);\n            if (!result96.AreEqual) {throw new Exception(\"Exception --- test case 95 failed to pass\");}\n\n            var actual97 = Add(326,91);\n            var expected97 = 417;\n            var result97 = compareLogic.Compare(actual97, expected97);\n            if (!result97.AreEqual) {throw new Exception(\"Exception --- test case 96 failed to pass\");}\n\n            var actual98 = Add(392,455);\n            var expected98 = 847;\n            var result98 = compareLogic.Compare(actual98, expected98);\n            if (!result98.AreEqual) {throw new Exception(\"Exception --- test case 97 failed to pass\");}\n\n            var actual99 = Add(446,477);\n            var expected99 = 923;\n            var result99 = compareLogic.Compare(actual99, expected99);\n            if (!result99.AreEqual) {throw new Exception(\"Exception --- test case 98 failed to pass\");}\n\n            var actual100 = Add(324,860);\n            var expected100 = 1184;\n            var result100 = compareLogic.Compare(actual100, expected100);\n            if (!result100.AreEqual) {throw new Exception(\"Exception --- test case 99 failed to pass\");}\n\n            var actual101 = Add(945,85);\n            var expected101 = 1030;\n            var result101 = compareLogic.Compare(actual101, expected101);\n            if (!result101.AreEqual) {throw new Exception(\"Exception --- test case 100 failed to pass\");}\n\n            var actual102 = Add(886,582);\n            var expected102 = 1468;\n            var result102 = compareLogic.Compare(actual102, expected102);\n            if (!result102.AreEqual) {throw new Exception(\"Exception --- test case 101 failed to pass\");}\n\n            var actual103 = Add(886,712);\n            var expected103 = 1598;\n            var result103 = compareLogic.Compare(actual103, expected103);\n            if (!result103.AreEqual) {throw new Exception(\"Exception --- test case 102 failed to pass\");}\n\n            var actual104 = Add(842,953);\n            var expected104 = 1795;\n            var result104 = compareLogic.Compare(actual104, expected104);\n            if (!result104.AreEqual) {throw new Exception(\"Exception --- test case 103 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Προσθέστε δύο αριθμούς x και y.", "entry_point": "Add", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/20", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Ελέγξτε αν δύο λέξεις έχουν τους ίδιους χαρακτήρες.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars (string s0, string s1) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SameChars(\"abcd\",\"dddddddabc\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SameChars(\"dddddddabc\",\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SameChars(\"eabcd\",\"dddddddabc\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SameChars(\"abcd\",\"dddddddabcf\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SameChars(\"aabb\",\"aaccc\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Ελέγξτε αν δύο λέξεις έχουν τους ίδιους χαρακτήρες.", "entry_point": "SameChars", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/21", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστροφή του n-οστού αριθμού Fibonacci.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib(10);\n            var expected1 = 55;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib(1);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib(8);\n            var expected3 = 21;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib(11);\n            var expected4 = 89;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fib(12);\n            var expected5 = 144;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστροφή του n-οστού αριθμού Fibonacci.", "entry_point": "Fib", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/22", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστροφή ταξινομημένων μοναδικών κοινών στοιχείων για δύο λίστες.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// \n        /// </summary>\n        public static List<int> Common (List<int> l1, List<int> l2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Common(new List<int> {1,4,3,34,653,2,5},new List<int> {5,7,1,5,9,653,121});\n            var expected1 = new List<int> {1,5,653};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Common(new List<int> {5,3,2,8},new List<int> {3,2});\n            var expected2 = new List<int> {2,3};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Common(new List<int> {4,3,2,8},new List<int> {3,2,4});\n            var expected3 = new List<int> {2,3,4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Common(new List<int> {4,3,2,8},new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστροφή ταξινομημένων μοναδικών κοινών στοιχείων για δύο λίστες.", "entry_point": "Common", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/23", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Επιστρέφει το μεγαλύτερο πρώτο παράγοντα του n. Υποθέτουμε ότι το n > 1 και δεν είναι πρώτος.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// </summary>\n        public static int LargestPrimeFactor (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestPrimeFactor(15);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestPrimeFactor(27);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestPrimeFactor(63);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestPrimeFactor(330);\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestPrimeFactor(13195);\n            var expected5 = 29;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Επιστρέφει το μεγαλύτερο πρώτο παράγοντα του n. Υποθέτουμε ότι το n > 1 και δεν είναι πρώτος.", "entry_point": "LargestPrimeFactor", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/24", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Η SumToN είναι μια συνάρτηση που αθροίζει αριθμούς από το 1 έως το n.\n        /// >>> SumToN(30)\n        /// 465\n        /// >>> SumToN(100)\n        /// 5050\n        /// >>> SumToN(5)\n        /// 15\n        /// >>> SumToN(10)\n        /// 55\n        /// >>> SumToN(1)\n        /// 1\n        /// \n        /// </summary>\n        public static int SumToN (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumToN(1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumToN(6);\n            var expected2 = 21;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumToN(11);\n            var expected3 = 66;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumToN(30);\n            var expected4 = 465;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumToN(100);\n            var expected5 = 5050;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η sum_to_n είναι μια συνάρτηση που αθροίζει αριθμούς από το 1 έως το n.", "entry_point": "SumToN", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/25", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Οι xs αντιπροσωπεύουν τους συντελεστές ενός πολυωνύμου.\n        ///     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        ///     Επιστρέφει την παράγωγο αυτού του πολυωνύμου στην ίδια μορφή.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative (List<int> xs) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Derivative(new List<int> {3,1,2,4,5});\n            var expected1 = new List<int> {1,4,12,20};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Derivative(new List<int> {1,2,3});\n            var expected2 = new List<int> {2,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Derivative(new List<int> {3,2,1});\n            var expected3 = new List<int> {2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Derivative(new List<int> {3,2,1,0,4});\n            var expected4 = new List<int> {2,2,0,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Derivative(new List<int> {1});\n            var expected5 = new List<int> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Οι xs αντιπροσωπεύουν τους συντελεστές ενός πολυωνύμου.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Επιστρέφει την παράγωγο αυτού του πολυωνύμου στην ίδια μορφή.", "entry_point": "Derivative", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/26", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Η ακολουθία αριθμών FibFib είναι μια ακολουθία παρόμοια με την ακολουθία Fibonacci που ορίζεται ως εξής:\n        ///     Fibfib(0) == 0\n        ///     Fibfib(1) == 0\n        ///     Fibfib(2) == 1\n        ///     Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        ///     Παρακαλούμε γράψτε μια συνάρτηση για τον αποδοτικό υπολογισμό του n-οστού στοιχείου της ακολουθίας αριθμών FibFib.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fibfib(2);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fibfib(1);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fibfib(5);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fibfib(8);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fibfib(10);\n            var expected5 = 81;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Fibfib(12);\n            var expected6 = 274;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Fibfib(14);\n            var expected7 = 927;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η ακολουθία αριθμών FibFib είναι μια ακολουθία παρόμοια με την ακολουθία Fibonacci που ορίζεται ως εξής:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Παρακαλούμε γράψτε μια συνάρτηση για τον αποδοτικό υπολογισμό του n-οστού στοιχείου της ακολουθίας αριθμών FibFib.", "entry_point": "Fibfib", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/27", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Γράψτε μια συνάρτηση VowelsCount η οποία παίρνει ως είσοδο μια συμβολοσειρά που αναπαριστά ένα λέξη και επιστρέφει τον αριθμό των φωνηέντων στη συμβολοσειρά. Τα φωνήεντα σε αυτήν την περίπτωση είναι 'a', 'e', 'i', 'o', 'u'. Εδώ, το 'y' είναι επίσης ένα φωνήεν, αλλά μόνο όταν βρίσκεται στο τέλος της δοθείσας λέξης.\n        /// \n        /// Παράδειγμα:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = VowelsCount(\"abcde\");\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = VowelsCount(\"Alone\");\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = VowelsCount(\"key\");\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = VowelsCount(\"bye\");\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = VowelsCount(\"keY\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = VowelsCount(\"bYe\");\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = VowelsCount(\"ACEDY\");\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση vowels_count η οποία παίρνει ως είσοδο μια συμβολοσειρά που αναπαριστά ένα λέξη και επιστρέφει τον αριθμό των φωνηέντων στη συμβολοσειρά. Τα φωνήεντα σε αυτήν την περίπτωση είναι 'a', 'e', 'i', 'o', 'u'. Εδώ, το 'y' είναι επίσης ένα φωνήεν, αλλά μόνο όταν βρίσκεται στο τέλος της δοθείσας λέξης.\n\nΠαράδειγμα:", "entry_point": "VowelsCount", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/28", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται μια μη κενή λίστα θετικών ακεραίων. Επιστρέψτε το μεγαλύτερο ακέραιο που είναι μεγαλύτερο από το μηδέν και έχει συχνότητα μεγαλύτερη ή ίση με την τιμή του ακεραίου. Η συχνότητα ενός ακεραίου είναι ο αριθμός των φορών που εμφανίζεται στη λίστα. Εάν δεν υπάρχει τέτοια τιμή, επιστρέψτε -1. Παραδείγματα:\n        /// \n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// </summary>\n        public static int Search (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Search(new List<int> {5,5,5,5,1});\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Search(new List<int> {4,1,4,1,4,4});\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Search(new List<int> {3,3});\n            var expected3 = -1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Search(new List<int> {8,8,8,8,8,8,8,8});\n            var expected4 = 8;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Search(new List<int> {2,3,3,2,2});\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Search(new List<int> {2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1});\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Search(new List<int> {3,2,8,2});\n            var expected7 = 2;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Search(new List<int> {6,7,1,8,8,10,5,8,5,3,10});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Search(new List<int> {8,8,3,6,5,6,4});\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Search(new List<int> {6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9});\n            var expected10 = 1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Search(new List<int> {1,9,10,1,3});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Search(new List<int> {6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10});\n            var expected12 = 5;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Search(new List<int> {1});\n            var expected13 = 1;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Search(new List<int> {8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5});\n            var expected14 = 4;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Search(new List<int> {2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10});\n            var expected15 = 2;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Search(new List<int> {1,6,10,1,6,9,10,8,6,8,7,3});\n            var expected16 = 1;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Search(new List<int> {9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4});\n            var expected17 = 4;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Search(new List<int> {2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7});\n            var expected18 = 4;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Search(new List<int> {9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1});\n            var expected19 = 2;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Search(new List<int> {5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8});\n            var expected20 = -1;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Search(new List<int> {10});\n            var expected21 = -1;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Search(new List<int> {9,7,7,2,4,7,2,10,9,7,5,7,2});\n            var expected22 = 2;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Search(new List<int> {5,4,10,2,1,1,10,3,6,1,8});\n            var expected23 = 1;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Search(new List<int> {7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6});\n            var expected24 = 1;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Search(new List<int> {3,10,10,9,2});\n            var expected25 = -1;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια μη κενή λίστα θετικών ακεραίων. Επιστρέψτε το μεγαλύτερο ακέραιο που είναι μεγαλύτερο από το μηδέν και έχει συχνότητα μεγαλύτερη ή ίση με την τιμή του ακεραίου. Η συχνότητα ενός ακεραίου είναι ο αριθμός των φορών που εμφανίζεται στη λίστα. Εάν δεν υπάρχει τέτοια τιμή, επιστρέψτε -1. Παραδείγματα:", "entry_point": "Search", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/29", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένων των μήκων των τριών πλευρών ενός τριγώνου, επιστρέψτε την περιοχή του τριγώνου στρογγυλοποιημένη στα 2 δεκαδικά ψηφία αν οι τρεις πλευρές αποτελούν ένα έγκυρο τρίγωνο. Διαφορετικά, επιστρέψτε -1. Τρεις πλευρές αποτελούν ένα έγκυρο τρίγωνο όταν το άθροισμα οποιωνδήποτε δύο πλευρών είναι μεγαλύτερο από την τρίτη πλευρά. Παράδειγμα:\n        /// \n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea (int a, int b, int c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriangleArea(3,4,5);\n            var expected1 = 6.0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriangleArea(1,2,10);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriangleArea(4,8,5);\n            var expected3 = 8.18;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriangleArea(2,2,2);\n            var expected4 = 1.73;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriangleArea(1,2,3);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriangleArea(10,5,7);\n            var expected6 = 16.25;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriangleArea(2,6,3);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriangleArea(1,1,1);\n            var expected8 = 0.43;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriangleArea(2,2,10);\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένων των μήκων των τριών πλευρών ενός τριγώνου, επιστρέψτε την περιοχή του τριγώνου στρογγυλοποιημένη στα 2 δεκαδικά ψηφία αν οι τρεις πλευρές αποτελούν ένα έγκυρο τρίγωνο. Διαφορετικά, επιστρέψτε -1. Τρεις πλευρές αποτελούν ένα έγκυρο τρίγωνο όταν το άθροισμα οποιωνδήποτε δύο πλευρών είναι μεγαλύτερο από την τρίτη πλευρά. Παράδειγμα:", "entry_point": "TriangleArea", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/30", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Γράψτε μια συνάρτηση που επιστρέφει True αν το αντικείμενο q θα πετάξει, και False αλλιώς.\n        /// Το αντικείμενο q θα πετάξει αν είναι ισορροπημένο (είναι παλινδρομική λίστα) και άθροισμα των στοιχείων του είναι μικρότερο ή ίσο του μέγιστου δυνατού βάρους w.\n        /// \n        /// Παράδειγμα:\n        /// WillItFly([1, 2], 5) ➞ False\n        /// # 1+2 είναι μικρότερο από το μέγιστο δυνατό βάρος, αλλά δεν είναι ισορροπημένο.\n        /// \n        /// WillItFly([3, 2, 3], 1) ➞ False\n        /// # είναι ισορροπημένο, αλλά 3+2+3 είναι περισσότερο από το μέγιστο δυνατό βάρος.\n        /// \n        /// WillItFly([3, 2, 3], 9) ➞ True\n        /// # 3+2+3 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο.\n        /// \n        /// WillItFly([3], 5) ➞ True\n        /// # 3 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο.\n        /// \n        /// \n        /// </summary>\n        public static bool WillItFly (List<int> q, int w) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WillItFly(new List<int> {3,2,3},9);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WillItFly(new List<int> {1,2},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WillItFly(new List<int> {3},5);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WillItFly(new List<int> {3,2,3},1);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WillItFly(new List<int> {1,2,3},6);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WillItFly(new List<int> {5},5);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση που επιστρέφει True αν το αντικείμενο q θα πετάξει, και False αλλιώς.\nΤο αντικείμενο q θα πετάξει αν είναι ισορροπημένο (είναι παλινδρομική λίστα) και άθροισμα των στοιχείων του είναι μικρότερο ή ίσο του μέγιστου δυνατού βάρους w.\n\nΠαράδειγμα:\nwill_it_fly([1, 2], 5) ➞ False\n# 1+2 είναι μικρότερο από το μέγιστο δυνατό βάρος, αλλά δεν είναι ισορροπημένο.\n\nwill_it_fly([3, 2, 3], 1) ➞ False\n# είναι ισορροπημένο, αλλά 3+2+3 είναι περισσότερο από το μέγιστο δυνατό βάρος.\n\nwill_it_fly([3, 2, 3], 9) ➞ True\n# 3+2+3 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο.\n\nwill_it_fly([3], 5) ➞ True\n# 3 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο.", "entry_point": "WillItFly", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/31", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Γράψτε μια συνάρτηση που επιστρέφει true αν το δοθέν αριθμός είναι το γινόμενο τριών πρώτων αριθμών και false σε διαφορετική περίπτωση.\n        ///     Γνωρίζοντας ότι (α) είναι μικρότερο από το 100.\n        ///     Παράδειγμα:\n        /// \n        /// IsMultiplyPrime(30) == True\n        /// 30 = 2 * 3 * 5\n        /// \n        /// </summary>\n        public static bool IsMultiplyPrime (int a) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsMultiplyPrime(5);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsMultiplyPrime(30);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsMultiplyPrime(8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsMultiplyPrime(10);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsMultiplyPrime(125);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsMultiplyPrime(105);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsMultiplyPrime(126);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsMultiplyPrime(729);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsMultiplyPrime(891);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsMultiplyPrime(1001);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση που επιστρέφει true αν το δοθέν αριθμός είναι το γινόμενο τριών πρώτων αριθμών και false σε διαφορετική περίπτωση.\n    Γνωρίζοντας ότι (α) είναι μικρότερο από το 100.\n    Παράδειγμα:", "entry_point": "IsMultiplyPrime", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/32", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Θα σας δοθεί ένας αριθμός σε δεκαδική μορφή και η εργασία σας είναι να τον μετατρέψετε σε δυαδική μορφή. Η συνάρτηση θα πρέπει να επιστρέφει μια συμβολοσειρά, με κάθε χαρακτήρα που αντιπροσωπεύει ένα δυαδικό αριθμό. Κάθε χαρακτήρας στη συμβολοσειρά θα είναι '0' ή '1'.\n        /// \n        /// Θα υπάρχουν μερικοί επιπλέον χαρακτήρες 'db' στην αρχή και στο τέλος της συμβολοσειράς. Οι επιπλέον χαρακτήρες είναι εκεί για να βοηθήσουν με τη μορφοποίηση.\n        /// \n        /// Παραδείγματα:\n        /// \n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary (int decimal) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DecimalToBinary(0);\n            var expected1 = \"db0db\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DecimalToBinary(32);\n            var expected2 = \"db100000db\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DecimalToBinary(103);\n            var expected3 = \"db1100111db\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DecimalToBinary(15);\n            var expected4 = \"db1111db\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Θα σας δοθεί ένας αριθμός σε δεκαδική μορφή και η εργασία σας είναι να τον μετατρέψετε σε δυαδική μορφή. Η συνάρτηση θα πρέπει να επιστρέφει μια συμβολοσειρά, με κάθε χαρακτήρα που αντιπροσωπεύει ένα δυαδικό αριθμό. Κάθε χαρακτήρας στη συμβολοσειρά θα είναι '0' ή '1'.\n\nΘα υπάρχουν μερικοί επιπλέον χαρακτήρες 'db' στην αρχή και στο τέλος της συμβολοσειράς. Οι επιπλέον χαρακτήρες είναι εκεί για να βοηθήσουν με τη μορφοποίηση.\n\nΠαραδείγματα:", "entry_point": "DecimalToBinary", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/33", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνεται μια συμβολοσειρά s.\n        ///     Η εργασία σας είναι να ελέγξετε αν η συμβολοσειρά είναι ευτυχισμένη ή όχι.\n        ///     Μια συμβολοσειρά είναι ευτυχισμένη αν η μήκος της είναι τουλάχιστον 3 και κάθε 3 συνεχόμενα γράμματα είναι διαφορετικά.\n        ///     Για παράδειγμα:\n        /// \n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsHappy(\"a\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsHappy(\"aa\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsHappy(\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsHappy(\"aabb\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsHappy(\"adb\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsHappy(\"xyy\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsHappy(\"iopaxpoi\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsHappy(\"iopaxioi\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια συμβολοσειρά s.\n    Η εργασία σας είναι να ελέγξετε αν η συμβολοσειρά είναι ευτυχισμένη ή όχι.\n    Μια συμβολοσειρά είναι ευτυχισμένη αν η μήκος της είναι τουλάχιστον 3 και κάθε 3 συνεχόμενα γράμματα είναι διαφορετικά.\n    Για παράδειγμα:", "entry_point": "IsHappy", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/34", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Είναι η τελευταία εβδομάδα του εξαμήνου και ο καθηγητής πρέπει να δώσει τους βαθμούς στους μαθητές. Ο καθηγητής έχει δημιουργήσει το δικό του αλγόριθμο για τη βαθμολογία. Το μόνο πρόβλημα είναι ότι έχασε τον κώδικα που χρησιμοποιούσε για τη βαθμολογία. Σας έχει δώσει μια λίστα με τα GPA για μερικούς μαθητές και πρέπει να γράψετε μια συνάρτηση που μπορεί να εξάγει μια λίστα με τις βαθμολογίες γραμμάτων χρησιμοποιώντας τον παρακάτω πίνακα:\n        ///              GPA       |    Βαθμός γράμματος\n        ///               4.0                Α+\n        ///             > 3.7                Α \n        ///             > 3.3                Α- \n        ///             > 3.0                Β+\n        ///             > 2.7                Β \n        ///             > 2.3                Β-\n        ///             > 2.0                C+\n        ///             > 1.7                C\n        ///             > 1.3                C-\n        ///             > 1.0                D+ \n        ///             > 0.7                D \n        ///             > 0.0                D-\n        ///               0.0                Ε\n        ///     \n        /// \n        ///     Παράδειγμα:\n        /// \n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade (List<object> grades) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NumericalLetterGrade(new List<object> {4.0,3,1.7,2,3.5});\n            var expected1 = new List<string> {\"A+\",\"B\",\"C-\",\"C\",\"A-\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NumericalLetterGrade(new List<object> {1.2});\n            var expected2 = new List<string> {\"D+\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NumericalLetterGrade(new List<object> {0.5});\n            var expected3 = new List<string> {\"D-\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NumericalLetterGrade(new List<object> {0.0});\n            var expected4 = new List<string> {\"E\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NumericalLetterGrade(new List<object> {1,0.3,1.5,2.8,3.3});\n            var expected5 = new List<string> {\"D\",\"D-\",\"C-\",\"B\",\"B+\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NumericalLetterGrade(new List<object> {0,0.7});\n            var expected6 = new List<string> {\"E\",\"D-\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Είναι η τελευταία εβδομάδα του εξαμήνου και ο καθηγητής πρέπει να δώσει τους βαθμούς στους μαθητές. Ο καθηγητής έχει δημιουργήσει το δικό του αλγόριθμο για τη βαθμολογία. Το μόνο πρόβλημα είναι ότι έχασε τον κώδικα που χρησιμοποιούσε για τη βαθμολογία. Σας έχει δώσει μια λίστα με τα GPA για μερικούς μαθητές και πρέπει να γράψετε μια συνάρτηση που μπορεί να εξάγει μια λίστα με τις βαθμολογίες γραμμάτων χρησιμοποιώντας τον παρακάτω πίνακα:\n             GPA       |    Βαθμός γράμματος\n              4.0                Α+\n            > 3.7                Α \n            > 3.3                Α- \n            > 3.0                Β+\n            > 2.7                Β \n            > 2.3                Β-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                Ε\n    \n\n    Παράδειγμα:", "entry_point": "NumericalLetterGrade", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/35", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Γράψτε μια συνάρτηση που παίρνει ένα αλφαριθμητικό και επιστρέφει True αν το μήκος του αλφαριθμητικού είναι πρώτος αριθμός ή False αλλιώς. Παραδείγματα.\n        /// \n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeLength(\"Hello\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeLength(\"abcdcba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeLength(\"kittens\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeLength(\"orange\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeLength(\"wow\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeLength(\"world\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeLength(\"MadaM\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeLength(\"Wow\");\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeLength(\"\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeLength(\"HI\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = PrimeLength(\"go\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = PrimeLength(\"gogo\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = PrimeLength(\"aaaaaaaaaaaaaaa\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = PrimeLength(\"Madam\");\n            var expected14 = true;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = PrimeLength(\"M\");\n            var expected15 = false;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = PrimeLength(\"0\");\n            var expected16 = false;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση που παίρνει ένα αλφαριθμητικό και επιστρέφει True αν το μήκος του αλφαριθμητικού είναι πρώτος αριθμός ή False αλλιώς. Παραδείγματα.", "entry_point": "PrimeLength", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/36", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Δεδομένου ενός θετικού ακεραίου N, επιστρέφεται το συνολικό άθροισμα των ψηφίων του σε δυαδική μορφή.\n        /// \n        ///     Παράδειγμα\n        ///         Για N = 1000, το άθροισμα των ψηφίων θα είναι 1 και η έξοδος θα πρέπει να είναι \"1\".\n        ///         Για N = 150, το άθροισμα των ψηφίων θα είναι 6 και η έξοδος θα πρέπει να είναι \"110\".\n        ///         Για N = 147, το άθροισμα των ψηφίων θα είναι 12 και η έξοδος θα πρέπει να είναι \"1100\".\n        ///     \n        ///     Μεταβλητές:\n        ///         @N ακέραιος\n        ///              Περιορισμοί: 0 ≤ N ≤ 10000.\n        ///     Έξοδος:\n        ///          μια συμβολοσειρά δυαδικού αριθμού\n        /// \n        /// \n        /// </summary>\n        public static string Solve (int N) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(1000);\n            var expected1 = \"1\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(150);\n            var expected2 = \"110\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(147);\n            var expected3 = \"1100\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(333);\n            var expected4 = \"1001\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(963);\n            var expected5 = \"10010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός θετικού ακεραίου N, επιστρέφεται το συνολικό άθροισμα των ψηφίων του σε δυαδική μορφή.\n\n    Παράδειγμα\n        Για N = 1000, το άθροισμα των ψηφίων θα είναι 1 και η έξοδος θα πρέπει να είναι \"1\".\n        Για N = 150, το άθροισμα των ψηφίων θα είναι 6 και η έξοδος θα πρέπει να είναι \"110\".\n        Για N = 147, το άθροισμα των ψηφίων θα είναι 12 και η έξοδος θα πρέπει να είναι \"1100\".\n    \n    Μεταβλητές:\n        @N ακέραιος\n             Περιορισμοί: 0 ≤ N ≤ 10000.\n    Έξοδος:\n         μια συμβολοσειρά δυαδικού αριθμού", "entry_point": "Solve", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/37", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται μια δισδιάστατη δομή δεδομένων, ως εμφωλευμένες λίστες, που είναι παρόμοια με μια πίνακα, αλλά, αντίθετα από τους πίνακες, κάθε γραμμή μπορεί να περιέχει διαφορετικό αριθμό στηλών. Δεδομένης της λίστας lst και του ακεραίου x, βρείτε τους ακεραίους x στη λίστα και επιστρέψτε μια λίστα από tuples, [(x1, y1), (x2, y2) ...] ώστε κάθε tuple να είναι μια συντεταγμένη - (γραμμή, στήλες), ξεκινώντας από το 0. Ταξινομήστε αρχικά τις συντεταγμένες ανά γραμμή με αύξουσα σειρά. Επίσης, ταξινομήστε τις συντεταγμένες της γραμμής με φθίνουσα σειρά.\n        /// \n        /// Παραδείγματα:\n        /// \n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<List<int>> GetRow (List<List<int>> lst, int x) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected1 = new List<List<int>> {new List<int> {0,0},new List<int> {1,4},new List<int> {1,0},new List<int> {2,5},new List<int> {2,0}};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6}},2);\n            var expected2 = new List<List<int>> {new List<int> {0,1},new List<int> {1,1},new List<int> {2,1},new List<int> {3,1},new List<int> {4,1},new List<int> {5,1}};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,1,3,4,5,6},new List<int> {1,2,1,4,5,6},new List<int> {1,2,3,1,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected3 = new List<List<int>> {new List<int> {0,0},new List<int> {1,0},new List<int> {2,1},new List<int> {2,0},new List<int> {3,2},new List<int> {3,0},new List<int> {4,3},new List<int> {4,0},new List<int> {5,4},new List<int> {5,0},new List<int> {6,5},new List<int> {6,0}};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetRow(new List<List<int>> {},1);\n            var expected4 = new List<List<int>> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = GetRow(new List<List<int>> {new List<int> {1}},2);\n            var expected5 = new List<List<int>> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = GetRow(new List<List<int>> {new List<int> {},new List<int> {1},new List<int> {1,2,3}},3);\n            var expected6 = new List<List<int>> {new List<int> {2,2}};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια δισδιάστατη δομή δεδομένων, ως εμφωλευμένες λίστες, που είναι παρόμοια με μια πίνακα, αλλά, αντίθετα από τους πίνακες, κάθε γραμμή μπορεί να περιέχει διαφορετικό αριθμό στηλών. Δεδομένης της λίστας lst και του ακεραίου x, βρείτε τους ακεραίους x στη λίστα και επιστρέψτε μια λίστα από tuples, [(x1, y1), (x2, y2) ...] ώστε κάθε tuple να είναι μια συντεταγμένη - (γραμμή, στήλες), ξεκινώντας από το 0. Ταξινομήστε αρχικά τις συντεταγμένες ανά γραμμή με αύξουσα σειρά. Επίσης, ταξινομήστε τις συντεταγμένες της γραμμής με φθίνουσα σειρά.\n\nΠαραδείγματα:", "entry_point": "GetRow", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/38", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται μια λίστα ακεραίων.\n        /// Γράψτε μια συνάρτηση NextSmallest() που επιστρέφει τον δεύτερο μικρότερο στοιχείο της λίστας.\n        /// Επιστρέψτε null αν δεν υπάρχει τέτοιο στοιχείο.\n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NextSmallest(new List<int> {1,2,3,4,5});\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NextSmallest(new List<int> {5,1,4,3,2});\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NextSmallest(new List<int> {});\n            var expected3 = null;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NextSmallest(new List<int> {1,1});\n            var expected4 = null;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NextSmallest(new List<int> {1,1,1,1,0});\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NextSmallest(new List<int> {1,1});\n            var expected6 = null;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = NextSmallest(new List<int> {-35,34,12,-45});\n            var expected7 = -35;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια λίστα ακεραίων.\nΓράψτε μια συνάρτηση next_smallest() που επιστρέφει τον δεύτερο μικρότερο στοιχείο της λίστας.\nΕπιστρέψτε null αν δεν υπάρχει τέτοιο στοιχείο.", "entry_point": "NextSmallest", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/39", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Θα σας δοθεί μια συμβολοσειρά λέξεων και η εργασία σας είναι να μετρήσετε τον αριθμό των βαρεμάρων. Μια βαρεμάρα είναι μια πρόταση που ξεκινά με τη λέξη \"Εγώ\". Οι προτάσεις διαχωρίζονται μεταξύ τους με '.' , '?' ή '!'.\n        /// \n        /// Για παράδειγμα:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored (string S) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsBored(\"Hello world\");\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsBored(\"Is the sky blue?\");\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsBored(\"I love It !\");\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsBored(\"bIt\");\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsBored(\"I feel good today. I will be productive. will kill It\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsBored(\"You and I are going for a walk\");\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Θα σας δοθεί μια συμβολοσειρά λέξεων και η εργασία σας είναι να μετρήσετε τον αριθμό των βαρεμάρων. Μια βαρεμάρα είναι μια πρόταση που ξεκινά με τη λέξη \"Εγώ\". Οι προτάσεις διαχωρίζονται μεταξύ τους με '.' , '?' ή '!'.\n\nΓια παράδειγμα:", "entry_point": "IsBored", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/40", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνεται μια λίστα ακεραίων.\n        ///     Πρέπει να βρείτε τη μεγαλύτερη πρώτη τιμή και να επιστρέψετε το άθροισμα των ψηφίων της.\n        /// \n        ///     Παραδείγματα:\n        /// \n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Skjkasdkd(new List<int> {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3});\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Skjkasdkd(new List<int> {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Skjkasdkd(new List<int> {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3});\n            var expected3 = 13;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Skjkasdkd(new List<int> {0,724,32,71,99,32,6,0,5,91,83,0,5,6});\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Skjkasdkd(new List<int> {0,81,12,3,1,21});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Skjkasdkd(new List<int> {0,8,1,2,1,7});\n            var expected6 = 7;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Skjkasdkd(new List<int> {8191});\n            var expected7 = 19;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Skjkasdkd(new List<int> {8191,123456,127,7});\n            var expected8 = 19;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Skjkasdkd(new List<int> {127,97,8192});\n            var expected9 = 10;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια λίστα ακεραίων.\n    Πρέπει να βρείτε τη μεγαλύτερη πρώτη τιμή και να επιστρέψετε το άθροισμα των ψηφίων της.\n\n    Παραδείγματα:", "entry_point": "Skjkasdkd", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/41", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός λεξικού, επιστρέψτε True αν όλα τα κλειδιά είναι συμβολοσειρές σε πεζά γράμματα ή όλα τα κλειδιά είναι συμβολοσειρές σε κεφαλαία γράμματα, αλλιώς επιστρέψτε False. Η συνάρτηση πρέπει να επιστρέφει False αν το δοσμένο λεξικό είναι κενό. Παραδείγματα:\n        /// \n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase (Dictionary<object, string> dict) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"b\", \"banana\"}});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"A\", \"banana\"},{\"B\", \"banana\"}});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{5, \"banana\"},{\"a\", \"apple\"}});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckDictCase(new Dictionary<object, string> {{\"Name\", \"John\"},{\"Age\", \"36\"},{\"City\", \"Houston\"}});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckDictCase(new Dictionary<object, string> {{\"STATE\", \"NC\"},{\"ZIP\", \"12345\"}});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckDictCase(new Dictionary<object, string> {{\"fruit\", \"Orange\"},{\"taste\", \"Sweet\"}});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckDictCase(new Dictionary<object, string> {});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός λεξικού, επιστρέψτε True αν όλα τα κλειδιά είναι συμβολοσειρές σε πεζά γράμματα ή όλα τα κλειδιά είναι συμβολοσειρές σε κεφαλαία γράμματα, αλλιώς επιστρέψτε False. Η συνάρτηση πρέπει να επιστρέφει False αν το δοσμένο λεξικό είναι κενό. Παραδείγματα:", "entry_point": "CheckDictCase", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/42", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δημιουργήστε μια συνάρτηση που παίρνει μια τιμή (συμβολοσειρά) που αναπαριστά έναν αριθμό και επιστρέφει τον πλησιέστερο ακέραιο αριθμό σε αυτόν. Εάν ο αριθμός είναι ισοαπόστακτος από δύο ακεραίους, στρογγυλοποιήστε τον μακριά από το μηδέν.\n        /// \n        /// Παραδείγματα\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger (string value) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ClosestInteger(\"10\");\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ClosestInteger(\"14.5\");\n            var expected2 = 15;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ClosestInteger(\"-15.5\");\n            var expected3 = -16;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ClosestInteger(\"15.3\");\n            var expected4 = 15;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ClosestInteger(\"0\");\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δημιουργήστε μια συνάρτηση που παίρνει μια τιμή (συμβολοσειρά) που αναπαριστά έναν αριθμό και επιστρέφει τον πλησιέστερο ακέραιο αριθμό σε αυτόν. Εάν ο αριθμός είναι ισοαπόστακτος από δύο ακεραίους, στρογγυλοποιήστε τον μακριά από το μηδέν.\n\nΠαραδείγματα", "entry_point": "ClosestInteger", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/43", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός θετικού ακεραίου n, πρέπει να φτιάξετε ένα σωρό από n επίπεδα πέτρες.\n        ///     Το πρώτο επίπεδο έχει n πέτρες.\n        ///     Ο αριθμός των πετρών στο επόμενο επίπεδο είναι:\n        ///         - ο επόμενος μονός αριθμός αν το n είναι περιττός.\n        ///         - ο επόμενος άρτιος αριθμός αν το n είναι άρτιος.\n        ///     Επιστρέψτε τον αριθμό των πετρών σε κάθε επίπεδο σε μια λίστα, όπου το στοιχείο στη θέση\n        ///     i αντιπροσωπεύει τον αριθμό των πετρών στο επίπεδο (i + 1).\n        /// \n        ///     Παραδείγματα:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MakeAPile(3);\n            var expected1 = new List<int> {3,5,7};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MakeAPile(4);\n            var expected2 = new List<int> {4,6,8,10};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MakeAPile(5);\n            var expected3 = new List<int> {5,7,9,11,13};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MakeAPile(6);\n            var expected4 = new List<int> {6,8,10,12,14,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MakeAPile(8);\n            var expected5 = new List<int> {8,10,12,14,16,18,20,22};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός θετικού ακεραίου n, πρέπει να φτιάξετε ένα σωρό από n επίπεδα πέτρες.\n    Το πρώτο επίπεδο έχει n πέτρες.\n    Ο αριθμός των πετρών στο επόμενο επίπεδο είναι:\n        - ο επόμενος μονός αριθμός αν το n είναι περιττός.\n        - ο επόμενος άρτιος αριθμός αν το n είναι άρτιος.\n    Επιστρέψτε τον αριθμό των πετρών σε κάθε επίπεδο σε μια λίστα, όπου το στοιχείο στη θέση\n    i αντιπροσωπεύει τον αριθμό των πετρών στο επίπεδο (i + 1).\n\n    Παραδείγματα:", "entry_point": "MakeAPile", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/44", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Θα σας δοθεί μια συμβολοσειρά λέξεων που χωρίζονται με κόμματα ή κενά. Η εργασία σας είναι να χωρίσετε τη συμβολοσειρά σε λέξεις και να επιστρέψετε έναν πίνακα με τις λέξεις.\n        /// \n        /// Για παράδειγμα:\n        /// \n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsString(\"Hi, my name is John\");\n            var expected1 = new List<string> {\"Hi\",\"my\",\"name\",\"is\",\"John\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsString(\"One, two, three, four, five, six\");\n            var expected2 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsString(\"Hi, my name\");\n            var expected3 = new List<string> {\"Hi\",\"my\",\"name\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsString(\"One,, two, three, four, five, six,\");\n            var expected4 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsString(\"\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsString(\"ahmed     , gamal\");\n            var expected6 = new List<string> {\"ahmed\",\"gamal\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Θα σας δοθεί μια συμβολοσειρά λέξεων που χωρίζονται με κόμματα ή κενά. Η εργασία σας είναι να χωρίσετε τη συμβολοσειρά σε λέξεις και να επιστρέψετε έναν πίνακα με τις λέξεις.\n\nΓια παράδειγμα:", "entry_point": "WordsString", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/45", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Αυτή η συνάρτηση παίρνει δύο θετικούς αριθμούς x και y και επιστρέφει το μεγαλύτερο άρτιο ακέραιο αριθμό που βρίσκεται στο διάστημα [x, y] συμπεριλαμβανομένου. Εάν δεν υπάρχει τέτοιος αριθμός, η συνάρτηση θα πρέπει να επιστρέψει -1.\n        /// \n        /// Για παράδειγμα:\n        /// \n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// </summary>\n        public static int ChooseNum (int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ChooseNum(12,15);\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ChooseNum(13,12);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ChooseNum(33,12354);\n            var expected3 = 12354;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ChooseNum(5234,5233);\n            var expected4 = -1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ChooseNum(6,29);\n            var expected5 = 28;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ChooseNum(27,10);\n            var expected6 = -1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ChooseNum(7,7);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ChooseNum(546,546);\n            var expected8 = 546;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Αυτή η συνάρτηση παίρνει δύο θετικούς αριθμούς x και y και επιστρέφει το μεγαλύτερο άρτιο ακέραιο αριθμό που βρίσκεται στο διάστημα [x, y] συμπεριλαμβανομένου. Εάν δεν υπάρχει τέτοιος αριθμός, η συνάρτηση θα πρέπει να επιστρέψει -1.\n\nΓια παράδειγμα:", "entry_point": "ChooseNum", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/46", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνονται δύο θετικοί ακέραιοι αριθμοί n και m, και η εργασία σας είναι να υπολογίσετε τον μέσο όρο των ακεραίων από το n έως το m (συμπεριλαμβανομένων του n και του m). Στρογγυλοποιήστε την απάντηση στον πλησιέστερο ακέραιο και μετατρέψτε τον σε δυαδικό. Εάν το n είναι μεγαλύτερο από το m, επιστρέψτε -1. Παράδειγμα:\n        /// \n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg (int n, int m) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RoundedAvg(1,5);\n            var expected1 = \"0b11\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RoundedAvg(7,13);\n            var expected2 = \"0b1010\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RoundedAvg(964,977);\n            var expected3 = \"0b1111001010\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RoundedAvg(996,997);\n            var expected4 = \"0b1111100100\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RoundedAvg(560,851);\n            var expected5 = \"0b1011000010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RoundedAvg(185,546);\n            var expected6 = \"0b101101110\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RoundedAvg(362,496);\n            var expected7 = \"0b110101101\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RoundedAvg(350,902);\n            var expected8 = \"0b1001110010\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RoundedAvg(197,233);\n            var expected9 = \"0b11010111\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RoundedAvg(7,5);\n            var expected10 = -1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RoundedAvg(5,1);\n            var expected11 = -1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = RoundedAvg(5,5);\n            var expected12 = \"0b101\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνονται δύο θετικοί ακέραιοι αριθμοί n και m, και η εργασία σας είναι να υπολογίσετε τον μέσο όρο των ακεραίων από το n έως το m (συμπεριλαμβανομένων του n και του m). Στρογγυλοποιήστε την απάντηση στον πλησιέστερο ακέραιο και μετατρέψτε τον σε δυαδικό. Εάν το n είναι μεγαλύτερο από το m, επιστρέψτε -1. Παράδειγμα:", "entry_point": "RoundedAvg", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/47", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Υλοποιήστε τη συνάρτηση F που παίρνει το n ως παράμετρο και επιστρέφει μια λίστα μεγέθους n, όπου η τιμή του στοιχείου στη θέση i είναι το παραγοντικό του i αν είναι άρτιος ή άθροισμα αριθμών από 1 έως i αλλιώς. Το i ξεκινά από 1. Το παραγοντικό του i είναι ο πολλαπλασιασμός των αριθμών από 1 έως i (1 * 2 * ... * i). Παράδειγμα:\n        /// \n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = F(5);\n            var expected1 = new List<int> {1,2,6,24,15};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = F(7);\n            var expected2 = new List<int> {1,2,6,24,15,720,28};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = F(1);\n            var expected3 = new List<int> {1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = F(3);\n            var expected4 = new List<int> {1,2,6};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Υλοποιήστε τη συνάρτηση f που παίρνει το n ως παράμετρο και επιστρέφει μια λίστα μεγέθους n, όπου η τιμή του στοιχείου στη θέση i είναι το παραγοντικό του i αν είναι άρτιος ή άθροισμα αριθμών από 1 έως i αλλιώς. Το i ξεκινά από 1. Το παραγοντικό του i είναι ο πολλαπλασιασμός των αριθμών από 1 έως i (1 * 2 * ... * i). Παράδειγμα:", "entry_point": "F", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/48", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός θετικού ακεραίου n, επιστρέφεται ένα tuple που περιέχει τον αριθμό των άρτιων και περιττών ακεραίων παλινδρομικών αριθμών που βρίσκονται στο εύρος (1, n), συμπεριλαμβανομένου του n.\n        /// \n        ///     Παράδειγμα 1:\n        /// \n        ///         Είσοδος: 3\n        ///         Έξοδος: (1, 2)\n        ///         Εξήγηση:\n        ///         Οι παλινδρομικοί αριθμοί είναι 1, 2, 3. Ένας από αυτούς είναι άρτιος και δύο είναι περιττοί.\n        /// \n        ///     Παράδειγμα 2:\n        /// \n        ///         Είσοδος: 12\n        ///         Έξοδος: (4, 6)\n        ///         Εξήγηση:\n        ///         Οι παλινδρομικοί αριθμοί είναι 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Τέσσερις από αυτούς είναι άρτιοι και έξι είναι περιττοί.\n        /// \n        ///     Σημείωση:\n        ///         1. 1 <= n <= 10^3\n        ///         2. Το επιστρεφόμενο tuple περιέχει αντίστοιχα τον αριθμό των άρτιων και περιττών ακεραίων παλινδρομικών αριθμών.\n        /// \n        /// \n        /// </summary>\n        public static List<int> EvenOddPalindrome (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = EvenOddPalindrome(123);\n            var expected1 = new List<int> {8,13};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = EvenOddPalindrome(12);\n            var expected2 = new List<int> {4,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = EvenOddPalindrome(3);\n            var expected3 = new List<int> {1,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = EvenOddPalindrome(63);\n            var expected4 = new List<int> {6,8};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = EvenOddPalindrome(25);\n            var expected5 = new List<int> {5,6};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = EvenOddPalindrome(19);\n            var expected6 = new List<int> {4,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = EvenOddPalindrome(9);\n            var expected7 = new List<int> {4,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = EvenOddPalindrome(1);\n            var expected8 = new List<int> {0,1};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός θετικού ακεραίου n, επιστρέφεται ένα tuple που περιέχει τον αριθμό των άρτιων και περιττών ακεραίων παλινδρομικών αριθμών που βρίσκονται στο εύρος (1, n), συμπεριλαμβανομένου του n.\n\n    Παράδειγμα 1:\n\n        Είσοδος: 3\n        Έξοδος: (1, 2)\n        Εξήγηση:\n        Οι παλινδρομικοί αριθμοί είναι 1, 2, 3. Ένας από αυτούς είναι άρτιος και δύο είναι περιττοί.\n\n    Παράδειγμα 2:\n\n        Είσοδος: 12\n        Έξοδος: (4, 6)\n        Εξήγηση:\n        Οι παλινδρομικοί αριθμοί είναι 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Τέσσερις από αυτούς είναι άρτιοι και έξι είναι περιττοί.\n\n    Σημείωση:\n        1. 1 <= n <= 10^3\n        2. Το επιστρεφόμενο tuple περιέχει αντίστοιχα τον αριθμό των άρτιων και περιττών ακεραίων παλινδρομικών αριθμών.", "entry_point": "EvenOddPalindrome", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/49", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Έχουμε έναν πίνακα 'arr' από N ακεραίους arr[1], arr[2], ..., arr[N]. Οι αριθμοί στον πίνακα θα είναι τυχαία ταξινομημένοι. Η εργασία σας είναι να καθορίσετε εάν είναι δυνατόν να λάβετε έναν ταξινομημένο πίνακα σε μη φθίνουσα σειρά εκτελώντας την ακόλουθη λειτουργία στον δοσμένο πίνακα:\n        ///         Σας επιτρέπεται να εκτελέσετε τη λειτουργία μετατόπισης δεξιά οποιοδήποτε αριθμό φορών.\n        ///     \n        ///     Μια λειτουργία μετατόπισης δεξιά σημαίνει τη μετατόπιση όλων των στοιχείων του πίνακα κατά ένα θέση προς τη δεξιά κατεύθυνση. Το τελευταίο στοιχείο του πίνακα θα μετακινηθεί στην αρχική θέση στον πίνακα, δηλαδή στη θέση 0. \n        /// \n        ///     Εάν είναι δυνατόν να λάβετε τον ταξινομημένο πίνακα εκτελώντας την παραπάνω λειτουργία, τότε επιστρέψτε True, αλλιώς επιστρέψτε False.\n        ///     Εάν ο δοσμένος πίνακας είναι κενός, τότε επιστρέψτε True.\n        /// \n        ///     Σημείωση: Εγγυόμαστε ότι ο δοσμένος πίνακας θα έχει μοναδικά στοιχεία.\n        /// \n        ///     Για παράδειγμα:\n        ///     \n        ///     MoveOneBall([3, 4, 5, 1, 2])==>True\n        ///     Εξήγηση: Εκτελώντας 2 λειτουργίες μετατόπισης δεξιά, μπορεί να επιτευχθεί μη φθίνουσα σειρά για τον δοσμένο πίνακα.\n        ///     MoveOneBall([3, 5, 4, 1, 2])==>False\n        ///     Εξήγηση: Δεν είναι δυνατόν να λάβετε μη φθίνουσα σειρά για τον δοσμένο πίνακα εκτελώντας οποιονδήποτε αριθμό λειτουργιών μετατόπισης δεξιά.\n        /// \n        /// \n        /// \n        /// </summary>\n        public static bool MoveOneBall (List<int> arr) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MoveOneBall(new List<int> {3,4,5,1,2});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MoveOneBall(new List<int> {3,5,10,1,2});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MoveOneBall(new List<int> {4,3,1,2});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MoveOneBall(new List<int> {3,5,4,1,2});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MoveOneBall(new List<int> {});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Έχουμε έναν πίνακα 'arr' από N ακεραίους arr[1], arr[2], ..., arr[N]. Οι αριθμοί στον πίνακα θα είναι τυχαία ταξινομημένοι. Η εργασία σας είναι να καθορίσετε εάν είναι δυνατόν να λάβετε έναν ταξινομημένο πίνακα σε μη φθίνουσα σειρά εκτελώντας την ακόλουθη λειτουργία στον δοσμένο πίνακα:\n        Σας επιτρέπεται να εκτελέσετε τη λειτουργία μετατόπισης δεξιά οποιοδήποτε αριθμό φορών.\n    \n    Μια λειτουργία μετατόπισης δεξιά σημαίνει τη μετατόπιση όλων των στοιχείων του πίνακα κατά ένα θέση προς τη δεξιά κατεύθυνση. Το τελευταίο στοιχείο του πίνακα θα μετακινηθεί στην αρχική θέση στον πίνακα, δηλαδή στη θέση 0. \n\n    Εάν είναι δυνατόν να λάβετε τον ταξινομημένο πίνακα εκτελώντας την παραπάνω λειτουργία, τότε επιστρέψτε True, αλλιώς επιστρέψτε False.\n    Εάν ο δοσμένος πίνακας είναι κενός, τότε επιστρέψτε True.\n\n    Σημείωση: Εγγυόμαστε ότι ο δοσμένος πίνακας θα έχει μοναδικά στοιχεία.\n\n    Για παράδειγμα:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Εξήγηση: Εκτελώντας 2 λειτουργίες μετατόπισης δεξιά, μπορεί να επιτευχθεί μη φθίνουσα σειρά για τον δοσμένο πίνακα.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Εξήγηση: Δεν είναι δυνατόν να λάβετε μη φθίνουσα σειρά για τον δοσμένο πίνακα εκτελώντας οποιονδήποτε αριθμό λειτουργιών μετατόπισης δεξιά.", "entry_point": "MoveOneBall", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/50", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σε αυτό το πρόβλημα, θα υλοποιήσετε μια συνάρτηση που παίρνει δύο λίστες αριθμών και καθορίζει εάν είναι δυνατή η ανταλλαγή στοιχείων μεταξύ τους για να κάνει την lst1 μια λίστα μόνο με άρτιους αριθμούς. Δεν υπάρχει όριο στον αριθμό των ανταλλαγών στοιχείων μεταξύ lst1 και lst2. Εάν είναι δυνατή η ανταλλαγή στοιχείων μεταξύ των lst1 και lst2 για να κάνει όλα τα στοιχεία της lst1 να είναι άρτια, επιστρέψτε \"YES\". Διαφορετικά, επιστρέψτε \"NO\". Για παράδειγμα: Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\", Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Υποθέτειται ότι οι λίστες εισόδου θα είναι μη κενές.\n        /// \n        /// \n        /// </summary>\n        public static string Exchange (List<int> lst1, List<int> lst2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Exchange(new List<int> {1,2,3,4},new List<int> {1,2,3,4});\n            var expected1 = \"YES\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Exchange(new List<int> {1,2,3,4},new List<int> {1,5,3,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Exchange(new List<int> {1,2,3,4},new List<int> {2,1,4,3});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Exchange(new List<int> {5,7,3},new List<int> {2,6,4});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Exchange(new List<int> {5,7,3},new List<int> {2,6,3});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Exchange(new List<int> {3,2,6,1,8,9},new List<int> {3,5,5,1,1,1});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Exchange(new List<int> {100,200},new List<int> {200,200});\n            var expected7 = \"YES\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σε αυτό το πρόβλημα, θα υλοποιήσετε μια συνάρτηση που παίρνει δύο λίστες αριθμών και καθορίζει εάν είναι δυνατή η ανταλλαγή στοιχείων μεταξύ τους για να κάνει την lst1 μια λίστα μόνο με άρτιους αριθμούς. Δεν υπάρχει όριο στον αριθμό των ανταλλαγών στοιχείων μεταξύ lst1 και lst2. Εάν είναι δυνατή η ανταλλαγή στοιχείων μεταξύ των lst1 και lst2 για να κάνει όλα τα στοιχεία της lst1 να είναι άρτια, επιστρέψτε \"YES\". Διαφορετικά, επιστρέψτε \"NO\". Για παράδειγμα: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\", exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Υποθέτειται ότι οι λίστες εισόδου θα είναι μη κενές.", "entry_point": "Exchange", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/51", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Εργασία\n        ///     Δίνονται δύο αλφαριθμητικά s και c, πρέπει να διαγράψετε όλους τους χαρακτήρες στο s που είναι ίσοι με οποιονδήποτε χαρακτήρα στο c\n        ///     και στη συνέχεια να ελέγξετε αν το αποτέλεσμα είναι παλίνδρομο.\n        ///     Ένα αλφαριθμητικό ονομάζεται παλίνδρομο αν διαβάζεται το ίδιο προς τα πίσω και προς τα εμπρός.\n        ///     Θα πρέπει να επιστρέψετε ένα tuple που περιέχει το αποτέλεσμα αλφαριθμητικό και True/False για τον έλεγχο.\n        ///     Παράδειγμα\n        ///     Για s = \"abcde\", c = \"ae\", το αποτέλεσμα θα πρέπει να είναι ('bcd',False)\n        ///     Για s = \"abcdef\", c = \"b\" το αποτέλεσμα θα πρέπει να είναι ('acdef',False)\n        ///     Για s = \"abcdedcba\", c = \"ab\", το αποτέλεσμα θα πρέπει να είναι ('cdedc',True)\n        /// \n        /// \n        /// </summary>\n        public static List<object> ReverseDelete (string s, string c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ReverseDelete(\"abcde\",\"ae\");\n            var expected1 = new List<object> {\"bcd\",false};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ReverseDelete(\"abcdef\",\"b\");\n            var expected2 = new List<object> {\"acdef\",false};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ReverseDelete(\"abcdedcba\",\"ab\");\n            var expected3 = new List<object> {\"cdedc\",true};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ReverseDelete(\"dwik\",\"w\");\n            var expected4 = new List<object> {\"dik\",false};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ReverseDelete(\"a\",\"a\");\n            var expected5 = new List<object> {\"\",true};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ReverseDelete(\"abcdedcba\",\"\");\n            var expected6 = new List<object> {\"abcdedcba\",true};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ReverseDelete(\"abcdedcba\",\"v\");\n            var expected7 = new List<object> {\"abcdedcba\",true};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ReverseDelete(\"vabba\",\"v\");\n            var expected8 = new List<object> {\"abba\",true};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = ReverseDelete(\"mamma\",\"mia\");\n            var expected9 = new List<object> {\"\",true};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Εργασία\n    Δίνονται δύο αλφαριθμητικά s και c, πρέπει να διαγράψετε όλους τους χαρακτήρες στο s που είναι ίσοι με οποιονδήποτε χαρακτήρα στο c\n    και στη συνέχεια να ελέγξετε αν το αποτέλεσμα είναι παλίνδρομο.\n    Ένα αλφαριθμητικό ονομάζεται παλίνδρομο αν διαβάζεται το ίδιο προς τα πίσω και προς τα εμπρός.\n    Θα πρέπει να επιστρέψετε ένα tuple που περιέχει το αποτέλεσμα αλφαριθμητικό και True/False για τον έλεγχο.\n    Παράδειγμα\n    Για s = \"abcde\", c = \"ae\", το αποτέλεσμα θα πρέπει να είναι ('bcd',False)\n    Για s = \"abcdef\", c = \"b\" το αποτέλεσμα θα πρέπει να είναι ('acdef',False)\n    Για s = \"abcdedcba\", c = \"ab\", το αποτέλεσμα θα πρέπει να είναι ('cdedc',True)", "entry_point": "ReverseDelete", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/52", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται ένα ορθογώνιο πλέγμα από πηγάδια. Κάθε σειρά αντιπροσωπεύει ένα μόνο πηγάδι, και κάθε 1 σε μια σειρά αντιπροσωπεύει μια μονάδα νερού. Κάθε πηγάδι έχει ένα αντίστοιχο κουβά που μπορεί να χρησιμοποιηθεί για να αντλήσει νερό από αυτό, και όλοι οι κουβάδες έχουν την ίδια χωρητικότητα. Η εργασία σας είναι να χρησιμοποιήσετε τους κουβάδες για να αδειάσετε τα πηγάδια. Εξαγάγετε τον αριθμό των φορών που χρειάζεται να χαμηλώσετε τους κουβάδες.\n        /// \n        ///     Παράδειγμα 1:\n        ///         Είσοδος:\n        ///             grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        ///             χωρητικότητα κουβά: 1\n        ///         Έξοδος: 6\n        /// \n        ///     Παράδειγμα 2:\n        ///         Είσοδος:\n        ///             grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        ///             χωρητικότητα κουβά: 2\n        ///         Έξοδος: 5\n        ///     \n        ///     Παράδειγμα 3:\n        ///         Είσοδος:\n        ///             grid: [[0,0,0], [0,0,0]]\n        ///             χωρητικότητα κουβά: 5\n        ///         Έξοδος: 0\n        /// \n        ///     Περιορισμοί:\n        ///         * όλα τα πηγάδια έχουν το ίδιο μήκος\n        ///         * 1 <= μήκος πλέγματος <= 10^2\n        ///         * 1 <= μήκος grid[:,1] <= 10^2\n        ///         * grid[i][j] -> 0 | 1\n        ///         * 1 <= χωρητικότητα <= 10\n        /// \n        /// \n        /// </summary>\n        public static int MaxFill (List<List<int>> grid, int capacity) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MaxFill(new List<List<int>> {new List<int> {0,0,1,0},new List<int> {0,1,0,0},new List<int> {1,1,1,1}},1);\n            var expected1 = 6;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MaxFill(new List<List<int>> {new List<int> {0,0,1,1},new List<int> {0,0,0,0},new List<int> {1,1,1,1},new List<int> {0,1,1,1}},2);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MaxFill(new List<List<int>> {new List<int> {0,0,0},new List<int> {0,0,0}},5);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},2);\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},9);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται ένα ορθογώνιο πλέγμα από πηγάδια. Κάθε σειρά αντιπροσωπεύει ένα μόνο πηγάδι, και κάθε 1 σε μια σειρά αντιπροσωπεύει μια μονάδα νερού. Κάθε πηγάδι έχει ένα αντίστοιχο κουβά που μπορεί να χρησιμοποιηθεί για να αντλήσει νερό από αυτό, και όλοι οι κουβάδες έχουν την ίδια χωρητικότητα. Η εργασία σας είναι να χρησιμοποιήσετε τους κουβάδες για να αδειάσετε τα πηγάδια. Εξαγάγετε τον αριθμό των φορών που χρειάζεται να χαμηλώσετε τους κουβάδες.\n\n    Παράδειγμα 1:\n        Είσοδος:\n            grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            χωρητικότητα κουβά: 1\n        Έξοδος: 6\n\n    Παράδειγμα 2:\n        Είσοδος:\n            grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            χωρητικότητα κουβά: 2\n        Έξοδος: 5\n    \n    Παράδειγμα 3:\n        Είσοδος:\n            grid: [[0,0,0], [0,0,0]]\n            χωρητικότητα κουβά: 5\n        Έξοδος: 0\n\n    Περιορισμοί:\n        * όλα τα πηγάδια έχουν το ίδιο μήκος\n        * 1 <= μήκος πλέγματος <= 10^2\n        * 1 <= μήκος grid[:,1] <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= χωρητικότητα <= 10", "entry_point": "MaxFill", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/53", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Δεδομένου ενός αλφαριθμητικού s και ενός φυσικού αριθμού n, σας έχει ανατεθεί να υλοποιήσετε μια συνάρτηση που επιστρέφει μια λίστα με όλες τις λέξεις από το αλφαριθμητικό s που περιέχουν ακριβώς n σύμφωνα, με τη σειρά που εμφανίζονται στο αλφαριθμητικό s. Εάν το αλφαριθμητικό s είναι κενό, τότε η συνάρτηση θα πρέπει να επιστρέψει μια κενή λίστα. Σημείωση: μπορείτε να υποθέσετε ότι το εισαγόμενο αλφαριθμητικό περιέχει μόνο γράμματα και κενά. Παραδείγματα:\n        /// \n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords (string s, int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SelectWords(\"Mary had a little lamb\",4);\n            var expected1 = new List<string> {\"little\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SelectWords(\"Mary had a little lamb\",3);\n            var expected2 = new List<string> {\"Mary\",\"lamb\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SelectWords(\"simple white space\",2);\n            var expected3 = new List<string> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SelectWords(\"Hello world\",4);\n            var expected4 = new List<string> {\"world\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SelectWords(\"Uncle sam\",3);\n            var expected5 = new List<string> {\"Uncle\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SelectWords(\"\",4);\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SelectWords(\"a b c d e f\",1);\n            var expected7 = new List<string> {\"b\",\"c\",\"d\",\"f\"};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός αλφαριθμητικού s και ενός φυσικού αριθμού n, σας έχει ανατεθεί να υλοποιήσετε μια συνάρτηση που επιστρέφει μια λίστα με όλες τις λέξεις από το αλφαριθμητικό s που περιέχουν ακριβώς n σύμφωνα, με τη σειρά που εμφανίζονται στο αλφαριθμητικό s. Εάν το αλφαριθμητικό s είναι κενό, τότε η συνάρτηση θα πρέπει να επιστρέψει μια κενή λίστα. Σημείωση: μπορείτε να υποθέσετε ότι το εισαγόμενο αλφαριθμητικό περιέχει μόνο γράμματα και κενά. Παραδείγματα:", "entry_point": "SelectWords", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/54", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός πίνακα arr ακεραίων και ενός θετικού ακεραίου k, επιστρέφει μια ταξινομημένη λίστα μήκους k με τους μεγαλύτερους k αριθμούς στον πίνακα arr.\n        /// \n        ///     Παράδειγμα 1:\n        /// \n        ///         Είσοδος: arr = [-3, -4, 5], k = 3\n        ///         Έξοδος: [-4, -3, 5]\n        /// \n        ///     Παράδειγμα 2:\n        /// \n        ///         Είσοδος: arr = [4, -4, 4], k = 2\n        ///         Έξοδος: [4, 4]\n        /// \n        ///     Παράδειγμα 3:\n        /// \n        ///         Είσοδος: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        ///         Έξοδος: [2]\n        /// \n        ///     Σημείωση:\n        ///         1. Το μήκος του πίνακα θα είναι στο εύρος [1, 1000].\n        ///         2. Τα στοιχεία του πίνακα θα είναι στο εύρος [-1000, 1000].\n        ///         3. 0 <= k <= len(arr)\n        /// \n        /// \n        /// </summary>\n        public static List<int> Maximum (List<int> arr, int k) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Maximum(new List<int> {-3,-4,5},3);\n            var expected1 = new List<int> {-4,-3,5};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Maximum(new List<int> {4,-4,4},2);\n            var expected2 = new List<int> {4,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Maximum(new List<int> {-3,2,1,2,-1,-2,1},1);\n            var expected3 = new List<int> {2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Maximum(new List<int> {123,-123,20,0,1,2,-3},3);\n            var expected4 = new List<int> {2,20,123};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Maximum(new List<int> {-123,20,0,1,2,-3},4);\n            var expected5 = new List<int> {0,1,2,20};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Maximum(new List<int> {5,15,0,3,-13,-8,0},7);\n            var expected6 = new List<int> {-13,-8,0,0,3,5,15};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Maximum(new List<int> {-1,0,2,5,3,-10},2);\n            var expected7 = new List<int> {3,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Maximum(new List<int> {1,0,5,-7},1);\n            var expected8 = new List<int> {5};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Maximum(new List<int> {4,-4},2);\n            var expected9 = new List<int> {-4,4};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Maximum(new List<int> {-10,10},2);\n            var expected10 = new List<int> {-10,10};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Maximum(new List<int> {1,2,3,-23,243,-400,0},0);\n            var expected11 = new List<int> {};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός πίνακα arr ακεραίων και ενός θετικού ακεραίου k, επιστρέφει μια ταξινομημένη λίστα μήκους k με τους μεγαλύτερους k αριθμούς στον πίνακα arr.\n\n    Παράδειγμα 1:\n\n        Είσοδος: arr = [-3, -4, 5], k = 3\n        Έξοδος: [-4, -3, 5]\n\n    Παράδειγμα 2:\n\n        Είσοδος: arr = [4, -4, 4], k = 2\n        Έξοδος: [4, 4]\n\n    Παράδειγμα 3:\n\n        Είσοδος: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Έξοδος: [2]\n\n    Σημείωση:\n        1. Το μήκος του πίνακα θα είναι στο εύρος [1, 1000].\n        2. Τα στοιχεία του πίνακα θα είναι στο εύρος [-1000, 1000].\n        3. 0 <= k <= len(arr)", "entry_point": "Maximum", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/55", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός μη κενού πίνακα ακεραίων arr και ενός ακεραίου k, επιστρέφεται\n        ///     το άθροισμα των στοιχείων με τουλάχιστον δύο ψηφία από τα πρώτα k στοιχεία του arr.\n        /// \n        ///     Παράδειγμα:\n        /// \n        ///         Είσοδος: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        ///         Έξοδος: 24 # άθροισμα των 21 + 3\n        /// \n        ///     Περιορισμοί:\n        ///         1. 1 <= len(arr) <= 100\n        ///         2. 1 <= k <= len(arr)\n        /// \n        /// \n        /// </summary>\n        public static int AddElements (List<int> arr, int k) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AddElements(new List<int> {1,-2,-3,41,57,76,87,88,99},3);\n            var expected1 = -4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = AddElements(new List<int> {111,121,3,4000,5,6},2);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = AddElements(new List<int> {11,21,3,90,5,6,7,8,9},4);\n            var expected3 = 125;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = AddElements(new List<int> {111,21,3,4000,5,6,7,8,9},4);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = AddElements(new List<int> {1},1);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός μη κενού πίνακα ακεραίων arr και ενός ακεραίου k, επιστρέφεται\n    το άθροισμα των στοιχείων με τουλάχιστον δύο ψηφία από τα πρώτα k στοιχεία του arr.\n\n    Παράδειγμα:\n\n        Είσοδος: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Έξοδος: 24 # άθροισμα των 21 + 3\n\n    Περιορισμοί:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "entry_point": "AddElements", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/56", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνονται δύο διαστήματα,\n        ///     όπου κάθε διάστημα είναι ένα ζευγάρι ακεραίων. Για παράδειγμα, διάστημα = (αρχή, τέλος) = (1, 2).\n        ///     Τα δεδομένα διαστήματα είναι κλειστά, που σημαίνει ότι το διάστημα (αρχή, τέλος)\n        ///     περιλαμβάνει τόσο την αρχή όσο και το τέλος.\n        ///     Για κάθε δοσμένο διάστημα, υποθέτεται ότι η αρχή του είναι μικρότερη ή ίση με το τέλος του.\n        ///     Η εργασία σας είναι να καθορίσετε εάν το μήκος της τομής αυτών των δύο\n        ///     διαστημάτων είναι ένας πρώτος αριθμός.\n        ///     Για παράδειγμα, η τομή των διαστημάτων (1, 3), (2, 4) είναι (2, 3)\n        ///     το οποίο το μήκος του είναι 1, που δεν είναι πρώτος αριθμός.\n        ///     Εάν το μήκος της τομής είναι ένας πρώτος αριθμός, επιστρέψτε \"YES\",\n        ///     διαφορετικά, επιστρέψτε \"NO\".\n        ///     Εάν τα δύο διαστήματα δεν τέμνονται, επιστρέψτε \"NO\".\n        /// \n        /// \n        ///     [είσοδος/έξοδος] δείγματα:\n        /// \n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection (List<int> interval1, List<int> interval2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Intersection(new List<int> {1,2},new List<int> {2,3});\n            var expected1 = \"NO\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Intersection(new List<int> {-1,1},new List<int> {0,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Intersection(new List<int> {-3,-1},new List<int> {-5,5});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Intersection(new List<int> {-2,2},new List<int> {-4,0});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Intersection(new List<int> {-11,2},new List<int> {-1,-1});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Intersection(new List<int> {1,2},new List<int> {3,5});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Intersection(new List<int> {1,2},new List<int> {1,2});\n            var expected7 = \"NO\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Intersection(new List<int> {-2,-2},new List<int> {-3,-2});\n            var expected8 = \"NO\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνονται δύο διαστήματα,\n    όπου κάθε διάστημα είναι ένα ζευγάρι ακεραίων. Για παράδειγμα, διάστημα = (αρχή, τέλος) = (1, 2).\n    Τα δεδομένα διαστήματα είναι κλειστά, που σημαίνει ότι το διάστημα (αρχή, τέλος)\n    περιλαμβάνει τόσο την αρχή όσο και το τέλος.\n    Για κάθε δοσμένο διάστημα, υποθέτεται ότι η αρχή του είναι μικρότερη ή ίση με το τέλος του.\n    Η εργασία σας είναι να καθορίσετε εάν το μήκος της τομής αυτών των δύο\n    διαστημάτων είναι ένας πρώτος αριθμός.\n    Για παράδειγμα, η τομή των διαστημάτων (1, 3), (2, 4) είναι (2, 3)\n    το οποίο το μήκος του είναι 1, που δεν είναι πρώτος αριθμός.\n    Εάν το μήκος της τομής είναι ένας πρώτος αριθμός, επιστρέψτε \"YES\",\n    διαφορετικά, επιστρέψτε \"NO\".\n    Εάν τα δύο διαστήματα δεν τέμνονται, επιστρέψτε \"NO\".\n\n\n    [είσοδος/έξοδος] δείγματα:", "entry_point": "Intersection", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/57", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Όλοι γνωρίζουν την ακολουθία του Fibonacci, η οποία μελετήθηκε βαθιά από μαθηματικούς τα τελευταία δύο αιώνες. Ωστόσο, αυτό που οι άνθρωποι δεν γνωρίζουν είναι η ακολουθία του Tribonacci. Η ακολουθία του Tribonacci ορίζεται από την επανάληψη:\n        ///     Tri(1) = 3\n        ///     Tri(n) = 1 + n / 2, αν το n είναι ζυγός.\n        ///     Tri(n) = Tri(n - 1) + Tri(n - 2) + Tri(n + 1), αν το n είναι περιττό.\n        ///     Για παράδειγμα:\n        ///     Tri(2) = 1 + (2 / 2) = 2\n        ///     Tri(4) = 3\n        ///     Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        ///            = 2 + 3 + 3 = 8 \n        ///     Σας δίνεται ένας μη αρνητικός ακέραιος αριθμός n, πρέπει να επιστρέψετε μια λίστα με τους πρώτους n + 1 αριθμούς της ακολουθίας του Tribonacci.\n        ///     Παραδείγματα:\n        ///     Tri(3) = [1, 3, 2, 8]\n        /// \n        /// \n        /// </summary>\n        public static List<object> Tri (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Tri(3);\n            var expected1 = new List<object> {1,3,2.0,8.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Tri(4);\n            var expected2 = new List<object> {1,3,2.0,8.0,3.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Tri(5);\n            var expected3 = new List<object> {1,3,2.0,8.0,3.0,15.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Tri(6);\n            var expected4 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Tri(7);\n            var expected5 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Tri(8);\n            var expected6 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Tri(9);\n            var expected7 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Tri(20);\n            var expected8 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0,6.0,48.0,7.0,63.0,8.0,80.0,9.0,99.0,10.0,120.0,11.0};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Tri(0);\n            var expected9 = new List<object> {1};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Tri(1);\n            var expected10 = new List<object> {1,3};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Όλοι γνωρίζουν την ακολουθία του Fibonacci, η οποία μελετήθηκε βαθιά από μαθηματικούς τα τελευταία δύο αιώνες. Ωστόσο, αυτό που οι άνθρωποι δεν γνωρίζουν είναι η ακολουθία του Tribonacci. Η ακολουθία του Tribonacci ορίζεται από την επανάληψη:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, αν το n είναι ζυγός.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), αν το n είναι περιττό.\n    Για παράδειγμα:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    Σας δίνεται ένας μη αρνητικός ακέραιος αριθμός n, πρέπει να επιστρέψετε μια λίστα με τους πρώτους n + 1 αριθμούς της ακολουθίας του Tribonacci.\n    Παραδείγματα:\n    tri(3) = [1, 3, 2, 8]", "entry_point": "Tri", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/58", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Δεδομένου ενός θετικού ακεραίου n, επιστρέφει το γινόμενο των μονών ψηφίων.\n        ///     Επιστρέφει 0 αν όλα τα ψηφία είναι άρτια.\n        ///     Για παράδειγμα:\n        /// \n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Digits(5);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Digits(54);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Digits(120);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Digits(5014);\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Digits(98765);\n            var expected5 = 315;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Digits(5576543);\n            var expected6 = 2625;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Digits(2468);\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός θετικού ακεραίου n, επιστρέφει το γινόμενο των μονών ψηφίων.\n    Επιστρέφει 0 αν όλα τα ψηφία είναι άρτια.\n    Για παράδειγμα:", "entry_point": "Digits", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/59", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δημιουργήστε μια συνάρτηση που παίρνει μια συμβολοσειρά ως είσοδο η οποία περιέχει μόνο αγκύλες.\n        ///     Η συνάρτηση θα πρέπει να επιστρέφει True μόνο αν υπάρχει μια έγκυρη υποακολουθία αγκυλών \n        ///     όπου τουλάχιστον μια αγκύλη στην υποακολουθία είναι ενσωματωμένη.\n        /// IsNested('[[]]') ➞ True\n        /// IsNested('[]]]]]]][[[[[]') ➞ False\n        /// IsNested('[][]') ➞ False\n        /// IsNested('[]') ➞ False\n        /// IsNested('[[][]]') ➞ True\n        /// IsNested('[[]][[') ➞ True\n        /// \n        /// </summary>\n        public static bool IsNested (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsNested(\"[[]]\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsNested(\"[]]]]]]][[[[[]\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsNested(\"[][]\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsNested(\"[]\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsNested(\"[[[[]]]]\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsNested(\"[]]]]]]]]]]\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsNested(\"[][][[]]\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsNested(\"[[]\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsNested(\"[]]\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsNested(\"[[]][[\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsNested(\"[[][]]\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsNested(\"\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsNested(\"[[[[[[[[\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IsNested(\"]]]]]]]]\");\n            var expected14 = false;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δημιουργήστε μια συνάρτηση που παίρνει μια συμβολοσειρά ως είσοδο η οποία περιέχει μόνο αγκύλες.\n    Η συνάρτηση θα πρέπει να επιστρέφει True μόνο αν υπάρχει μια έγκυρη υποακολουθία αγκυλών \n    όπου τουλάχιστον μια αγκύλη στην υποακολουθία είναι ενσωματωμένη.", "entry_point": "IsNested", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/60", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνεται μια λίστα αριθμών.\n        ///     Χρειάζεστε να επιστρέψετε το άθροισμα των τετραγωνισμένων αριθμών στην δεδομένη λίστα,\n        ///     στρογγυλοποιήστε κάθε στοιχείο στη λίστα στο ανώτατο ακέραιο (Ceiling) πρώτα.\n        ///     Παραδείγματα:\n        ///     Για lst = [1,2,3] η έξοδος πρέπει να είναι 14\n        ///     Για lst = [1,4,9] η έξοδος πρέπει να είναι 98\n        ///     Για lst = [1,3,5,7] η έξοδος πρέπει να είναι 84\n        ///     Για lst = [1.4,4.2,0] η έξοδος πρέπει να είναι 29\n        ///     Για lst = [-2.4,1,1] η έξοδος πρέπει να είναι 6\n        /// \n        /// \n        /// \n        /// \n        /// </summary>\n        public static int SumSquares (List<object> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumSquares(new List<object> {1,2,3});\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumSquares(new List<object> {1.0,2,3});\n            var expected2 = 14;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumSquares(new List<object> {1,3,5,7});\n            var expected3 = 84;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumSquares(new List<object> {1.4,4.2,0});\n            var expected4 = 29;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumSquares(new List<object> {-2.4,1,1});\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SumSquares(new List<object> {100,1,15,2});\n            var expected6 = 10230;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SumSquares(new List<object> {10000,10000});\n            var expected7 = 200000000;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = SumSquares(new List<object> {-1.4,4.6,6.3});\n            var expected8 = 75;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = SumSquares(new List<object> {-1.4,17.9,18.9,19.9});\n            var expected9 = 1086;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = SumSquares(new List<object> {0});\n            var expected10 = 0;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = SumSquares(new List<object> {-1});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = SumSquares(new List<object> {-1,1,0});\n            var expected12 = 2;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια λίστα αριθμών.\n    Χρειάζεστε να επιστρέψετε το άθροισμα των τετραγωνισμένων αριθμών στην δεδομένη λίστα,\n    στρογγυλοποιήστε κάθε στοιχείο στη λίστα στο ανώτατο ακέραιο (Ceiling) πρώτα.\n    Παραδείγματα:\n    Για lst = [1,2,3] η έξοδος πρέπει να είναι 14\n    Για lst = [1,4,9] η έξοδος πρέπει να είναι 98\n    Για lst = [1,3,5,7] η έξοδος πρέπει να είναι 84\n    Για lst = [1.4,4.2,0] η έξοδος πρέπει να είναι 29\n    Για lst = [-2.4,1,1] η έξοδος πρέπει να είναι 6", "entry_point": "SumSquares", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/61", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δημιουργήστε μια συνάρτηση που επιστρέφει True αν ο τελευταίος χαρακτήρας\n        ///     ενός δεδομένου string είναι αλφαβητικός χαρακτήρας και δεν είναι\n        ///     μέρος ενός λέξης, και False αλλιώς.\n        ///     Σημείωση: \"λέξη\" είναι μια ομάδα χαρακτήρων που χωρίζονται από κενό.\n        /// \n        ///     Παραδείγματα:\n        /// \n        /// CheckIfLastCharIsALetter(\"apple pie\") ➞ False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") ➞ True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") ➞ False\n        /// CheckIfLastCharIsALetter(\"\") ➞ False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter (string txt) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckIfLastCharIsALetter(\"apple\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckIfLastCharIsALetter(\"apple pi e\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckIfLastCharIsALetter(\"eeeee\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckIfLastCharIsALetter(\"A\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckIfLastCharIsALetter(\"Pumpkin pie \");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckIfLastCharIsALetter(\"Pumpkin pie 1\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckIfLastCharIsALetter(\"\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = CheckIfLastCharIsALetter(\"eeeee e \");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = CheckIfLastCharIsALetter(\"apple pie\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = CheckIfLastCharIsALetter(\"apple pi e \");\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δημιουργήστε μια συνάρτηση που επιστρέφει True αν ο τελευταίος χαρακτήρας\n    ενός δεδομένου string είναι αλφαβητικός χαρακτήρας και δεν είναι\n    μέρος ενός λέξης, και False αλλιώς.\n    Σημείωση: \"λέξη\" είναι μια ομάδα χαρακτήρων που χωρίζονται από κενό.\n\n    Παραδείγματα:", "entry_point": "CheckIfLastCharIsALetter", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/62", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Δημιουργήστε μια συνάρτηση η οποία επιστρέφει το μεγαλύτερο δείκτη ενός στοιχείου που δεν είναι μεγαλύτερο ή ίσο από το στοιχείο που ακολουθεί αμέσως πριν από αυτό. Εάν δεν υπάρχει τέτοιο στοιχείο, τότε επιστρέψτε -1. Ο δοσμένος πίνακας δεν θα περιέχει διπλότυπες τιμές.\n        /// \n        /// Παραδείγματα:\n        /// \n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange (List<int> arr) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CanArrange(new List<int> {1,2,4,3,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CanArrange(new List<int> {1,2,4,5});\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CanArrange(new List<int> {1,4,2,5,6,7,8,9,10});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CanArrange(new List<int> {4,8,5,7,3});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CanArrange(new List<int> {});\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δημιουργήστε μια συνάρτηση η οποία επιστρέφει το μεγαλύτερο δείκτη ενός στοιχείου που δεν είναι μεγαλύτερο ή ίσο από το στοιχείο που ακολουθεί αμέσως πριν από αυτό. Εάν δεν υπάρχει τέτοιο στοιχείο, τότε επιστρέψτε -1. Ο δοσμένος πίνακας δεν θα περιέχει διπλότυπες τιμές.\n\nΠαραδείγματα:", "entry_point": "CanArrange", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/63", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δημιουργήστε μια συνάρτηση που επιστρέφει ένα tuple (a, b), όπου 'a' είναι ο μεγαλύτερος από τους αρνητικούς ακέραιους και 'b' είναι ο μικρότερος από τους θετικούς ακέραιους σε μια λίστα. Εάν δεν υπάρχουν αρνητικοί ή θετικοί ακέραιοι, επιστρέψτε τους ως None.\n        /// \n        /// Παραδείγματα:\n        /// \n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static List<object> LargestSmallestIntegers (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7});\n            var expected1 = new List<object> {null,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7,0});\n            var expected2 = new List<object> {null,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestSmallestIntegers(new List<int> {1,3,2,4,5,6,-2});\n            var expected3 = new List<object> {-2,1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestSmallestIntegers(new List<int> {4,5,3,6,2,7,-7});\n            var expected4 = new List<object> {-7,2};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestSmallestIntegers(new List<int> {7,3,8,4,9,2,5,-9});\n            var expected5 = new List<object> {-9,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = LargestSmallestIntegers(new List<int> {});\n            var expected6 = new List<object> {null,null};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = LargestSmallestIntegers(new List<int> {0});\n            var expected7 = new List<object> {null,null};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6});\n            var expected8 = new List<object> {-1,null};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6,0});\n            var expected9 = new List<object> {-1,null};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,1});\n            var expected10 = new List<object> {-3,1};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,-100,1});\n            var expected11 = new List<object> {-3,1};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δημιουργήστε μια συνάρτηση που επιστρέφει ένα tuple (a, b), όπου 'a' είναι ο μεγαλύτερος από τους αρνητικούς ακέραιους και 'b' είναι ο μικρότερος από τους θετικούς ακέραιους σε μια λίστα. Εάν δεν υπάρχουν αρνητικοί ή θετικοί ακέραιοι, επιστρέψτε τους ως None.\n\nΠαραδείγματα:", "entry_point": "LargestSmallestIntegers", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/64", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Το βραζιλιάνικο παραγοντικό ορίζεται ως:\n        ///     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        ///     όπου n > 0\n        /// \n        ///     Για παράδειγμα:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFactorial(4);\n            var expected1 = 288;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFactorial(5);\n            var expected2 = 34560;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFactorial(7);\n            var expected3 = 125411328000;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFactorial(1);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Το βραζιλιάνικο παραγοντικό ορίζεται ως:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    όπου n > 0\n\n    Για παράδειγμα:", "entry_point": "SpecialFactorial", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/65", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται μια συμβολοσειρά που αντιπροσωπεύει μια πρόταση,\n        ///     η πρόταση περιέχει μερικές λέξεις που χωρίζονται από ένα κενό,\n        ///     και πρέπει να επιστρέψετε μια συμβολοσειρά που περιέχει τις λέξεις από την αρχική πρόταση,\n        ///     οι οποίες έχουν πρωταρχικά μήκη,\n        ///     η σειρά των λέξεων στη νέα συμβολοσειρά πρέπει να είναι η ίδια με την αρχική.\n        /// \n        ///     Παράδειγμα 1:\n        ///         Είσοδος: πρόταση = \"Αυτό είναι ένα τεστ\"\n        ///         Έξοδος: \"είναι\"\n        /// \n        ///     Παράδειγμα 2:\n        ///         Είσοδος: πρόταση = \"πάμε για κολύμπι\"\n        ///         Έξοδος: \"για\"\n        /// \n        ///     Περιορισμοί:\n        ///         * 1 <= len(sentence) <= 100\n        ///         * Η πρόταση περιέχει μόνο γράμματα.\n        /// \n        /// \n        /// </summary>\n        public static string WordsInSentence (string sentence) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsInSentence(\"This is a test\");\n            var expected1 = \"is\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsInSentence(\"lets go for swimming\");\n            var expected2 = \"go for\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsInSentence(\"there is no place available here\");\n            var expected3 = \"there is no place\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsInSentence(\"Hi I am Hussein\");\n            var expected4 = \"Hi am Hussein\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsInSentence(\"go for it\");\n            var expected5 = \"go for it\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsInSentence(\"here\");\n            var expected6 = \"\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = WordsInSentence(\"here is\");\n            var expected7 = \"is\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια συμβολοσειρά που αντιπροσωπεύει μια πρόταση,\n    η πρόταση περιέχει μερικές λέξεις που χωρίζονται από ένα κενό,\n    και πρέπει να επιστρέψετε μια συμβολοσειρά που περιέχει τις λέξεις από την αρχική πρόταση,\n    οι οποίες έχουν πρωταρχικά μήκη,\n    η σειρά των λέξεων στη νέα συμβολοσειρά πρέπει να είναι η ίδια με την αρχική.\n\n    Παράδειγμα 1:\n        Είσοδος: πρόταση = \"Αυτό είναι ένα τεστ\"\n        Έξοδος: \"είναι\"\n\n    Παράδειγμα 2:\n        Είσοδος: πρόταση = \"πάμε για κολύμπι\"\n        Έξοδος: \"για\"\n\n    Περιορισμοί:\n        * 1 <= len(sentence) <= 100\n        * Η πρόταση περιέχει μόνο γράμματα.", "entry_point": "WordsInSentence", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/66", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Η εργασία σας είναι να υλοποιήσετε μια συνάρτηση που θα απλοποιεί την έκφραση x * n. Η συνάρτηση επιστρέφει True αν το x * n αξιολογείται σε έναν ακέραιο αριθμό και False διαφορετικά. Και τα δύο x και n είναι αναπαράσταση συντελεστή, και έχουν την ακόλουθη μορφή, <αριθμητέας>/<παρονομαστής> όπου και ο αριθμητέας και ο παρονομαστής είναι θετικοί ακέραιοι αριθμοί.\n        /// \n        /// Μπορείτε να υποθέσετε ότι το x και το n είναι έγκυροι συντελεστές και δεν έχουν μηδέν ως παρονομαστή.\n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify (string x, string n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Simplify(\"1/5\",\"5/1\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Simplify(\"1/6\",\"2/1\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Simplify(\"5/1\",\"3/1\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Simplify(\"7/10\",\"10/2\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Simplify(\"2/10\",\"50/10\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Simplify(\"7/2\",\"4/2\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Simplify(\"11/6\",\"6/1\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Simplify(\"2/3\",\"5/2\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Simplify(\"5/2\",\"3/5\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Simplify(\"2/4\",\"8/4\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Simplify(\"2/4\",\"4/2\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Simplify(\"1/5\",\"5/1\");\n            var expected12 = true;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Simplify(\"1/5\",\"1/5\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Η εργασία σας είναι να υλοποιήσετε μια συνάρτηση που θα απλοποιεί την έκφραση x * n. Η συνάρτηση επιστρέφει True αν το x * n αξιολογείται σε έναν ακέραιο αριθμό και False διαφορετικά. Και τα δύο x και n είναι αναπαράσταση συντελεστή, και έχουν την ακόλουθη μορφή, <αριθμητέας>/<παρονομαστής> όπου και ο αριθμητέας και ο παρονομαστής είναι θετικοί ακέραιοι αριθμοί.\n\nΜπορείτε να υποθέσετε ότι το x και το n είναι έγκυροι συντελεστές και δεν έχουν μηδέν ως παρονομαστή.", "entry_point": "Simplify", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/67", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Γράψτε μια συνάρτηση η οποία ταξινομεί τη δοσμένη λίστα ακεραίων σε αύξουσα σειρά βάσει του αθροίσματος των ψηφίων τους. Σημείωση: αν υπάρχουν πολλά στοιχεία με παρόμοιο άθροισμα των ψηφίων τους, ταξινομήστε τα βάσει της θέσης τους στην αρχική λίστα.\n        /// \n        /// Παράδειγμα:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints (List<int> nums) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = OrderByPoints(new List<int> {1,11,-1,-11,-12});\n            var expected1 = new List<int> {-1,-11,1,-12,11};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = OrderByPoints(new List<int> {1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46});\n            var expected2 = new List<int> {0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = OrderByPoints(new List<int> {});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = OrderByPoints(new List<int> {1,-11,-32,43,54,-98,2,-3});\n            var expected4 = new List<int> {-3,-32,-98,-11,1,2,43,54};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = OrderByPoints(new List<int> {1,2,3,4,5,6,7,8,9,10,11});\n            var expected5 = new List<int> {1,10,2,11,3,4,5,6,7,8,9};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = OrderByPoints(new List<int> {0,6,6,-76,-21,23,4});\n            var expected6 = new List<int> {-76,-21,0,4,23,6,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση η οποία ταξινομεί τη δοσμένη λίστα ακεραίων σε αύξουσα σειρά βάσει του αθροίσματος των ψηφίων τους. Σημείωση: αν υπάρχουν πολλά στοιχεία με παρόμοιο άθροισμα των ψηφίων τους, ταξινομήστε τα βάσει της θέσης τους στην αρχική λίστα.\n\nΠαράδειγμα:", "entry_point": "OrderByPoints", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/68", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Γράψτε μια συνάρτηση που παίρνει έναν πίνακα αριθμών ως είσοδο και επιστρέφει τον αριθμό των στοιχείων στον πίνακα που είναι μεγαλύτερα από 10 και και οι πρώτοι και οι τελευταίοι αριθμοί ενός αριθμού είναι περιττοί (1, 3, 5, 7, 9). Για παράδειγμα:\n        /// \n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter (List<int> nums) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFilter(new List<int> {5,-2,1,-5});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFilter(new List<int> {15,-73,14,-15});\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFilter(new List<int> {33,-2,-3,45,21,109});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFilter(new List<int> {43,-12,93,125,121,109});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SpecialFilter(new List<int> {71,-2,-33,75,21,19});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SpecialFilter(new List<int> {1});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SpecialFilter(new List<int> {});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Γράψτε μια συνάρτηση που παίρνει έναν πίνακα αριθμών ως είσοδο και επιστρέφει τον αριθμό των στοιχείων στον πίνακα που είναι μεγαλύτερα από 10 και και οι πρώτοι και οι τελευταίοι αριθμοί ενός αριθμού είναι περιττοί (1, 3, 5, 7, 9). Για παράδειγμα:", "entry_point": "SpecialFilter", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/69", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Σας δίνεται ένα θετικό ακέραιο n. Πρέπει να δημιουργήσετε έναν πίνακα ακεραίων a μήκους n. Για κάθε i (1 ≤ i ≤ n), η τιμή του a[i] = i * i - i + 1. Επιστρέψτε τον αριθμό των τριάδων (a[i], a[j], a[k]) του a όπου i < j < k, και a[i] + a[j] + a[k] είναι πολλαπλάσιο του 3.\n        /// \n        /// Παράδειγμα:\n        ///     Είσοδος: n = 5\n        ///     Έξοδος: 1\n        ///     Εξήγηση:\n        ///     a = [1, 3, 7, 13, 21]\n        ///     Η μόνη έγκυρη τριάδα είναι (1, 7, 13).\n        /// \n        /// \n        /// </summary>\n        public static int GetMaxTriples (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetMaxTriples(5);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetMaxTriples(6);\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetMaxTriples(10);\n            var expected3 = 36;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetMaxTriples(100);\n            var expected4 = 53361;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται ένα θετικό ακέραιο n. Πρέπει να δημιουργήσετε έναν πίνακα ακεραίων a μήκους n. Για κάθε i (1 ≤ i ≤ n), η τιμή του a[i] = i * i - i + 1. Επιστρέψτε τον αριθμό των τριάδων (a[i], a[j], a[k]) του a όπου i < j < k, και a[i] + a[j] + a[k] είναι πολλαπλάσιο του 3.\n\nΠαράδειγμα:\n    Είσοδος: n = 5\n    Έξοδος: 1\n    Εξήγηση:\n    a = [1, 3, 7, 13, 21]\n    Η μόνη έγκυρη τριάδα είναι (1, 7, 13).", "entry_point": "GetMaxTriples", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/70", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Υπάρχουν οκτώ πλανήτες στο ηλιακό μας σύστημα: ο πλανήτης που βρίσκεται πιο κοντά στον Ήλιο είναι ο Ερμής, ο επόμενος είναι η Αφροδίτη, έπειτα η Γη, ο Άρης, ο Δίας, ο Κρόνος, ο Ουρανός και ο Ποσειδώνας. \n        /// Γράψτε μια συνάρτηση που παίρνει δύο ονόματα πλανητών ως αλφαριθμητικά planet1 και planet2. Η συνάρτηση θα πρέπει να επιστρέφει ένα tuple που περιέχει όλους τους πλανήτες των οποίων οι τροχιές βρίσκονται μεταξύ της τροχιάς του πλανήτη1 και της τροχιάς του πλανήτη2, ταξινομημένους κατά την εγγύτητά τους στον Ήλιο. Η συνάρτηση θα πρέπει να επιστρέφει ένα κενό tuple εάν το planet1 ή το planet2 δεν είναι σωστά ονόματα πλανητών. \n        /// Παραδείγματα:\n        /// \n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf (string planet1, string planet2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Bf(\"Jupiter\",\"Neptune\");\n            var expected1 = new List<string> {\"Saturn\",\"Uranus\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Bf(\"Earth\",\"Mercury\");\n            var expected2 = new List<string> {\"Venus\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Bf(\"Mercury\",\"Uranus\");\n            var expected3 = new List<string> {\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Bf(\"Neptune\",\"Venus\");\n            var expected4 = new List<string> {\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Bf(\"Earth\",\"Earth\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Bf(\"Mars\",\"Earth\");\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Bf(\"Jupiter\",\"Makemake\");\n            var expected7 = new List<string> {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Υπάρχουν οκτώ πλανήτες στο ηλιακό μας σύστημα: ο πλανήτης που βρίσκεται πιο κοντά στον Ήλιο είναι ο Ερμής, ο επόμενος είναι η Αφροδίτη, έπειτα η Γη, ο Άρης, ο Δίας, ο Κρόνος, ο Ουρανός και ο Ποσειδώνας. \nΓράψτε μια συνάρτηση που παίρνει δύο ονόματα πλανητών ως αλφαριθμητικά planet1 και planet2. Η συνάρτηση θα πρέπει να επιστρέφει ένα tuple που περιέχει όλους τους πλανήτες των οποίων οι τροχιές βρίσκονται μεταξύ της τροχιάς του πλανήτη1 και της τροχιάς του πλανήτη2, ταξινομημένους κατά την εγγύτητά τους στον Ήλιο. Η συνάρτηση θα πρέπει να επιστρέφει ένα κενό tuple εάν το planet1 ή το planet2 δεν είναι σωστά ονόματα πλανητών. \nΠαραδείγματα:", "entry_point": "Bf", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/71", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Ένα απλό πρόγραμμα που θα πρέπει να επιστρέφει την τιμή του x αν το n είναι πρώτος αριθμός και θα πρέπει να επιστρέφει την τιμή του y σε διαφορετική περίπτωση.\n        /// \n        /// Παραδείγματα:\n        /// \n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// \n        /// </summary>\n        public static int XOrY (int n, int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = XOrY(7,34,12);\n            var expected1 = 34;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = XOrY(15,8,5);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = XOrY(3,33,5212);\n            var expected3 = 33;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = XOrY(1259,3,52);\n            var expected4 = 3;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = XOrY(7919,-1,12);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = XOrY(3609,1245,583);\n            var expected6 = 583;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = XOrY(91,56,129);\n            var expected7 = 129;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = XOrY(6,34,1234);\n            var expected8 = 1234;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = XOrY(1,2,0);\n            var expected9 = 0;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = XOrY(2,2,0);\n            var expected10 = 2;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Ένα απλό πρόγραμμα που θα πρέπει να επιστρέφει την τιμή του x αν το n είναι πρώτος αριθμός και θα πρέπει να επιστρέφει την τιμή του y σε διαφορετική περίπτωση.\n\nΠαραδείγματα:", "entry_point": "XOrY", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/72", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένης μιας λίστας αριθμών, επιστρέψτε το άθροισμα των τετραγώνων των αριθμών στη λίστα που είναι περιττοί. Αγνοήστε τους αριθμούς που είναι αρνητικοί ή δεν είναι ακέραιοι.\n        /// \n        ///     DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        ///     DoubleTheDifference([-1, -2, 0]) == 0\n        ///     DoubleTheDifference([9, -2]) == 81\n        ///     DoubleTheDifference([0]) == 0\n        /// \n        ///     Εάν η είσοδος είναι κενή λίστα, επιστρέψτε 0.\n        /// \n        /// \n        /// </summary>\n        public static int DoubleTheDifference (List<object> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DoubleTheDifference(new List<object> {});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DoubleTheDifference(new List<object> {5,4});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DoubleTheDifference(new List<object> {0.1,0.2,0.3});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DoubleTheDifference(new List<object> {-10,-20,-30});\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = DoubleTheDifference(new List<object> {-1,-2,8});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = DoubleTheDifference(new List<object> {0.2,3,5});\n            var expected6 = 34;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = DoubleTheDifference(new List<object> {-99,-97,-95,-93,-91,-89,-87,-85,-83,-81,-79,-77,-75,-73,-71,-69,-67,-65,-63,-61,-59,-57,-55,-53,-51,-49,-47,-45,-43,-41,-39,-37,-35,-33,-31,-29,-27,-25,-23,-21,-19,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99});\n            var expected7 = 166650;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένης μιας λίστας αριθμών, επιστρέψτε το άθροισμα των τετραγώνων των αριθμών στη λίστα που είναι περιττοί. Αγνοήστε τους αριθμούς που είναι αρνητικοί ή δεν είναι ακέραιοι.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    Εάν η είσοδος είναι κενή λίστα, επιστρέψτε 0.", "entry_point": "DoubleTheDifference", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/73", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Θα σας δοθεί το όνομα μιας κλάσης (ένα string) και μια λίστα επεκτάσεων. Οι επεκτάσεις πρέπει να χρησιμοποιηθούν για να φορτώσουν επιπλέον κλάσεις στην κλάση. Η δύναμη της επέκτασης είναι ως εξής: Ας είναι CAP ο αριθμός των κεφαλαίων γραμμάτων στο όνομα της επέκτασης και ας είναι SM ο αριθμός των πεζών γραμμάτων στο όνομα της επέκτασης, η δύναμη δίνεται από το κλάσμα CAP - SM. Θα πρέπει να βρείτε την ισχυρότερη επέκταση και να επιστρέψετε ένα string σε αυτή τη μορφή: ClassName.StrongestExtensionName. Εάν υπάρχουν δύο ή περισσότερες επεκτάσεις με την ίδια δύναμη, θα πρέπει να επιλέξετε αυτή που έρχεται πρώτη στη λίστα. Για παράδειγμα, εάν σας δοθεί \"Slices\" ως κλάση και μια λίστα επεκτάσεων: ['SErviNGSliCes', 'Cheese', 'StuFfed'], τότε θα πρέπει να επιστρέψετε 'Slices.SErviNGSliCes' καθώς η 'SErviNGSliCes' είναι η ισχυρότερη επέκταση (η δύναμή της είναι -1). Παράδειγμα:\n        /// \n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension (string class_name, List<string> extensions) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StrongestExtension(\"Watashi\",new List<string> {\"tEN\",\"niNE\",\"eIGHt8OKe\"});\n            var expected1 = \"Watashi.eIGHt8OKe\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StrongestExtension(\"Boku123\",new List<string> {\"nani\",\"NazeDa\",\"YEs.WeCaNe\",\"32145tggg\"});\n            var expected2 = \"Boku123.YEs.WeCaNe\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StrongestExtension(\"__YESIMHERE\",new List<string> {\"t\",\"eMptY\",\"nothing\",\"zeR00\",\"NuLl__\",\"123NoooneB321\"});\n            var expected3 = \"__YESIMHERE.NuLl__\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StrongestExtension(\"K\",new List<string> {\"Ta\",\"TAR\",\"t234An\",\"cosSo\"});\n            var expected4 = \"K.TAR\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = StrongestExtension(\"__HAHA\",new List<string> {\"Tab\",\"123\",\"781345\",\"-_-\"});\n            var expected5 = \"__HAHA.123\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = StrongestExtension(\"YameRore\",new List<string> {\"HhAas\",\"okIWILL123\",\"WorkOut\",\"Fails\",\"-_-\"});\n            var expected6 = \"YameRore.okIWILL123\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = StrongestExtension(\"finNNalLLly\",new List<string> {\"Die\",\"NowW\",\"Wow\",\"WoW\"});\n            var expected7 = \"finNNalLLly.WoW\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = StrongestExtension(\"_\",new List<string> {\"Bb\",\"91245\"});\n            var expected8 = \"_.Bb\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = StrongestExtension(\"Sp\",new List<string> {\"671235\",\"Bb\"});\n            var expected9 = \"Sp.671235\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Θα σας δοθεί το όνομα μιας κλάσης (ένα string) και μια λίστα επεκτάσεων. Οι επεκτάσεις πρέπει να χρησιμοποιηθούν για να φορτώσουν επιπλέον κλάσεις στην κλάση. Η δύναμη της επέκτασης είναι ως εξής: Ας είναι CAP ο αριθμός των κεφαλαίων γραμμάτων στο όνομα της επέκτασης και ας είναι SM ο αριθμός των πεζών γραμμάτων στο όνομα της επέκτασης, η δύναμη δίνεται από το κλάσμα CAP - SM. Θα πρέπει να βρείτε την ισχυρότερη επέκταση και να επιστρέψετε ένα string σε αυτή τη μορφή: ClassName.StrongestExtensionName. Εάν υπάρχουν δύο ή περισσότερες επεκτάσεις με την ίδια δύναμη, θα πρέπει να επιλέξετε αυτή που έρχεται πρώτη στη λίστα. Για παράδειγμα, εάν σας δοθεί \"Slices\" ως κλάση και μια λίστα επεκτάσεων: ['SErviNGSliCes', 'Cheese', 'StuFfed'], τότε θα πρέπει να επιστρέψετε 'Slices.SErviNGSliCes' καθώς η 'SErviNGSliCes' είναι η ισχυρότερη επέκταση (η δύναμή της είναι -1). Παράδειγμα:", "entry_point": "StrongestExtension", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/74", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνονται 2 λέξεις. Χρειάζεται να επιστρέψετε True αν η δεύτερη λέξη ή οποιαδήποτε από τις περιστροφές της είναι υποσυμβολοσειρά στην πρώτη λέξη.\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// \n        /// </summary>\n        public static bool CycpatternCheck (string a, string b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CycpatternCheck(\"xyzw\",\"xyw\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CycpatternCheck(\"yello\",\"ell\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CycpatternCheck(\"whattup\",\"ptut\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CycpatternCheck(\"efef\",\"fee\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CycpatternCheck(\"abab\",\"aabb\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CycpatternCheck(\"winemtt\",\"tinem\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνονται 2 λέξεις. Χρειάζεται να επιστρέψετε True αν η δεύτερη λέξη ή οποιαδήποτε από τις περιστροφές της είναι υποσυμβολοσειρά στην πρώτη λέξη.", "entry_point": "CycpatternCheck", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/75", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός θετικού ακεραίου, να ανακτηθεί η αντίστοιχη ρωμαϊκή αριθμητική του σε μορφή συμβολοσειράς και να επιστραφεί σε πεζά γράμματα.\n        ///     Περιορισμοί: 1 <= num <= 1000\n        /// \n        ///     Παραδείγματα:\n        /// >>> IntToMiniRoman(19) == 'xix'\n        /// >>> IntToMiniRoman(152) == 'clii'\n        /// >>> IntToMiniRoman(426) == 'cdxxvi'\n        /// \n        /// </summary>\n        public static string IntToMiniRoman (int number) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IntToMiniRoman(19);\n            var expected1 = \"xix\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IntToMiniRoman(152);\n            var expected2 = \"clii\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IntToMiniRoman(251);\n            var expected3 = \"ccli\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IntToMiniRoman(426);\n            var expected4 = \"cdxxvi\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IntToMiniRoman(500);\n            var expected5 = \"d\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IntToMiniRoman(1);\n            var expected6 = \"i\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IntToMiniRoman(4);\n            var expected7 = \"iv\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IntToMiniRoman(43);\n            var expected8 = \"xliii\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IntToMiniRoman(90);\n            var expected9 = \"xc\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IntToMiniRoman(94);\n            var expected10 = \"xciv\";\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IntToMiniRoman(532);\n            var expected11 = \"dxxxii\";\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IntToMiniRoman(900);\n            var expected12 = \"cm\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IntToMiniRoman(994);\n            var expected13 = \"cmxciv\";\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IntToMiniRoman(1000);\n            var expected14 = \"m\";\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός θετικού ακεραίου, να ανακτηθεί η αντίστοιχη ρωμαϊκή αριθμητική του σε μορφή συμβολοσειράς και να επιστραφεί σε πεζά γράμματα.\n    Περιορισμοί: 1 <= num <= 1000\n\n    Παραδείγματα:", "entry_point": "IntToMiniRoman", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/76", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένων των μήκων των τριών πλευρών ενός τριγώνου, επιστρέφει True αν οι τρεις πλευρές σχηματίζουν ένα ορθογώνιο τρίγωνο, False διαφορετικά. Ένα ορθογώνιο τρίγωνο είναι ένα τρίγωνο στο οποίο ένα γωνία είναι ορθή ή 90 μοίρες. Παράδειγμα:\n        /// \n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// </summary>\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RightAngleTriangle(3,4,5);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RightAngleTriangle(1,2,3);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RightAngleTriangle(10,6,8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RightAngleTriangle(2,2,2);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RightAngleTriangle(7,24,25);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RightAngleTriangle(10,5,7);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RightAngleTriangle(5,12,13);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RightAngleTriangle(15,8,17);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RightAngleTriangle(48,55,73);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RightAngleTriangle(1,1,1);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RightAngleTriangle(2,2,10);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένων των μήκων των τριών πλευρών ενός τριγώνου, επιστρέφει True αν οι τρεις πλευρές σχηματίζουν ένα ορθογώνιο τρίγωνο, False διαφορετικά. Ένα ορθογώνιο τρίγωνο είναι ένα τρίγωνο στο οποίο ένα γωνία είναι ορθή ή 90 μοίρες. Παράδειγμα:", "entry_point": "RightAngleTriangle", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/77", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// Σας δίνεται μια συμβολοσειρά s.\n        ///     Αν s[i] είναι γράμμα, αντιστρέψτε την πεζή πεζή σε κεφαλαία ή αντίστροφα, \n        ///     διαφορετικά κρατήστε το όπως είναι.\n        ///     Εάν η συμβολοσειρά δεν περιέχει γράμματα, αντιστρέψτε τη συμβολοσειρά.\n        ///     Η συνάρτηση πρέπει να επιστρέψει τη συμβολοσειρά που προέκυψε.\n        ///     Παραδείγματα\n        /// \n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(\"AsDf\");\n            var expected1 = \"aSdF\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(\"1234\");\n            var expected2 = \"4321\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(\"ab\");\n            var expected3 = \"AB\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(\"#a@C\");\n            var expected4 = \"#A@c\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(\"#AsdfW^45\");\n            var expected5 = \"#aSDFw^45\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Solve(\"#6@2\");\n            var expected6 = \"2@6#\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Solve(\"#$a^D\");\n            var expected7 = \"#$A^d\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Solve(\"#ccc\");\n            var expected8 = \"#CCC\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Σας δίνεται μια συμβολοσειρά s.\n    Αν s[i] είναι γράμμα, αντιστρέψτε την πεζή πεζή σε κεφαλαία ή αντίστροφα, \n    διαφορετικά κρατήστε το όπως είναι.\n    Εάν η συμβολοσειρά δεν περιέχει γράμματα, αντιστρέψτε τη συμβολοσειρά.\n    Η συνάρτηση πρέπει να επιστρέψει τη συμβολοσειρά που προέκυψε.\n    Παραδείγματα", "entry_point": "Solve", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/78", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένου ενός αλφαριθμητικού 'text', επιστρέψτε ένα αντίστοιχο αλφαριθμητικό md5 hash του. Εάν το 'text' είναι ένα κενό αλφαριθμητικό, επιστρέψτε null.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5 (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringToMd5(\"Hello world\");\n            var expected1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringToMd5(\"\");\n            var expected2 = null;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringToMd5(\"A B C\");\n            var expected3 = \"0ef78513b0cb8cef12743f5aeb35f888\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StringToMd5(\"password\");\n            var expected4 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένου ενός αλφαριθμητικού 'text', επιστρέψτε ένα αντίστοιχο αλφαριθμητικό md5 hash του. Εάν το 'text' είναι ένα κενό αλφαριθμητικό, επιστρέψτε null.", "entry_point": "StringToMd5", "canonical_solution": NaN, "natural_language": "Greek"}
{"task_id": "csharp/79", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Είστε ένας ειδικός προγραμματιστής σε C#.\n        /// \n        /// Δεδομένων δύο θετικών ακεραίων a και b, επιστρέφονται οι άρτιοι αριθμοί μεταξύ a και b, με αύξουσα σειρά.\n        /// \n        /// Για παράδειγμα:\n        /// \n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers (int a, int b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GenerateIntegers(2,10);\n            var expected1 = new List<int> {2,4,6,8};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GenerateIntegers(10,2);\n            var expected2 = new List<int> {2,4,6,8};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GenerateIntegers(132,2);\n            var expected3 = new List<int> {2,4,6,8};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GenerateIntegers(17,89);\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Δεδομένων δύο θετικών ακεραίων a και b, επιστρέφονται οι άρτιοι αριθμοί μεταξύ a και b, με αύξουσα σειρά.\n\nΓια παράδειγμα:", "entry_point": "GenerateIntegers", "canonical_solution": NaN, "natural_language": "Greek"}
