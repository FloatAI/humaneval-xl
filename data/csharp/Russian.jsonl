{"task_id": "csharp/0", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам дан список операций по вкладу и снятию денег с банковского счета, который начинается с нулевого баланса. Ваша задача - обнаружить, если на каком-то этапе баланс счета падает ниже нуля, и в этой точке функция должна вернуть True. В противном случае она должна вернуть False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero (List<int> operations) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowZero(new List<int> {});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowZero(new List<int> {1,2,-3,1,2,-3});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowZero(new List<int> {1,2,-4,5,6});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-4});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowZero(new List<int> {1,-1,2,-2,5,-5,4,-5});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowZero(new List<int> {1,-2,2,-2,5,-5,4,-4});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дан список операций по вкладу и снятию денег с банковского счета, который начинается с нулевого баланса. Ваша задача - обнаружить, если на каком-то этапе баланс счета падает ниже нуля, и в этой точке функция должна вернуть True. В противном случае она должна вернуть False.", "entry_point": "BelowZero", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/1", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Для заданного списка целых чисел вернуть кортеж, состоящий из суммы и произведения всех целых чисел в списке. Пустая сумма должна быть равна 0, а пустое произведение должно быть равно 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static List<int> SumProduct (List<int> numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumProduct(new List<int> {});\n            var expected1 = new List<int> {0,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumProduct(new List<int> {1,1,1});\n            var expected2 = new List<int> {3,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumProduct(new List<int> {100,0});\n            var expected3 = new List<int> {100,0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumProduct(new List<int> {3,5,7});\n            var expected4 = new List<int> {15,105};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumProduct(new List<int> {10});\n            var expected5 = new List<int> {10,10};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Для заданного списка целых чисел вернуть кортеж, состоящий из суммы и произведения всех целых чисел в списке. Пустая сумма должна быть равна 0, а пустое произведение должно быть равно 1.", "entry_point": "SumProduct", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/2", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Входными данными являются две строки a и b, состоящие только из 1 и 0.\n        ///     Выполните бинарное исключающее ИЛИ на этих входных данных и верните результат также в виде строки.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor (string a, string b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringXor(\"111000\",\"101010\");\n            var expected1 = \"010010\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringXor(\"1\",\"1\");\n            var expected2 = \"0\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringXor(\"0101\",\"0000\");\n            var expected3 = \"0101\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Входными данными являются две строки a и b, состоящие только из 1 и 0.\n    Выполните бинарное исключающее ИЛИ на этих входных данных и верните результат также в виде строки.", "entry_point": "StringXor", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/3", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Из списка строк вернуть самую длинную. В случае нескольких строк одинаковой длины вернуть первую. В случае пустого списка вернуть null.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest (List<string> strings) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Longest(new List<string> {});\n            var expected1 = null;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Longest(new List<string> {\"x\",\"y\",\"z\"});\n            var expected2 = \"x\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Longest(new List<string> {\"x\",\"yyy\",\"zzzz\",\"www\",\"kkkk\",\"abc\"});\n            var expected3 = \"zzzz\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Из списка строк вернуть самую длинную. В случае нескольких строк одинаковой длины вернуть первую. В случае пустого списка вернуть null.", "entry_point": "Longest", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/4", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть наибольший общий делитель двух целых чисел a и b.\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor (int a, int b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GreatestCommonDivisor(3,7);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GreatestCommonDivisor(10,15);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GreatestCommonDivisor(49,14);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GreatestCommonDivisor(144,60);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть наибольший общий делитель двух целых чисел a и b.", "entry_point": "GreatestCommonDivisor", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/5", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вводится строка чисел, разделенных пробелами, от 'ноль' до 'девять'.\n        ///     Допустимыми вариантами являются 'ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь' и 'девять'.\n        ///     Вернуть строку с отсортированными числами от наименьшего к наибольшему.\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers (string numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SortNumbers(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SortNumbers(\"three\");\n            var expected2 = \"three\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SortNumbers(\"three five nine\");\n            var expected3 = \"three five nine\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SortNumbers(\"five zero four seven nine eight\");\n            var expected4 = \"zero four five seven eight nine\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SortNumbers(\"six five four three two one zero\");\n            var expected5 = \"zero one two three four five six\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вводится строка чисел, разделенных пробелами, от 'ноль' до 'девять'.\n    Допустимыми вариантами являются 'ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь' и 'девять'.\n    Вернуть строку с отсортированными числами от наименьшего к наибольшему.", "entry_point": "SortNumbers", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/6", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Дан список чисел (не менее двух элементов), примените линейное преобразование к этому списку, так что наименьшее число станет равным 0, а наибольшее - 1.\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit (List<double> numbers) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RescaleToUnit(new List<double> {2.0,49.9});\n            var expected1 = new List<double> {0.0,1.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RescaleToUnit(new List<double> {100.0,49.9});\n            var expected2 = new List<double> {1.0,0.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RescaleToUnit(new List<double> {1.0,2.0,3.0,4.0,5.0});\n            var expected3 = new List<double> {0.0,0.25,0.5,0.75,1.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RescaleToUnit(new List<double> {2.0,1.0,5.0,3.0,4.0});\n            var expected4 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RescaleToUnit(new List<double> {12.0,11.0,15.0,13.0,14.0});\n            var expected5 = new List<double> {0.25,0.0,1.0,0.5,0.75};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дан список чисел (не менее двух элементов), примените линейное преобразование к этому списку, так что наименьшее число станет равным 0, а наибольшее - 1.", "entry_point": "RescaleToUnit", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/7", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Для заданной строки перевернуть символы в нижнем регистре в верхний регистр и символы в верхнем регистре в нижний регистр.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = FlipCase(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = FlipCase(\"Hello!\");\n            var expected2 = \"hELLO!\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = FlipCase(\"These violent delights have violent ends\");\n            var expected3 = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Для заданной строки перевернуть символы в нижнем регистре в верхний регистр и символы в верхнем регистре в нижний регистр.", "entry_point": "FlipCase", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/8", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть только положительные числа в списке.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetPositive(new List<int> {-1,-2,4,5,6});\n            var expected1 = new List<int> {4,5,6};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetPositive(new List<int> {5,3,-5,2,3,3,9,0,123,1,-10});\n            var expected2 = new List<int> {5,3,2,3,3,9,123,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetPositive(new List<int> {-1,-2});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetPositive(new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть только положительные числа в списке.", "entry_point": "GetPositive", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/9", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть true, если данное число является простым, и false в противном случае.\n        /// >>> IsPrime(6)\n        /// False\n        /// >>> IsPrime(101)\n        /// True\n        /// >>> IsPrime(11)\n        /// True\n        /// >>> IsPrime(13441)\n        /// True\n        /// >>> IsPrime(61)\n        /// True\n        /// >>> IsPrime(4)\n        /// False\n        /// >>> IsPrime(1)\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPrime (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPrime(6);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPrime(101);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPrime(11);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPrime(13441);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPrime(61);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPrime(4);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPrime(1);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsPrime(5);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsPrime(11);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsPrime(17);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsPrime(85);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsPrime(77);\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsPrime(255379);\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть true, если данное число является простым, и false в противном случае.", "entry_point": "IsPrime", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/10", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть отсортированные уникальные элементы в списке.\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Unique(new List<int> {5,3,5,2,3,3,9,0,123});\n            var expected1 = new List<int> {0,2,3,5,9,123};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть отсортированные уникальные элементы в списке.", "entry_point": "Unique", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/11", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// PrimeFib возвращает n-ое число, которое является числом Фибоначчи и простым числом.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeFib(1);\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeFib(2);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeFib(3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeFib(4);\n            var expected4 = 13;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeFib(5);\n            var expected5 = 89;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeFib(6);\n            var expected6 = 233;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeFib(7);\n            var expected7 = 1597;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeFib(8);\n            var expected8 = 28657;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeFib(9);\n            var expected9 = 514229;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeFib(10);\n            var expected10 = 433494437;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "prime_fib возвращает n-ое число, которое является числом Фибоначчи и простым числом.", "entry_point": "PrimeFib", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/12", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// TriplesSumToZero принимает список целых чисел в качестве входных данных.\n        ///     Он возвращает True, если в списке есть три различных элемента, которые\n        ///     суммируются в ноль, и False в противном случае.\n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriplesSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriplesSumToZero(new List<int> {1,3,5,-1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriplesSumToZero(new List<int> {1,3,-2,1});\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriplesSumToZero(new List<int> {1,2,3,7});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriplesSumToZero(new List<int> {1,2,5,7});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriplesSumToZero(new List<int> {2,4,-5,3,9,7});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriplesSumToZero(new List<int> {1});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriplesSumToZero(new List<int> {1,3,5,-100});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriplesSumToZero(new List<int> {100,3,5,-100});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "triples_sum_to_zero принимает список целых чисел в качестве входных данных.\n    Он возвращает True, если в списке есть три различных элемента, которые\n    суммируются в ноль, и False в противном случае.", "entry_point": "TriplesSumToZero", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/13", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Функция PairsSumToZero принимает список целых чисел в качестве входных данных. Она возвращает True, если в списке есть два различных элемента, сумма которых равна нулю, и False в противном случае.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PairsSumToZero(new List<int> {1,3,5,0});\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PairsSumToZero(new List<int> {1,3,-2,1});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PairsSumToZero(new List<int> {1,2,3,7});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PairsSumToZero(new List<int> {2,4,-5,3,5,7});\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PairsSumToZero(new List<int> {1});\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PairsSumToZero(new List<int> {-3,9,-1,3,2,30});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PairsSumToZero(new List<int> {-3,9,-1,3,2,31});\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PairsSumToZero(new List<int> {-3,9,-1,4,2,30});\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PairsSumToZero(new List<int> {-3,9,-1,4,2,31});\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Функция pairs_sum_to_zero принимает список целых чисел в качестве входных данных. Она возвращает True, если в списке есть два различных элемента, сумма которых равна нулю, и False в противном случае.", "entry_point": "PairsSumToZero", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/14", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Последовательность чисел Fib4 - это последовательность, аналогичная последовательности Фибоначчи, которая определяется следующим образом:\n        ///     Fib4(0) -> 0\n        ///     Fib4(1) -> 0\n        ///     Fib4(2) -> 2\n        ///     Fib4(3) -> 0\n        ///     Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n        ///     Пожалуйста, напишите функцию для эффективного вычисления n-го элемента последовательности чисел Fib4. Не используйте рекурсию.\n        /// >>> Fib4(5)\n        /// 4\n        /// >>> Fib4(6)\n        /// 8\n        /// >>> Fib4(7)\n        /// 14\n        /// \n        /// </summary>\n        public static int Fib4 (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib4(5);\n            var expected1 = 4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib4(8);\n            var expected2 = 28;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib4(10);\n            var expected3 = 104;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib4(12);\n            var expected4 = 386;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Последовательность чисел Fib4 - это последовательность, аналогичная последовательности Фибоначчи, которая определяется следующим образом:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Пожалуйста, напишите функцию для эффективного вычисления n-го элемента последовательности чисел fib4. Не используйте рекурсию.", "entry_point": "Fib4", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/15", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть медиану элементов в списке l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median (List<int> l) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Median(new List<int> {3,1,2,4,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Median(new List<int> {-10,4,6,1000,10,20});\n            var expected2 = 8.0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Median(new List<int> {5});\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Median(new List<int> {6,5});\n            var expected4 = 5.5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Median(new List<int> {8,1,3,9,9,2,7});\n            var expected5 = 7;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть медиану элементов в списке l.", "entry_point": "Median", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/16", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Проверяет, является ли данная строка палиндромом.\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPalindrome (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsPalindrome(\"\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsPalindrome(\"aba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsPalindrome(\"aaaaa\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsPalindrome(\"zbcd\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsPalindrome(\"xywyx\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsPalindrome(\"xywyz\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsPalindrome(\"xywzx\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Проверяет, является ли данная строка палиндромом.", "entry_point": "IsPalindrome", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/17", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// RemoveVowels - это функция, которая принимает строку и возвращает строку без гласных.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// \n        /// </summary>\n        public static string RemoveVowels (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RemoveVowels(\"\");\n            var expected1 = \"\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RemoveVowels(\"abcdef\\nghijklm\");\n            var expected2 = \"bcdf\\nghjklm\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RemoveVowels(\"fedcba\");\n            var expected3 = \"fdcb\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RemoveVowels(\"eeeee\");\n            var expected4 = \"\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RemoveVowels(\"acBAA\");\n            var expected5 = \"cB\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RemoveVowels(\"EcBOO\");\n            var expected6 = \"cB\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RemoveVowels(\"ybcd\");\n            var expected7 = \"ybcd\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "remove_vowels - это функция, которая принимает строку и возвращает строку без гласных.", "entry_point": "RemoveVowels", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/18", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть True, если все числа в списке l меньше порога t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold (List<int> l, int t) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = BelowThreshold(new List<int> {1,2,4,10},100);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = BelowThreshold(new List<int> {1,20,4,10},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = BelowThreshold(new List<int> {1,20,4,10},21);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = BelowThreshold(new List<int> {1,20,4,10},22);\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = BelowThreshold(new List<int> {1,8,4,10},11);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = BelowThreshold(new List<int> {1,8,4,10},10);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть True, если все числа в списке l меньше порога t.", "entry_point": "BelowThreshold", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/19", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Добавить два числа x и y.\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// \n        /// </summary>\n        public static int Add (int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Add(0,1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Add(1,0);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Add(2,3);\n            var expected3 = 5;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Add(5,7);\n            var expected4 = 12;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Add(7,5);\n            var expected5 = 12;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Add(572,725);\n            var expected6 = 1297;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Add(51,804);\n            var expected7 = 855;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Add(645,96);\n            var expected8 = 741;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Add(712,853);\n            var expected9 = 1565;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Add(223,101);\n            var expected10 = 324;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Add(76,29);\n            var expected11 = 105;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Add(416,149);\n            var expected12 = 565;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Add(145,409);\n            var expected13 = 554;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Add(535,430);\n            var expected14 = 965;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Add(118,303);\n            var expected15 = 421;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Add(287,94);\n            var expected16 = 381;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Add(768,257);\n            var expected17 = 1025;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Add(421,677);\n            var expected18 = 1098;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Add(802,814);\n            var expected19 = 1616;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Add(510,922);\n            var expected20 = 1432;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Add(345,819);\n            var expected21 = 1164;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Add(895,436);\n            var expected22 = 1331;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Add(123,424);\n            var expected23 = 547;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Add(923,245);\n            var expected24 = 1168;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Add(23,438);\n            var expected25 = 461;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n            var actual26 = Add(565,133);\n            var expected26 = 698;\n            var result26 = compareLogic.Compare(actual26, expected26);\n            if (!result26.AreEqual) {throw new Exception(\"Exception --- test case 25 failed to pass\");}\n\n            var actual27 = Add(945,925);\n            var expected27 = 1870;\n            var result27 = compareLogic.Compare(actual27, expected27);\n            if (!result27.AreEqual) {throw new Exception(\"Exception --- test case 26 failed to pass\");}\n\n            var actual28 = Add(261,983);\n            var expected28 = 1244;\n            var result28 = compareLogic.Compare(actual28, expected28);\n            if (!result28.AreEqual) {throw new Exception(\"Exception --- test case 27 failed to pass\");}\n\n            var actual29 = Add(139,577);\n            var expected29 = 716;\n            var result29 = compareLogic.Compare(actual29, expected29);\n            if (!result29.AreEqual) {throw new Exception(\"Exception --- test case 28 failed to pass\");}\n\n            var actual30 = Add(763,178);\n            var expected30 = 941;\n            var result30 = compareLogic.Compare(actual30, expected30);\n            if (!result30.AreEqual) {throw new Exception(\"Exception --- test case 29 failed to pass\");}\n\n            var actual31 = Add(147,892);\n            var expected31 = 1039;\n            var result31 = compareLogic.Compare(actual31, expected31);\n            if (!result31.AreEqual) {throw new Exception(\"Exception --- test case 30 failed to pass\");}\n\n            var actual32 = Add(436,402);\n            var expected32 = 838;\n            var result32 = compareLogic.Compare(actual32, expected32);\n            if (!result32.AreEqual) {throw new Exception(\"Exception --- test case 31 failed to pass\");}\n\n            var actual33 = Add(610,581);\n            var expected33 = 1191;\n            var result33 = compareLogic.Compare(actual33, expected33);\n            if (!result33.AreEqual) {throw new Exception(\"Exception --- test case 32 failed to pass\");}\n\n            var actual34 = Add(103,416);\n            var expected34 = 519;\n            var result34 = compareLogic.Compare(actual34, expected34);\n            if (!result34.AreEqual) {throw new Exception(\"Exception --- test case 33 failed to pass\");}\n\n            var actual35 = Add(339,990);\n            var expected35 = 1329;\n            var result35 = compareLogic.Compare(actual35, expected35);\n            if (!result35.AreEqual) {throw new Exception(\"Exception --- test case 34 failed to pass\");}\n\n            var actual36 = Add(130,504);\n            var expected36 = 634;\n            var result36 = compareLogic.Compare(actual36, expected36);\n            if (!result36.AreEqual) {throw new Exception(\"Exception --- test case 35 failed to pass\");}\n\n            var actual37 = Add(242,717);\n            var expected37 = 959;\n            var result37 = compareLogic.Compare(actual37, expected37);\n            if (!result37.AreEqual) {throw new Exception(\"Exception --- test case 36 failed to pass\");}\n\n            var actual38 = Add(562,110);\n            var expected38 = 672;\n            var result38 = compareLogic.Compare(actual38, expected38);\n            if (!result38.AreEqual) {throw new Exception(\"Exception --- test case 37 failed to pass\");}\n\n            var actual39 = Add(396,909);\n            var expected39 = 1305;\n            var result39 = compareLogic.Compare(actual39, expected39);\n            if (!result39.AreEqual) {throw new Exception(\"Exception --- test case 38 failed to pass\");}\n\n            var actual40 = Add(887,703);\n            var expected40 = 1590;\n            var result40 = compareLogic.Compare(actual40, expected40);\n            if (!result40.AreEqual) {throw new Exception(\"Exception --- test case 39 failed to pass\");}\n\n            var actual41 = Add(870,551);\n            var expected41 = 1421;\n            var result41 = compareLogic.Compare(actual41, expected41);\n            if (!result41.AreEqual) {throw new Exception(\"Exception --- test case 40 failed to pass\");}\n\n            var actual42 = Add(422,391);\n            var expected42 = 813;\n            var result42 = compareLogic.Compare(actual42, expected42);\n            if (!result42.AreEqual) {throw new Exception(\"Exception --- test case 41 failed to pass\");}\n\n            var actual43 = Add(299,505);\n            var expected43 = 804;\n            var result43 = compareLogic.Compare(actual43, expected43);\n            if (!result43.AreEqual) {throw new Exception(\"Exception --- test case 42 failed to pass\");}\n\n            var actual44 = Add(346,56);\n            var expected44 = 402;\n            var result44 = compareLogic.Compare(actual44, expected44);\n            if (!result44.AreEqual) {throw new Exception(\"Exception --- test case 43 failed to pass\");}\n\n            var actual45 = Add(36,706);\n            var expected45 = 742;\n            var result45 = compareLogic.Compare(actual45, expected45);\n            if (!result45.AreEqual) {throw new Exception(\"Exception --- test case 44 failed to pass\");}\n\n            var actual46 = Add(738,411);\n            var expected46 = 1149;\n            var result46 = compareLogic.Compare(actual46, expected46);\n            if (!result46.AreEqual) {throw new Exception(\"Exception --- test case 45 failed to pass\");}\n\n            var actual47 = Add(679,87);\n            var expected47 = 766;\n            var result47 = compareLogic.Compare(actual47, expected47);\n            if (!result47.AreEqual) {throw new Exception(\"Exception --- test case 46 failed to pass\");}\n\n            var actual48 = Add(25,303);\n            var expected48 = 328;\n            var result48 = compareLogic.Compare(actual48, expected48);\n            if (!result48.AreEqual) {throw new Exception(\"Exception --- test case 47 failed to pass\");}\n\n            var actual49 = Add(161,612);\n            var expected49 = 773;\n            var result49 = compareLogic.Compare(actual49, expected49);\n            if (!result49.AreEqual) {throw new Exception(\"Exception --- test case 48 failed to pass\");}\n\n            var actual50 = Add(306,841);\n            var expected50 = 1147;\n            var result50 = compareLogic.Compare(actual50, expected50);\n            if (!result50.AreEqual) {throw new Exception(\"Exception --- test case 49 failed to pass\");}\n\n            var actual51 = Add(973,411);\n            var expected51 = 1384;\n            var result51 = compareLogic.Compare(actual51, expected51);\n            if (!result51.AreEqual) {throw new Exception(\"Exception --- test case 50 failed to pass\");}\n\n            var actual52 = Add(711,157);\n            var expected52 = 868;\n            var result52 = compareLogic.Compare(actual52, expected52);\n            if (!result52.AreEqual) {throw new Exception(\"Exception --- test case 51 failed to pass\");}\n\n            var actual53 = Add(471,27);\n            var expected53 = 498;\n            var result53 = compareLogic.Compare(actual53, expected53);\n            if (!result53.AreEqual) {throw new Exception(\"Exception --- test case 52 failed to pass\");}\n\n            var actual54 = Add(714,792);\n            var expected54 = 1506;\n            var result54 = compareLogic.Compare(actual54, expected54);\n            if (!result54.AreEqual) {throw new Exception(\"Exception --- test case 53 failed to pass\");}\n\n            var actual55 = Add(38,206);\n            var expected55 = 244;\n            var result55 = compareLogic.Compare(actual55, expected55);\n            if (!result55.AreEqual) {throw new Exception(\"Exception --- test case 54 failed to pass\");}\n\n            var actual56 = Add(907,343);\n            var expected56 = 1250;\n            var result56 = compareLogic.Compare(actual56, expected56);\n            if (!result56.AreEqual) {throw new Exception(\"Exception --- test case 55 failed to pass\");}\n\n            var actual57 = Add(23,760);\n            var expected57 = 783;\n            var result57 = compareLogic.Compare(actual57, expected57);\n            if (!result57.AreEqual) {throw new Exception(\"Exception --- test case 56 failed to pass\");}\n\n            var actual58 = Add(524,859);\n            var expected58 = 1383;\n            var result58 = compareLogic.Compare(actual58, expected58);\n            if (!result58.AreEqual) {throw new Exception(\"Exception --- test case 57 failed to pass\");}\n\n            var actual59 = Add(30,529);\n            var expected59 = 559;\n            var result59 = compareLogic.Compare(actual59, expected59);\n            if (!result59.AreEqual) {throw new Exception(\"Exception --- test case 58 failed to pass\");}\n\n            var actual60 = Add(341,691);\n            var expected60 = 1032;\n            var result60 = compareLogic.Compare(actual60, expected60);\n            if (!result60.AreEqual) {throw new Exception(\"Exception --- test case 59 failed to pass\");}\n\n            var actual61 = Add(167,729);\n            var expected61 = 896;\n            var result61 = compareLogic.Compare(actual61, expected61);\n            if (!result61.AreEqual) {throw new Exception(\"Exception --- test case 60 failed to pass\");}\n\n            var actual62 = Add(636,289);\n            var expected62 = 925;\n            var result62 = compareLogic.Compare(actual62, expected62);\n            if (!result62.AreEqual) {throw new Exception(\"Exception --- test case 61 failed to pass\");}\n\n            var actual63 = Add(503,144);\n            var expected63 = 647;\n            var result63 = compareLogic.Compare(actual63, expected63);\n            if (!result63.AreEqual) {throw new Exception(\"Exception --- test case 62 failed to pass\");}\n\n            var actual64 = Add(51,985);\n            var expected64 = 1036;\n            var result64 = compareLogic.Compare(actual64, expected64);\n            if (!result64.AreEqual) {throw new Exception(\"Exception --- test case 63 failed to pass\");}\n\n            var actual65 = Add(287,149);\n            var expected65 = 436;\n            var result65 = compareLogic.Compare(actual65, expected65);\n            if (!result65.AreEqual) {throw new Exception(\"Exception --- test case 64 failed to pass\");}\n\n            var actual66 = Add(659,75);\n            var expected66 = 734;\n            var result66 = compareLogic.Compare(actual66, expected66);\n            if (!result66.AreEqual) {throw new Exception(\"Exception --- test case 65 failed to pass\");}\n\n            var actual67 = Add(462,797);\n            var expected67 = 1259;\n            var result67 = compareLogic.Compare(actual67, expected67);\n            if (!result67.AreEqual) {throw new Exception(\"Exception --- test case 66 failed to pass\");}\n\n            var actual68 = Add(406,141);\n            var expected68 = 547;\n            var result68 = compareLogic.Compare(actual68, expected68);\n            if (!result68.AreEqual) {throw new Exception(\"Exception --- test case 67 failed to pass\");}\n\n            var actual69 = Add(106,44);\n            var expected69 = 150;\n            var result69 = compareLogic.Compare(actual69, expected69);\n            if (!result69.AreEqual) {throw new Exception(\"Exception --- test case 68 failed to pass\");}\n\n            var actual70 = Add(300,934);\n            var expected70 = 1234;\n            var result70 = compareLogic.Compare(actual70, expected70);\n            if (!result70.AreEqual) {throw new Exception(\"Exception --- test case 69 failed to pass\");}\n\n            var actual71 = Add(471,524);\n            var expected71 = 995;\n            var result71 = compareLogic.Compare(actual71, expected71);\n            if (!result71.AreEqual) {throw new Exception(\"Exception --- test case 70 failed to pass\");}\n\n            var actual72 = Add(122,429);\n            var expected72 = 551;\n            var result72 = compareLogic.Compare(actual72, expected72);\n            if (!result72.AreEqual) {throw new Exception(\"Exception --- test case 71 failed to pass\");}\n\n            var actual73 = Add(735,195);\n            var expected73 = 930;\n            var result73 = compareLogic.Compare(actual73, expected73);\n            if (!result73.AreEqual) {throw new Exception(\"Exception --- test case 72 failed to pass\");}\n\n            var actual74 = Add(335,484);\n            var expected74 = 819;\n            var result74 = compareLogic.Compare(actual74, expected74);\n            if (!result74.AreEqual) {throw new Exception(\"Exception --- test case 73 failed to pass\");}\n\n            var actual75 = Add(28,809);\n            var expected75 = 837;\n            var result75 = compareLogic.Compare(actual75, expected75);\n            if (!result75.AreEqual) {throw new Exception(\"Exception --- test case 74 failed to pass\");}\n\n            var actual76 = Add(430,20);\n            var expected76 = 450;\n            var result76 = compareLogic.Compare(actual76, expected76);\n            if (!result76.AreEqual) {throw new Exception(\"Exception --- test case 75 failed to pass\");}\n\n            var actual77 = Add(916,635);\n            var expected77 = 1551;\n            var result77 = compareLogic.Compare(actual77, expected77);\n            if (!result77.AreEqual) {throw new Exception(\"Exception --- test case 76 failed to pass\");}\n\n            var actual78 = Add(301,999);\n            var expected78 = 1300;\n            var result78 = compareLogic.Compare(actual78, expected78);\n            if (!result78.AreEqual) {throw new Exception(\"Exception --- test case 77 failed to pass\");}\n\n            var actual79 = Add(454,466);\n            var expected79 = 920;\n            var result79 = compareLogic.Compare(actual79, expected79);\n            if (!result79.AreEqual) {throw new Exception(\"Exception --- test case 78 failed to pass\");}\n\n            var actual80 = Add(905,259);\n            var expected80 = 1164;\n            var result80 = compareLogic.Compare(actual80, expected80);\n            if (!result80.AreEqual) {throw new Exception(\"Exception --- test case 79 failed to pass\");}\n\n            var actual81 = Add(168,205);\n            var expected81 = 373;\n            var result81 = compareLogic.Compare(actual81, expected81);\n            if (!result81.AreEqual) {throw new Exception(\"Exception --- test case 80 failed to pass\");}\n\n            var actual82 = Add(570,434);\n            var expected82 = 1004;\n            var result82 = compareLogic.Compare(actual82, expected82);\n            if (!result82.AreEqual) {throw new Exception(\"Exception --- test case 81 failed to pass\");}\n\n            var actual83 = Add(64,959);\n            var expected83 = 1023;\n            var result83 = compareLogic.Compare(actual83, expected83);\n            if (!result83.AreEqual) {throw new Exception(\"Exception --- test case 82 failed to pass\");}\n\n            var actual84 = Add(957,510);\n            var expected84 = 1467;\n            var result84 = compareLogic.Compare(actual84, expected84);\n            if (!result84.AreEqual) {throw new Exception(\"Exception --- test case 83 failed to pass\");}\n\n            var actual85 = Add(722,598);\n            var expected85 = 1320;\n            var result85 = compareLogic.Compare(actual85, expected85);\n            if (!result85.AreEqual) {throw new Exception(\"Exception --- test case 84 failed to pass\");}\n\n            var actual86 = Add(770,226);\n            var expected86 = 996;\n            var result86 = compareLogic.Compare(actual86, expected86);\n            if (!result86.AreEqual) {throw new Exception(\"Exception --- test case 85 failed to pass\");}\n\n            var actual87 = Add(579,66);\n            var expected87 = 645;\n            var result87 = compareLogic.Compare(actual87, expected87);\n            if (!result87.AreEqual) {throw new Exception(\"Exception --- test case 86 failed to pass\");}\n\n            var actual88 = Add(117,674);\n            var expected88 = 791;\n            var result88 = compareLogic.Compare(actual88, expected88);\n            if (!result88.AreEqual) {throw new Exception(\"Exception --- test case 87 failed to pass\");}\n\n            var actual89 = Add(530,30);\n            var expected89 = 560;\n            var result89 = compareLogic.Compare(actual89, expected89);\n            if (!result89.AreEqual) {throw new Exception(\"Exception --- test case 88 failed to pass\");}\n\n            var actual90 = Add(776,345);\n            var expected90 = 1121;\n            var result90 = compareLogic.Compare(actual90, expected90);\n            if (!result90.AreEqual) {throw new Exception(\"Exception --- test case 89 failed to pass\");}\n\n            var actual91 = Add(327,389);\n            var expected91 = 716;\n            var result91 = compareLogic.Compare(actual91, expected91);\n            if (!result91.AreEqual) {throw new Exception(\"Exception --- test case 90 failed to pass\");}\n\n            var actual92 = Add(596,12);\n            var expected92 = 608;\n            var result92 = compareLogic.Compare(actual92, expected92);\n            if (!result92.AreEqual) {throw new Exception(\"Exception --- test case 91 failed to pass\");}\n\n            var actual93 = Add(599,511);\n            var expected93 = 1110;\n            var result93 = compareLogic.Compare(actual93, expected93);\n            if (!result93.AreEqual) {throw new Exception(\"Exception --- test case 92 failed to pass\");}\n\n            var actual94 = Add(936,476);\n            var expected94 = 1412;\n            var result94 = compareLogic.Compare(actual94, expected94);\n            if (!result94.AreEqual) {throw new Exception(\"Exception --- test case 93 failed to pass\");}\n\n            var actual95 = Add(461,14);\n            var expected95 = 475;\n            var result95 = compareLogic.Compare(actual95, expected95);\n            if (!result95.AreEqual) {throw new Exception(\"Exception --- test case 94 failed to pass\");}\n\n            var actual96 = Add(966,157);\n            var expected96 = 1123;\n            var result96 = compareLogic.Compare(actual96, expected96);\n            if (!result96.AreEqual) {throw new Exception(\"Exception --- test case 95 failed to pass\");}\n\n            var actual97 = Add(326,91);\n            var expected97 = 417;\n            var result97 = compareLogic.Compare(actual97, expected97);\n            if (!result97.AreEqual) {throw new Exception(\"Exception --- test case 96 failed to pass\");}\n\n            var actual98 = Add(392,455);\n            var expected98 = 847;\n            var result98 = compareLogic.Compare(actual98, expected98);\n            if (!result98.AreEqual) {throw new Exception(\"Exception --- test case 97 failed to pass\");}\n\n            var actual99 = Add(446,477);\n            var expected99 = 923;\n            var result99 = compareLogic.Compare(actual99, expected99);\n            if (!result99.AreEqual) {throw new Exception(\"Exception --- test case 98 failed to pass\");}\n\n            var actual100 = Add(324,860);\n            var expected100 = 1184;\n            var result100 = compareLogic.Compare(actual100, expected100);\n            if (!result100.AreEqual) {throw new Exception(\"Exception --- test case 99 failed to pass\");}\n\n            var actual101 = Add(945,85);\n            var expected101 = 1030;\n            var result101 = compareLogic.Compare(actual101, expected101);\n            if (!result101.AreEqual) {throw new Exception(\"Exception --- test case 100 failed to pass\");}\n\n            var actual102 = Add(886,582);\n            var expected102 = 1468;\n            var result102 = compareLogic.Compare(actual102, expected102);\n            if (!result102.AreEqual) {throw new Exception(\"Exception --- test case 101 failed to pass\");}\n\n            var actual103 = Add(886,712);\n            var expected103 = 1598;\n            var result103 = compareLogic.Compare(actual103, expected103);\n            if (!result103.AreEqual) {throw new Exception(\"Exception --- test case 102 failed to pass\");}\n\n            var actual104 = Add(842,953);\n            var expected104 = 1795;\n            var result104 = compareLogic.Compare(actual104, expected104);\n            if (!result104.AreEqual) {throw new Exception(\"Exception --- test case 103 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Добавить два числа x и y.", "entry_point": "Add", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/20", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Проверить, имеют ли два слова одинаковые символы.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars (string s0, string s1) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddeddabc\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SameChars(\"abcd\",\"dddddddabc\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SameChars(\"dddddddabc\",\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SameChars(\"eabcd\",\"dddddddabc\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SameChars(\"abcd\",\"dddddddabcf\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SameChars(\"eabcdzzzz\",\"dddzzzzzzzddddabc\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SameChars(\"aabb\",\"aaccc\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Проверить, имеют ли два слова одинаковые символы.", "entry_point": "SameChars", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/21", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть n-ое число Фибоначчи.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fib(10);\n            var expected1 = 55;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fib(1);\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fib(8);\n            var expected3 = 21;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fib(11);\n            var expected4 = 89;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fib(12);\n            var expected5 = 144;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть n-ое число Фибоначчи.", "entry_point": "Fib", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/22", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть отсортированные уникальные общие элементы для двух списков.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// \n        /// </summary>\n        public static List<int> Common (List<int> l1, List<int> l2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Common(new List<int> {1,4,3,34,653,2,5},new List<int> {5,7,1,5,9,653,121});\n            var expected1 = new List<int> {1,5,653};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Common(new List<int> {5,3,2,8},new List<int> {3,2});\n            var expected2 = new List<int> {2,3};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Common(new List<int> {4,3,2,8},new List<int> {3,2,4});\n            var expected3 = new List<int> {2,3,4};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Common(new List<int> {4,3,2,8},new List<int> {});\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть отсортированные уникальные общие элементы для двух списков.", "entry_point": "Common", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/23", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вернуть наибольший простой множитель n. Предполагается, что n > 1 и не является простым числом.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// </summary>\n        public static int LargestPrimeFactor (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestPrimeFactor(15);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestPrimeFactor(27);\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestPrimeFactor(63);\n            var expected3 = 7;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestPrimeFactor(330);\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestPrimeFactor(13195);\n            var expected5 = 29;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вернуть наибольший простой множитель n. Предполагается, что n > 1 и не является простым числом.", "entry_point": "LargestPrimeFactor", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/24", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// SumToN - это функция, которая суммирует числа от 1 до n.\n        /// >>> SumToN(30)\n        /// 465\n        /// >>> SumToN(100)\n        /// 5050\n        /// >>> SumToN(5)\n        /// 15\n        /// >>> SumToN(10)\n        /// 55\n        /// >>> SumToN(1)\n        /// 1\n        /// \n        /// </summary>\n        public static int SumToN (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumToN(1);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumToN(6);\n            var expected2 = 21;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumToN(11);\n            var expected3 = 66;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumToN(30);\n            var expected4 = 465;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumToN(100);\n            var expected5 = 5050;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "sum_to_n - это функция, которая суммирует числа от 1 до n.", "entry_point": "SumToN", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/25", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// xs представляют коэффициенты многочлена.\n        ///     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        ///      Вернуть производную этого многочлена в том же виде.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative (List<int> xs) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Derivative(new List<int> {3,1,2,4,5});\n            var expected1 = new List<int> {1,4,12,20};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Derivative(new List<int> {1,2,3});\n            var expected2 = new List<int> {2,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Derivative(new List<int> {3,2,1});\n            var expected3 = new List<int> {2,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Derivative(new List<int> {3,2,1,0,4});\n            var expected4 = new List<int> {2,2,0,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Derivative(new List<int> {1});\n            var expected5 = new List<int> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "xs представляют коэффициенты многочлена.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Вернуть производную этого многочлена в том же виде.", "entry_point": "Derivative", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/26", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Последовательность чисел ФибФиб - это последовательность, аналогичная последовательности Фибоначчи, которая определяется следующим образом:\n        ///     Fibfib(0) == 0\n        ///     Fibfib(1) == 0\n        ///     Fibfib(2) == 1\n        ///     Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        ///     Пожалуйста, напишите функцию для эффективного вычисления n-го элемента последовательности чисел ФибФиб.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Fibfib(2);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Fibfib(1);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Fibfib(5);\n            var expected3 = 4;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Fibfib(8);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Fibfib(10);\n            var expected5 = 81;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Fibfib(12);\n            var expected6 = 274;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Fibfib(14);\n            var expected7 = 927;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Последовательность чисел ФибФиб - это последовательность, аналогичная последовательности Фибоначчи, которая определяется следующим образом:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Пожалуйста, напишите функцию для эффективного вычисления n-го элемента последовательности чисел ФибФиб.", "entry_point": "Fibfib", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/27", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Напишите функцию VowelsCount, которая принимает в качестве входных данных строку, представляющую слово, и возвращает количество гласных в строке. Гласные в этом случае - 'a', 'e', 'i', 'o', 'u'. Здесь 'y' также является гласной, но только когда она находится в конце данного слова.\n        /// \n        /// Пример:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = VowelsCount(\"abcde\");\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = VowelsCount(\"Alone\");\n            var expected2 = 3;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = VowelsCount(\"key\");\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = VowelsCount(\"bye\");\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = VowelsCount(\"keY\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = VowelsCount(\"bYe\");\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = VowelsCount(\"ACEDY\");\n            var expected7 = 3;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию vowels_count, которая принимает в качестве входных данных строку, представляющую слово, и возвращает количество гласных в строке. Гласные в этом случае - 'a', 'e', 'i', 'o', 'u'. Здесь 'y' также является гласной, но только когда она находится в конце данного слова.\n\nПример:", "entry_point": "VowelsCount", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/28", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам дан непустой список положительных целых чисел. Верните наибольшее целое число, которое больше нуля и имеет частоту, большую или равную значению самого числа. Частота целого числа - это количество раз, которое оно появляется в списке. Если такого значения не существует, верните -1. Примеры:\n        /// \n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// </summary>\n        public static int Search (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Search(new List<int> {5,5,5,5,1});\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Search(new List<int> {4,1,4,1,4,4});\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Search(new List<int> {3,3});\n            var expected3 = -1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Search(new List<int> {8,8,8,8,8,8,8,8});\n            var expected4 = 8;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Search(new List<int> {2,3,3,2,2});\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Search(new List<int> {2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1});\n            var expected6 = 1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Search(new List<int> {3,2,8,2});\n            var expected7 = 2;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Search(new List<int> {6,7,1,8,8,10,5,8,5,3,10});\n            var expected8 = 1;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Search(new List<int> {8,8,3,6,5,6,4});\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Search(new List<int> {6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9});\n            var expected10 = 1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Search(new List<int> {1,9,10,1,3});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Search(new List<int> {6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10});\n            var expected12 = 5;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Search(new List<int> {1});\n            var expected13 = 1;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = Search(new List<int> {8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5});\n            var expected14 = 4;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = Search(new List<int> {2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10});\n            var expected15 = 2;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = Search(new List<int> {1,6,10,1,6,9,10,8,6,8,7,3});\n            var expected16 = 1;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n            var actual17 = Search(new List<int> {9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4});\n            var expected17 = 4;\n            var result17 = compareLogic.Compare(actual17, expected17);\n            if (!result17.AreEqual) {throw new Exception(\"Exception --- test case 16 failed to pass\");}\n\n            var actual18 = Search(new List<int> {2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7});\n            var expected18 = 4;\n            var result18 = compareLogic.Compare(actual18, expected18);\n            if (!result18.AreEqual) {throw new Exception(\"Exception --- test case 17 failed to pass\");}\n\n            var actual19 = Search(new List<int> {9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1});\n            var expected19 = 2;\n            var result19 = compareLogic.Compare(actual19, expected19);\n            if (!result19.AreEqual) {throw new Exception(\"Exception --- test case 18 failed to pass\");}\n\n            var actual20 = Search(new List<int> {5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8});\n            var expected20 = -1;\n            var result20 = compareLogic.Compare(actual20, expected20);\n            if (!result20.AreEqual) {throw new Exception(\"Exception --- test case 19 failed to pass\");}\n\n            var actual21 = Search(new List<int> {10});\n            var expected21 = -1;\n            var result21 = compareLogic.Compare(actual21, expected21);\n            if (!result21.AreEqual) {throw new Exception(\"Exception --- test case 20 failed to pass\");}\n\n            var actual22 = Search(new List<int> {9,7,7,2,4,7,2,10,9,7,5,7,2});\n            var expected22 = 2;\n            var result22 = compareLogic.Compare(actual22, expected22);\n            if (!result22.AreEqual) {throw new Exception(\"Exception --- test case 21 failed to pass\");}\n\n            var actual23 = Search(new List<int> {5,4,10,2,1,1,10,3,6,1,8});\n            var expected23 = 1;\n            var result23 = compareLogic.Compare(actual23, expected23);\n            if (!result23.AreEqual) {throw new Exception(\"Exception --- test case 22 failed to pass\");}\n\n            var actual24 = Search(new List<int> {7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6});\n            var expected24 = 1;\n            var result24 = compareLogic.Compare(actual24, expected24);\n            if (!result24.AreEqual) {throw new Exception(\"Exception --- test case 23 failed to pass\");}\n\n            var actual25 = Search(new List<int> {3,10,10,9,2});\n            var expected25 = -1;\n            var result25 = compareLogic.Compare(actual25, expected25);\n            if (!result25.AreEqual) {throw new Exception(\"Exception --- test case 24 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дан непустой список положительных целых чисел. Верните наибольшее целое число, которое больше нуля и имеет частоту, большую или равную значению самого числа. Частота целого числа - это количество раз, которое оно появляется в списке. Если такого значения не существует, верните -1. Примеры:", "entry_point": "Search", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/29", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Даны длины трех сторон треугольника. Вернуть площадь треугольника, округленную до 2 десятичных знаков, если три стороны образуют допустимый треугольник. В противном случае вернуть -1. Три стороны образуют допустимый треугольник, когда сумма любых двух сторон больше третьей стороны. Пример:\n        /// \n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea (int a, int b, int c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = TriangleArea(3,4,5);\n            var expected1 = 6.0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = TriangleArea(1,2,10);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = TriangleArea(4,8,5);\n            var expected3 = 8.18;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = TriangleArea(2,2,2);\n            var expected4 = 1.73;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = TriangleArea(1,2,3);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = TriangleArea(10,5,7);\n            var expected6 = 16.25;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = TriangleArea(2,6,3);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = TriangleArea(1,1,1);\n            var expected8 = 0.43;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = TriangleArea(2,2,10);\n            var expected9 = -1;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Даны длины трех сторон треугольника. Вернуть площадь треугольника, округленную до 2 десятичных знаков, если три стороны образуют допустимый треугольник. В противном случае вернуть -1. Три стороны образуют допустимый треугольник, когда сумма любых двух сторон больше третьей стороны. Пример:", "entry_point": "TriangleArea", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/30", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Напишите функцию, которая возвращает True, если объект q полетит, и False в противном случае. Объект q полетит, если он сбалансирован (является палиндромным списком) и сумма его элементов меньше или равна максимально возможному весу w.\n        /// \n        /// Пример:\n        /// WillItFly([1, 2], 5) ➞ False\n        /// # 1+2 меньше максимально возможного веса, но он несбалансирован.\n        /// \n        /// WillItFly([3, 2, 3], 1) ➞ False\n        /// # он сбалансирован, но 3+2+3 больше максимально возможного веса.\n        /// \n        /// WillItFly([3, 2, 3], 9) ➞ True\n        /// # 3+2+3 меньше максимально возможного веса, и он сбалансирован.\n        /// \n        /// WillItFly([3], 5) ➞ True\n        /// # 3 меньше максимально возможного веса, и он сбалансирован.\n        /// \n        /// \n        /// </summary>\n        public static bool WillItFly (List<int> q, int w) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WillItFly(new List<int> {3,2,3},9);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WillItFly(new List<int> {1,2},5);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WillItFly(new List<int> {3},5);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WillItFly(new List<int> {3,2,3},1);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WillItFly(new List<int> {1,2,3},6);\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WillItFly(new List<int> {5},5);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию, которая возвращает True, если объект q полетит, и False в противном случае. Объект q полетит, если он сбалансирован (является палиндромным списком) и сумма его элементов меньше или равна максимально возможному весу w.\n\nПример:\nwill_it_fly([1, 2], 5) ➞ False\n# 1+2 меньше максимально возможного веса, но он несбалансирован.\n\nwill_it_fly([3, 2, 3], 1) ➞ False\n# он сбалансирован, но 3+2+3 больше максимально возможного веса.\n\nwill_it_fly([3, 2, 3], 9) ➞ True\n# 3+2+3 меньше максимально возможного веса, и он сбалансирован.\n\nwill_it_fly([3], 5) ➞ True\n# 3 меньше максимально возможного веса, и он сбалансирован.", "entry_point": "WillItFly", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/31", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Напишите функцию, которая возвращает true, если данное число является произведением трех простых чисел, и false в противном случае. Известно, что (a) меньше 100. Пример:\n        /// \n        /// IsMultiplyPrime(30) == True\n        /// 30 = 2 * 3 * 5\n        /// \n        /// </summary>\n        public static bool IsMultiplyPrime (int a) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsMultiplyPrime(5);\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsMultiplyPrime(30);\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsMultiplyPrime(8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsMultiplyPrime(10);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsMultiplyPrime(125);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsMultiplyPrime(105);\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsMultiplyPrime(126);\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsMultiplyPrime(729);\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsMultiplyPrime(891);\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsMultiplyPrime(1001);\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию, которая возвращает true, если данное число является произведением трех простых чисел, и false в противном случае. Известно, что (a) меньше 100. Пример:", "entry_point": "IsMultiplyPrime", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/32", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам будет дано число в десятичной форме, и ваша задача - преобразовать его в двоичный формат. Функция должна возвращать строку, в которой каждый символ представляет двоичное число. Каждый символ в строке будет '0' или '1'.\n        /// \n        /// В начале и в конце строки будет дополнительная пара символов 'db'. Дополнительные символы нужны для форматирования.\n        /// \n        /// Примеры:\n        /// \n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary (int decimal) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DecimalToBinary(0);\n            var expected1 = \"db0db\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DecimalToBinary(32);\n            var expected2 = \"db100000db\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DecimalToBinary(103);\n            var expected3 = \"db1100111db\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DecimalToBinary(15);\n            var expected4 = \"db1111db\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам будет дано число в десятичной форме, и ваша задача - преобразовать его в двоичный формат. Функция должна возвращать строку, в которой каждый символ представляет двоичное число. Каждый символ в строке будет '0' или '1'.\n\nВ начале и в конце строки будет дополнительная пара символов 'db'. Дополнительные символы нужны для форматирования.\n\nПримеры:", "entry_point": "DecimalToBinary", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/33", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам дана строка s.\n        ///     Ваша задача - проверить, является ли строка счастливой или нет.\n        ///     Строка счастлива, если ее длина не менее 3 и каждые 3 последовательные буквы отличаются друг от друга.\n        ///     Например:\n        /// \n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsHappy(\"a\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsHappy(\"aa\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsHappy(\"abcd\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsHappy(\"aabb\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsHappy(\"adb\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsHappy(\"xyy\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsHappy(\"iopaxpoi\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsHappy(\"iopaxioi\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дана строка s.\n    Ваша задача - проверить, является ли строка счастливой или нет.\n    Строка счастлива, если ее длина не менее 3 и каждые 3 последовательные буквы отличаются друг от друга.\n    Например:", "entry_point": "IsHappy", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/34", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Это последняя неделя семестра, и учитель должен выставить оценки студентам. Учитель разработала свой алгоритм для оценки. Единственная проблема в том, что она потеряла код, который использовала для оценки. Она дала вам список средних баллов для некоторых студентов, и вам нужно написать функцию, которая может вывести список буквенных оценок, используя следующую таблицу:\n        /// \n        ///              Средний балл       |    Буквенная оценка\n        ///               4.0                A+\n        ///             > 3.7                A \n        ///             > 3.3                A- \n        ///             > 3.0                B+\n        ///             > 2.7                B \n        ///             > 2.3                B-\n        ///             > 2.0                C+\n        ///             > 1.7                C\n        ///             > 1.3                C-\n        ///             > 1.0                D+ \n        ///             > 0.7                D \n        ///             > 0.0                D-\n        ///               0.0                E\n        ///     \n        /// \n        ///     Пример:\n        /// \n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade (List<object> grades) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NumericalLetterGrade(new List<object> {4.0,3,1.7,2,3.5});\n            var expected1 = new List<string> {\"A+\",\"B\",\"C-\",\"C\",\"A-\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NumericalLetterGrade(new List<object> {1.2});\n            var expected2 = new List<string> {\"D+\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NumericalLetterGrade(new List<object> {0.5});\n            var expected3 = new List<string> {\"D-\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NumericalLetterGrade(new List<object> {0.0});\n            var expected4 = new List<string> {\"E\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NumericalLetterGrade(new List<object> {1,0.3,1.5,2.8,3.3});\n            var expected5 = new List<string> {\"D\",\"D-\",\"C-\",\"B\",\"B+\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NumericalLetterGrade(new List<object> {0,0.7});\n            var expected6 = new List<string> {\"E\",\"D-\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Это последняя неделя семестра, и учитель должен выставить оценки студентам. Учитель разработала свой алгоритм для оценки. Единственная проблема в том, что она потеряла код, который использовала для оценки. Она дала вам список средних баллов для некоторых студентов, и вам нужно написать функцию, которая может вывести список буквенных оценок, используя следующую таблицу:\n\n             Средний балл       |    Буквенная оценка\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Пример:", "entry_point": "NumericalLetterGrade", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/35", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Напишите функцию, которая принимает строку и возвращает True, если длина строки является простым числом, и False в противном случае. Примеры:\n        /// \n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = PrimeLength(\"Hello\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = PrimeLength(\"abcdcba\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = PrimeLength(\"kittens\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = PrimeLength(\"orange\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = PrimeLength(\"wow\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = PrimeLength(\"world\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = PrimeLength(\"MadaM\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = PrimeLength(\"Wow\");\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = PrimeLength(\"\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = PrimeLength(\"HI\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = PrimeLength(\"go\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = PrimeLength(\"gogo\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = PrimeLength(\"aaaaaaaaaaaaaaa\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = PrimeLength(\"Madam\");\n            var expected14 = true;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n            var actual15 = PrimeLength(\"M\");\n            var expected15 = false;\n            var result15 = compareLogic.Compare(actual15, expected15);\n            if (!result15.AreEqual) {throw new Exception(\"Exception --- test case 14 failed to pass\");}\n\n            var actual16 = PrimeLength(\"0\");\n            var expected16 = false;\n            var result16 = compareLogic.Compare(actual16, expected16);\n            if (!result16.AreEqual) {throw new Exception(\"Exception --- test case 15 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию, которая принимает строку и возвращает True, если длина строки является простым числом, и False в противном случае. Примеры:", "entry_point": "PrimeLength", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/36", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Дано положительное целое число N, вернуть общую сумму его цифр в двоичном виде.\n        /// \n        ///     Пример\n        ///         Для N = 1000 сумма цифр будет равна 1, вывод должен быть \"1\".\n        ///         Для N = 150 сумма цифр будет равна 6, вывод должен быть \"110\".\n        ///         Для N = 147 сумма цифр будет равна 12, вывод должен быть \"1100\".\n        ///     \n        ///     Переменные:\n        ///         @N целое число\n        ///              Ограничения: 0 ≤ N ≤ 10000.\n        ///     Вывод:\n        ///          строка двоичного числа\n        /// \n        /// \n        /// </summary>\n        public static string Solve (int N) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(1000);\n            var expected1 = \"1\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(150);\n            var expected2 = \"110\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(147);\n            var expected3 = \"1100\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(333);\n            var expected4 = \"1001\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(963);\n            var expected5 = \"10010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дано положительное целое число N, вернуть общую сумму его цифр в двоичном виде.\n\n    Пример\n        Для N = 1000 сумма цифр будет равна 1, вывод должен быть \"1\".\n        Для N = 150 сумма цифр будет равна 6, вывод должен быть \"110\".\n        Для N = 147 сумма цифр будет равна 12, вывод должен быть \"1100\".\n    \n    Переменные:\n        @N целое число\n             Ограничения: 0 ≤ N ≤ 10000.\n    Вывод:\n         строка двоичного числа", "entry_point": "Solve", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/37", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам даны двумерные данные в виде вложенных списков, которые похожи на матрицы, однако, в отличие от матриц, каждая строка может содержать разное количество столбцов. Дан список lst и целое число x, найдите целые числа x в списке и верните список кортежей [(x1, y1), (x2, y2) ...], таких что каждый кортеж является координатой - (строка, столбцы), начиная с 0. Сначала отсортируйте координаты по строкам в порядке возрастания. Также отсортируйте координаты строки по столбцам в порядке убывания.\n        /// \n        /// Примеры:\n        /// \n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<List<int>> GetRow (List<List<int>> lst, int x) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected1 = new List<List<int>> {new List<int> {0,0},new List<int> {1,4},new List<int> {1,0},new List<int> {2,5},new List<int> {2,0}};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6}},2);\n            var expected2 = new List<List<int>> {new List<int> {0,1},new List<int> {1,1},new List<int> {2,1},new List<int> {3,1},new List<int> {4,1},new List<int> {5,1}};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetRow(new List<List<int>> {new List<int> {1,2,3,4,5,6},new List<int> {1,2,3,4,5,6},new List<int> {1,1,3,4,5,6},new List<int> {1,2,1,4,5,6},new List<int> {1,2,3,1,5,6},new List<int> {1,2,3,4,1,6},new List<int> {1,2,3,4,5,1}},1);\n            var expected3 = new List<List<int>> {new List<int> {0,0},new List<int> {1,0},new List<int> {2,1},new List<int> {2,0},new List<int> {3,2},new List<int> {3,0},new List<int> {4,3},new List<int> {4,0},new List<int> {5,4},new List<int> {5,0},new List<int> {6,5},new List<int> {6,0}};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetRow(new List<List<int>> {},1);\n            var expected4 = new List<List<int>> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = GetRow(new List<List<int>> {new List<int> {1}},2);\n            var expected5 = new List<List<int>> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = GetRow(new List<List<int>> {new List<int> {},new List<int> {1},new List<int> {1,2,3}},3);\n            var expected6 = new List<List<int>> {new List<int> {2,2}};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам даны двумерные данные в виде вложенных списков, которые похожи на матрицы, однако, в отличие от матриц, каждая строка может содержать разное количество столбцов. Дан список lst и целое число x, найдите целые числа x в списке и верните список кортежей [(x1, y1), (x2, y2) ...], таких что каждый кортеж является координатой - (строка, столбцы), начиная с 0. Сначала отсортируйте координаты по строкам в порядке возрастания. Также отсортируйте координаты строки по столбцам в порядке убывания.\n\nПримеры:", "entry_point": "GetRow", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/38", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам дан список целых чисел.\n        /// Напишите функцию NextSmallest(), которая возвращает второй наименьший элемент списка.\n        /// Верните null, если такого элемента нет.\n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = NextSmallest(new List<int> {1,2,3,4,5});\n            var expected1 = 2;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = NextSmallest(new List<int> {5,1,4,3,2});\n            var expected2 = 2;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = NextSmallest(new List<int> {});\n            var expected3 = null;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = NextSmallest(new List<int> {1,1});\n            var expected4 = null;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = NextSmallest(new List<int> {1,1,1,1,0});\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = NextSmallest(new List<int> {1,1});\n            var expected6 = null;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = NextSmallest(new List<int> {-35,34,12,-45});\n            var expected7 = -35;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дан список целых чисел.\nНапишите функцию next_smallest(), которая возвращает второй наименьший элемент списка.\nВерните null, если такого элемента нет.", "entry_point": "NextSmallest", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/39", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам будет дана строка слов, и ваша задача - подсчитать количество скуки. Скука - это предложение, которое начинается со слова \"Я\". Предложения разделяются '.' , '?' или '!'.\n        /// \n        /// Например:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored (string S) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsBored(\"Hello world\");\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsBored(\"Is the sky blue?\");\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsBored(\"I love It !\");\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsBored(\"bIt\");\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsBored(\"I feel good today. I will be productive. will kill It\");\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsBored(\"You and I are going for a walk\");\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам будет дана строка слов, и ваша задача - подсчитать количество скуки. Скука - это предложение, которое начинается со слова \"Я\". Предложения разделяются '.' , '?' или '!'.\n\nНапример:", "entry_point": "IsBored", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/40", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// У вас есть список целых чисел.\n        ///     Вам нужно найти наибольшее простое значение и вернуть сумму его цифр.\n        /// \n        ///     Примеры:\n        /// \n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Skjkasdkd(new List<int> {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3});\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Skjkasdkd(new List<int> {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Skjkasdkd(new List<int> {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3});\n            var expected3 = 13;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Skjkasdkd(new List<int> {0,724,32,71,99,32,6,0,5,91,83,0,5,6});\n            var expected4 = 11;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Skjkasdkd(new List<int> {0,81,12,3,1,21});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Skjkasdkd(new List<int> {0,8,1,2,1,7});\n            var expected6 = 7;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Skjkasdkd(new List<int> {8191});\n            var expected7 = 19;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Skjkasdkd(new List<int> {8191,123456,127,7});\n            var expected8 = 19;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Skjkasdkd(new List<int> {127,97,8192});\n            var expected9 = 10;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "У вас есть список целых чисел.\n    Вам нужно найти наибольшее простое значение и вернуть сумму его цифр.\n\n    Примеры:", "entry_point": "Skjkasdkd", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/41", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дан словарь, вернуть True, если все ключи являются строками в нижнем регистре или все ключи являются строками в верхнем регистре, в противном случае вернуть False. Функция должна возвращать False, если данный словарь пуст. Примеры:\n        /// \n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase (Dictionary<object, string> dict) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"b\", \"banana\"}});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{\"A\", \"banana\"},{\"B\", \"banana\"}});\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckDictCase(new Dictionary<object, string> {{\"p\", \"pineapple\"},{5, \"banana\"},{\"a\", \"apple\"}});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckDictCase(new Dictionary<object, string> {{\"Name\", \"John\"},{\"Age\", \"36\"},{\"City\", \"Houston\"}});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckDictCase(new Dictionary<object, string> {{\"STATE\", \"NC\"},{\"ZIP\", \"12345\"}});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckDictCase(new Dictionary<object, string> {{\"fruit\", \"Orange\"},{\"taste\", \"Sweet\"}});\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckDictCase(new Dictionary<object, string> {});\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дан словарь, вернуть True, если все ключи являются строками в нижнем регистре или все ключи являются строками в верхнем регистре, в противном случае вернуть False. Функция должна возвращать False, если данный словарь пуст. Примеры:", "entry_point": "CheckDictCase", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/42", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Создайте функцию, которая принимает значение (строку), представляющую число, и возвращает ближайшее целое число к нему. Если число находится на равном расстоянии от двух целых чисел, округлите его в сторону от нуля.\n        /// \n        /// Примеры:\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger (string value) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ClosestInteger(\"10\");\n            var expected1 = 10;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ClosestInteger(\"14.5\");\n            var expected2 = 15;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ClosestInteger(\"-15.5\");\n            var expected3 = -16;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ClosestInteger(\"15.3\");\n            var expected4 = 15;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ClosestInteger(\"0\");\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Создайте функцию, которая принимает значение (строку), представляющую число, и возвращает ближайшее целое число к нему. Если число находится на равном расстоянии от двух целых чисел, округлите его в сторону от нуля.\n\nПримеры:", "entry_point": "ClosestInteger", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/43", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дано положительное целое число n, вы должны сделать кучу из n уровней камней.\n        ///     Первый уровень имеет n камней.\n        ///     Количество камней в следующем уровне равно:\n        ///         - следующее нечетное число, если n нечетное.\n        ///         - следующее четное число, если n четное.\n        ///     Вернуть количество камней в каждом уровне в виде списка, где элемент с индексом\n        ///     i представляет количество камней в уровне (i+1).\n        /// \n        ///     Примеры:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MakeAPile(3);\n            var expected1 = new List<int> {3,5,7};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MakeAPile(4);\n            var expected2 = new List<int> {4,6,8,10};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MakeAPile(5);\n            var expected3 = new List<int> {5,7,9,11,13};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MakeAPile(6);\n            var expected4 = new List<int> {6,8,10,12,14,16};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MakeAPile(8);\n            var expected5 = new List<int> {8,10,12,14,16,18,20,22};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дано положительное целое число n, вы должны сделать кучу из n уровней камней.\n    Первый уровень имеет n камней.\n    Количество камней в следующем уровне равно:\n        - следующее нечетное число, если n нечетное.\n        - следующее четное число, если n четное.\n    Вернуть количество камней в каждом уровне в виде списка, где элемент с индексом\n    i представляет количество камней в уровне (i+1).\n\n    Примеры:", "entry_point": "MakeAPile", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/44", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам будет дана строка слов, разделенных запятыми или пробелами. Ваша задача - разбить строку на слова и вернуть массив слов.\n        /// \n        /// Например:\n        /// \n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsString(\"Hi, my name is John\");\n            var expected1 = new List<string> {\"Hi\",\"my\",\"name\",\"is\",\"John\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsString(\"One, two, three, four, five, six\");\n            var expected2 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsString(\"Hi, my name\");\n            var expected3 = new List<string> {\"Hi\",\"my\",\"name\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsString(\"One,, two, three, four, five, six,\");\n            var expected4 = new List<string> {\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsString(\"\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsString(\"ahmed     , gamal\");\n            var expected6 = new List<string> {\"ahmed\",\"gamal\"};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам будет дана строка слов, разделенных запятыми или пробелами. Ваша задача - разбить строку на слова и вернуть массив слов.\n\nНапример:", "entry_point": "WordsString", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/45", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Эта функция принимает два положительных числа x и y и возвращает наибольшее четное целое число, которое находится в диапазоне [x, y], включительно. Если такого числа нет, то функция должна вернуть -1.\n        /// \n        /// Например:\n        /// \n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// </summary>\n        public static int ChooseNum (int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ChooseNum(12,15);\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ChooseNum(13,12);\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ChooseNum(33,12354);\n            var expected3 = 12354;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ChooseNum(5234,5233);\n            var expected4 = -1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ChooseNum(6,29);\n            var expected5 = 28;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ChooseNum(27,10);\n            var expected6 = -1;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ChooseNum(7,7);\n            var expected7 = -1;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ChooseNum(546,546);\n            var expected8 = 546;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Эта функция принимает два положительных числа x и y и возвращает наибольшее четное целое число, которое находится в диапазоне [x, y], включительно. Если такого числа нет, то функция должна вернуть -1.\n\nНапример:", "entry_point": "ChooseNum", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/46", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Даны два положительных целых числа n и m, и ваша задача - вычислить среднее значение целых чисел от n до m (включая n и m).\n        ///     Округлите ответ до ближайшего целого и преобразуйте его в двоичное число.\n        ///     Если n больше, чем m, верните -1.\n        ///     Пример:\n        /// \n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg (int n, int m) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RoundedAvg(1,5);\n            var expected1 = \"0b11\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RoundedAvg(7,13);\n            var expected2 = \"0b1010\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RoundedAvg(964,977);\n            var expected3 = \"0b1111001010\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RoundedAvg(996,997);\n            var expected4 = \"0b1111100100\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RoundedAvg(560,851);\n            var expected5 = \"0b1011000010\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RoundedAvg(185,546);\n            var expected6 = \"0b101101110\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RoundedAvg(362,496);\n            var expected7 = \"0b110101101\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RoundedAvg(350,902);\n            var expected8 = \"0b1001110010\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RoundedAvg(197,233);\n            var expected9 = \"0b11010111\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RoundedAvg(7,5);\n            var expected10 = -1;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RoundedAvg(5,1);\n            var expected11 = -1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = RoundedAvg(5,5);\n            var expected12 = \"0b101\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Даны два положительных целых числа n и m, и ваша задача - вычислить среднее значение целых чисел от n до m (включая n и m).\n    Округлите ответ до ближайшего целого и преобразуйте его в двоичное число.\n    Если n больше, чем m, верните -1.\n    Пример:", "entry_point": "RoundedAvg", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/47", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Реализуйте функцию F, которая принимает n в качестве параметра и возвращает список размера n, такой, что значение элемента с индексом i является факториалом i, если i четное, или суммой чисел от 1 до i в противном случае. i начинается с 1. Факториал i - это умножение чисел от 1 до i (1 * 2 * ... * i). Пример:\n        /// \n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = F(5);\n            var expected1 = new List<int> {1,2,6,24,15};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = F(7);\n            var expected2 = new List<int> {1,2,6,24,15,720,28};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = F(1);\n            var expected3 = new List<int> {1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = F(3);\n            var expected4 = new List<int> {1,2,6};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Реализуйте функцию f, которая принимает n в качестве параметра и возвращает список размера n, такой, что значение элемента с индексом i является факториалом i, если i четное, или суммой чисел от 1 до i в противном случае. i начинается с 1. Факториал i - это умножение чисел от 1 до i (1 * 2 * ... * i). Пример:", "entry_point": "F", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/48", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дано положительное целое число n, вернуть кортеж, который содержит количество четных и нечетных целых палиндромов, которые попадают в диапазон (1, n), включительно.\n        /// \n        ///     Пример 1:\n        /// \n        ///         Ввод: 3\n        ///         Вывод: (1, 2)\n        ///         Объяснение:\n        ///         Целые палиндромы - 1, 2, 3. Один из них четный, а два нечетных.\n        /// \n        ///     Пример 2:\n        /// \n        ///         Ввод: 12\n        ///         Вывод: (4, 6)\n        ///         Объяснение:\n        ///         Целые палиндромы - 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Четыре из них четные, а шесть нечетные.\n        /// \n        ///     Примечание:\n        ///         1. 1 <= n <= 10^3\n        ///         2. Возвращаемый кортеж содержит количество четных и нечетных целых палиндромов соответственно.\n        /// \n        /// \n        /// </summary>\n        public static List<int> EvenOddPalindrome (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = EvenOddPalindrome(123);\n            var expected1 = new List<int> {8,13};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = EvenOddPalindrome(12);\n            var expected2 = new List<int> {4,6};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = EvenOddPalindrome(3);\n            var expected3 = new List<int> {1,2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = EvenOddPalindrome(63);\n            var expected4 = new List<int> {6,8};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = EvenOddPalindrome(25);\n            var expected5 = new List<int> {5,6};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = EvenOddPalindrome(19);\n            var expected6 = new List<int> {4,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = EvenOddPalindrome(9);\n            var expected7 = new List<int> {4,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = EvenOddPalindrome(1);\n            var expected8 = new List<int> {0,1};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дано положительное целое число n, вернуть кортеж, который содержит количество четных и нечетных целых палиндромов, которые попадают в диапазон (1, n), включительно.\n\n    Пример 1:\n\n        Ввод: 3\n        Вывод: (1, 2)\n        Объяснение:\n        Целые палиндромы - 1, 2, 3. Один из них четный, а два нечетных.\n\n    Пример 2:\n\n        Ввод: 12\n        Вывод: (4, 6)\n        Объяснение:\n        Целые палиндромы - 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Четыре из них четные, а шесть нечетные.\n\n    Примечание:\n        1. 1 <= n <= 10^3\n        2. Возвращаемый кортеж содержит количество четных и нечетных целых палиндромов соответственно.", "entry_point": "EvenOddPalindrome", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/49", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// У нас есть массив 'arr' из N целых чисел arr[1], arr[2], ..., arr[N]. Числа в массиве будут случайно упорядочены. Ваша задача - определить, можно ли получить массив, упорядоченный в неубывающем порядке, выполнив следующую операцию над данным массивом:\n        ///         Вы можете выполнять операцию сдвига вправо любое количество раз.\n        ///     \n        ///     Одна операция сдвига вправо означает сдвиг всех элементов массива на одну позицию вправо. Последний элемент массива будет перемещен на начальную позицию в массиве, т.е. на 0-й индекс. \n        /// \n        ///     Если возможно получить упорядоченный массив, выполнив вышеуказанную операцию, то верните True, иначе верните False.\n        ///     Если данный массив пуст, верните True.\n        /// \n        ///     Примечание: данный список гарантированно имеет уникальные элементы.\n        /// \n        ///     Например:\n        ///     \n        ///     MoveOneBall([3, 4, 5, 1, 2])==>True\n        ///     Объяснение: выполнив 2 операции сдвига вправо, можно достичь неубывающего порядка для данного массива.\n        ///     MoveOneBall([3, 5, 4, 1, 2])==>False\n        ///     Объяснение: невозможно получить неубывающий порядок для данного массива, выполнив любое количество операций сдвига вправо.\n        /// \n        /// \n        /// \n        /// </summary>\n        public static bool MoveOneBall (List<int> arr) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MoveOneBall(new List<int> {3,4,5,1,2});\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MoveOneBall(new List<int> {3,5,10,1,2});\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MoveOneBall(new List<int> {4,3,1,2});\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MoveOneBall(new List<int> {3,5,4,1,2});\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MoveOneBall(new List<int> {});\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "У нас есть массив 'arr' из N целых чисел arr[1], arr[2], ..., arr[N]. Числа в массиве будут случайно упорядочены. Ваша задача - определить, можно ли получить массив, упорядоченный в неубывающем порядке, выполнив следующую операцию над данным массивом:\n        Вы можете выполнять операцию сдвига вправо любое количество раз.\n    \n    Одна операция сдвига вправо означает сдвиг всех элементов массива на одну позицию вправо. Последний элемент массива будет перемещен на начальную позицию в массиве, т.е. на 0-й индекс. \n\n    Если возможно получить упорядоченный массив, выполнив вышеуказанную операцию, то верните True, иначе верните False.\n    Если данный массив пуст, верните True.\n\n    Примечание: данный список гарантированно имеет уникальные элементы.\n\n    Например:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Объяснение: выполнив 2 операции сдвига вправо, можно достичь неубывающего порядка для данного массива.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Объяснение: невозможно получить неубывающий порядок для данного массива, выполнив любое количество операций сдвига вправо.", "entry_point": "MoveOneBall", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/50", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// В этой задаче вы реализуете функцию, которая принимает два списка чисел и определяет, возможно ли выполнить обмен элементами между ними, чтобы lst1 стал списком только четных чисел. Нет ограничений на количество обменяемых элементов между lst1 и lst2. Если возможно обменять элементы между lst1 и lst2, чтобы все элементы lst1 были четными, верните \"YES\". В противном случае верните \"NO\". Например: Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Предполагается, что входные списки будут непустыми.\n        /// \n        /// \n        /// </summary>\n        public static string Exchange (List<int> lst1, List<int> lst2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Exchange(new List<int> {1,2,3,4},new List<int> {1,2,3,4});\n            var expected1 = \"YES\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Exchange(new List<int> {1,2,3,4},new List<int> {1,5,3,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Exchange(new List<int> {1,2,3,4},new List<int> {2,1,4,3});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Exchange(new List<int> {5,7,3},new List<int> {2,6,4});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Exchange(new List<int> {5,7,3},new List<int> {2,6,3});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Exchange(new List<int> {3,2,6,1,8,9},new List<int> {3,5,5,1,1,1});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Exchange(new List<int> {100,200},new List<int> {200,200});\n            var expected7 = \"YES\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "В этой задаче вы реализуете функцию, которая принимает два списка чисел и определяет, возможно ли выполнить обмен элементами между ними, чтобы lst1 стал списком только четных чисел. Нет ограничений на количество обменяемых элементов между lst1 и lst2. Если возможно обменять элементы между lst1 и lst2, чтобы все элементы lst1 были четными, верните \"YES\". В противном случае верните \"NO\". Например: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Предполагается, что входные списки будут непустыми.", "entry_point": "Exchange", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/51", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Задача\n        ///     Даны две строки s и c, необходимо удалить все символы в s, которые равны любому символу в c,\n        ///     затем проверить, является ли полученная строка палиндромом.\n        ///     Строка называется палиндромом, если она читается одинаково как слева направо, так и справа налево.\n        ///     Вы должны вернуть кортеж, содержащий полученную строку и True/False для проверки.\n        ///     Пример\n        ///     Для s = \"abcde\", c = \"ae\", результат должен быть ('bcd',False)\n        ///     Для s = \"abcdef\", c = \"b\" результат должен быть ('acdef',False)\n        ///     Для s = \"abcdedcba\", c = \"ab\", результат должен быть ('cdedc',True)\n        /// \n        /// \n        /// </summary>\n        public static List<object> ReverseDelete (string s, string c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = ReverseDelete(\"abcde\",\"ae\");\n            var expected1 = new List<object> {\"bcd\",false};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = ReverseDelete(\"abcdef\",\"b\");\n            var expected2 = new List<object> {\"acdef\",false};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = ReverseDelete(\"abcdedcba\",\"ab\");\n            var expected3 = new List<object> {\"cdedc\",true};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = ReverseDelete(\"dwik\",\"w\");\n            var expected4 = new List<object> {\"dik\",false};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = ReverseDelete(\"a\",\"a\");\n            var expected5 = new List<object> {\"\",true};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = ReverseDelete(\"abcdedcba\",\"\");\n            var expected6 = new List<object> {\"abcdedcba\",true};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = ReverseDelete(\"abcdedcba\",\"v\");\n            var expected7 = new List<object> {\"abcdedcba\",true};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = ReverseDelete(\"vabba\",\"v\");\n            var expected8 = new List<object> {\"abba\",true};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = ReverseDelete(\"mamma\",\"mia\");\n            var expected9 = new List<object> {\"\",true};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Задача\n    Даны две строки s и c, необходимо удалить все символы в s, которые равны любому символу в c,\n    затем проверить, является ли полученная строка палиндромом.\n    Строка называется палиндромом, если она читается одинаково как слева направо, так и справа налево.\n    Вы должны вернуть кортеж, содержащий полученную строку и True/False для проверки.\n    Пример\n    Для s = \"abcde\", c = \"ae\", результат должен быть ('bcd',False)\n    Для s = \"abcdef\", c = \"b\" результат должен быть ('acdef',False)\n    Для s = \"abcdedcba\", c = \"ab\", результат должен быть ('cdedc',True)", "entry_point": "ReverseDelete", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/52", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам дан прямоугольная сетка скважин. Каждая строка представляет собой одну скважину, а каждая единица в строке представляет собой одну единицу воды. У каждой скважины есть соответствующий ведро, которое можно использовать для извлечения воды из нее, и все ведра имеют одинаковую вместимость. Ваша задача - использовать ведра, чтобы опустошить скважины. Выведите количество раз, которое вам нужно опустить ведра.\n        /// \n        /// Пример 1:\n        ///     Ввод:\n        ///         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        ///         bucket_capacity: 1\n        ///     Вывод: 6\n        /// \n        /// Пример 2:\n        ///     Ввод:\n        ///         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        ///         bucket_capacity: 2\n        ///     Вывод: 5\n        /// \n        /// Пример 3:\n        ///     Ввод:\n        ///         grid: [[0,0,0], [0,0,0]]\n        ///         bucket_capacity: 5\n        ///     Вывод: 0\n        /// \n        /// Ограничения:\n        ///     * все скважины имеют одинаковую длину\n        ///     * 1 <= grid.length <= 10^2\n        ///     * 1 <= grid[:,1].length <= 10^2\n        ///     * grid[i][j] -> 0 | 1\n        ///     * 1 <= capacity <= 10\n        /// \n        /// \n        /// </summary>\n        public static int MaxFill (List<List<int>> grid, int capacity) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = MaxFill(new List<List<int>> {new List<int> {0,0,1,0},new List<int> {0,1,0,0},new List<int> {1,1,1,1}},1);\n            var expected1 = 6;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = MaxFill(new List<List<int>> {new List<int> {0,0,1,1},new List<int> {0,0,0,0},new List<int> {1,1,1,1},new List<int> {0,1,1,1}},2);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = MaxFill(new List<List<int>> {new List<int> {0,0,0},new List<int> {0,0,0}},5);\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},2);\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = MaxFill(new List<List<int>> {new List<int> {1,1,1,1},new List<int> {1,1,1,1}},9);\n            var expected5 = 2;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дан прямоугольная сетка скважин. Каждая строка представляет собой одну скважину, а каждая единица в строке представляет собой одну единицу воды. У каждой скважины есть соответствующий ведро, которое можно использовать для извлечения воды из нее, и все ведра имеют одинаковую вместимость. Ваша задача - использовать ведра, чтобы опустошить скважины. Выведите количество раз, которое вам нужно опустить ведра.\n\nПример 1:\n    Ввод:\n        grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        bucket_capacity: 1\n    Вывод: 6\n\nПример 2:\n    Ввод:\n        grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        bucket_capacity: 2\n    Вывод: 5\n\nПример 3:\n    Ввод:\n        grid: [[0,0,0], [0,0,0]]\n        bucket_capacity: 5\n    Вывод: 0\n\nОграничения:\n    * все скважины имеют одинаковую длину\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10", "entry_point": "MaxFill", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/53", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Дана строка s и натуральное число n. Вам поручено реализовать функцию, которая возвращает список всех слов из строки s, содержащих ровно n согласных букв, в порядке, в котором эти слова появляются в строке s. Если строка s пуста, то функция должна вернуть пустой список. Примечание: вы можете предположить, что входная строка содержит только буквы и пробелы. Примеры:\n        /// \n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords (string s, int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SelectWords(\"Mary had a little lamb\",4);\n            var expected1 = new List<string> {\"little\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SelectWords(\"Mary had a little lamb\",3);\n            var expected2 = new List<string> {\"Mary\",\"lamb\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SelectWords(\"simple white space\",2);\n            var expected3 = new List<string> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SelectWords(\"Hello world\",4);\n            var expected4 = new List<string> {\"world\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SelectWords(\"Uncle sam\",3);\n            var expected5 = new List<string> {\"Uncle\"};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SelectWords(\"\",4);\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SelectWords(\"a b c d e f\",1);\n            var expected7 = new List<string> {\"b\",\"c\",\"d\",\"f\"};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дана строка s и натуральное число n. Вам поручено реализовать функцию, которая возвращает список всех слов из строки s, содержащих ровно n согласных букв, в порядке, в котором эти слова появляются в строке s. Если строка s пуста, то функция должна вернуть пустой список. Примечание: вы можете предположить, что входная строка содержит только буквы и пробелы. Примеры:", "entry_point": "SelectWords", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/54", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дан массив arr целых чисел и положительное целое число k, вернуть отсортированный список длиной k с максимальными k числами в arr.\n        /// \n        ///     Пример 1:\n        /// \n        ///         Ввод: arr = [-3, -4, 5], k = 3\n        ///         Вывод: [-4, -3, 5]\n        /// \n        ///     Пример 2:\n        /// \n        ///         Ввод: arr = [4, -4, 4], k = 2\n        ///         Вывод: [4, 4]\n        /// \n        ///     Пример 3:\n        /// \n        ///         Ввод: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        ///         Вывод: [2]\n        /// \n        ///     Примечание:\n        ///         1. Длина массива будет в диапазоне [1, 1000].\n        ///         2. Элементы в массиве будут в диапазоне [-1000, 1000].\n        ///         3. 0 <= k <= len(arr)\n        /// \n        /// \n        /// </summary>\n        public static List<int> Maximum (List<int> arr, int k) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Maximum(new List<int> {-3,-4,5},3);\n            var expected1 = new List<int> {-4,-3,5};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Maximum(new List<int> {4,-4,4},2);\n            var expected2 = new List<int> {4,4};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Maximum(new List<int> {-3,2,1,2,-1,-2,1},1);\n            var expected3 = new List<int> {2};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Maximum(new List<int> {123,-123,20,0,1,2,-3},3);\n            var expected4 = new List<int> {2,20,123};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Maximum(new List<int> {-123,20,0,1,2,-3},4);\n            var expected5 = new List<int> {0,1,2,20};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Maximum(new List<int> {5,15,0,3,-13,-8,0},7);\n            var expected6 = new List<int> {-13,-8,0,0,3,5,15};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Maximum(new List<int> {-1,0,2,5,3,-10},2);\n            var expected7 = new List<int> {3,5};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Maximum(new List<int> {1,0,5,-7},1);\n            var expected8 = new List<int> {5};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Maximum(new List<int> {4,-4},2);\n            var expected9 = new List<int> {-4,4};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Maximum(new List<int> {-10,10},2);\n            var expected10 = new List<int> {-10,10};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Maximum(new List<int> {1,2,3,-23,243,-400,0},0);\n            var expected11 = new List<int> {};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дан массив arr целых чисел и положительное целое число k, вернуть отсортированный список длиной k с максимальными k числами в arr.\n\n    Пример 1:\n\n        Ввод: arr = [-3, -4, 5], k = 3\n        Вывод: [-4, -3, 5]\n\n    Пример 2:\n\n        Ввод: arr = [4, -4, 4], k = 2\n        Вывод: [4, 4]\n\n    Пример 3:\n\n        Ввод: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Вывод: [2]\n\n    Примечание:\n        1. Длина массива будет в диапазоне [1, 1000].\n        2. Элементы в массиве будут в диапазоне [-1000, 1000].\n        3. 0 <= k <= len(arr)", "entry_point": "Maximum", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/55", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дан непустой массив целых чисел arr и целое число k. Вернуть сумму элементов с не более чем двумя цифрами из первых k элементов arr.\n        /// \n        ///     Пример:\n        /// \n        ///         Ввод: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        ///         Вывод: 24 # сумма 21 + 3\n        /// \n        ///     Ограничения:\n        ///         1. 1 <= len(arr) <= 100\n        ///         2. 1 <= k <= len(arr)\n        /// \n        /// \n        /// </summary>\n        public static int AddElements (List<int> arr, int k) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = AddElements(new List<int> {1,-2,-3,41,57,76,87,88,99},3);\n            var expected1 = -4;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = AddElements(new List<int> {111,121,3,4000,5,6},2);\n            var expected2 = 0;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = AddElements(new List<int> {11,21,3,90,5,6,7,8,9},4);\n            var expected3 = 125;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = AddElements(new List<int> {111,21,3,4000,5,6,7,8,9},4);\n            var expected4 = 24;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = AddElements(new List<int> {1},1);\n            var expected5 = 1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дан непустой массив целых чисел arr и целое число k. Вернуть сумму элементов с не более чем двумя цифрами из первых k элементов arr.\n\n    Пример:\n\n        Ввод: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Вывод: 24 # сумма 21 + 3\n\n    Ограничения:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "entry_point": "AddElements", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/56", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Даны два интервала, каждый из которых представляет собой пару целых чисел. Например, интервал = (начало, конец) = (1, 2). Данные интервалы являются замкнутыми, что означает, что интервал (начало, конец) включает в себя и начало, и конец. Для каждого данного интервала предполагается, что его начало меньше или равно его концу. Ваша задача - определить, является ли длина пересечения этих двух интервалов простым числом. Например, пересечение интервалов (1, 3), (2, 4) равно (2, 3), длина которого равна 1, что не является простым числом. Если длина пересечения является простым числом, вернуть \"YES\", в противном случае вернуть \"NO\". Если два интервала не пересекаются, вернуть \"NO\".\n        /// \n        /// [ввод/вывод] примеры:\n        /// \n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection (List<int> interval1, List<int> interval2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Intersection(new List<int> {1,2},new List<int> {2,3});\n            var expected1 = \"NO\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Intersection(new List<int> {-1,1},new List<int> {0,4});\n            var expected2 = \"NO\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Intersection(new List<int> {-3,-1},new List<int> {-5,5});\n            var expected3 = \"YES\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Intersection(new List<int> {-2,2},new List<int> {-4,0});\n            var expected4 = \"YES\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Intersection(new List<int> {-11,2},new List<int> {-1,-1});\n            var expected5 = \"NO\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Intersection(new List<int> {1,2},new List<int> {3,5});\n            var expected6 = \"NO\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Intersection(new List<int> {1,2},new List<int> {1,2});\n            var expected7 = \"NO\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Intersection(new List<int> {-2,-2},new List<int> {-3,-2});\n            var expected8 = \"NO\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Даны два интервала, каждый из которых представляет собой пару целых чисел. Например, интервал = (начало, конец) = (1, 2). Данные интервалы являются замкнутыми, что означает, что интервал (начало, конец) включает в себя и начало, и конец. Для каждого данного интервала предполагается, что его начало меньше или равно его концу. Ваша задача - определить, является ли длина пересечения этих двух интервалов простым числом. Например, пересечение интервалов (1, 3), (2, 4) равно (2, 3), длина которого равна 1, что не является простым числом. Если длина пересечения является простым числом, вернуть \"YES\", в противном случае вернуть \"NO\". Если два интервала не пересекаются, вернуть \"NO\".\n\n[ввод/вывод] примеры:", "entry_point": "Intersection", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/57", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Каждый знает последовательность Фибоначчи, которая была глубоко изучена математиками в последние пару столетий. Однако то, чего люди не знают, это последовательность Трибоначчи. Последовательность Трибоначчи определяется рекуррентностью:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 + n / 2, если n четное.\n        /// Tri(n) = Tri(n - 1) + Tri(n - 2) + Tri(n + 1), если n нечетное.\n        /// Например:\n        /// Tri(2) = 1 + (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        /// = 2 + 3 + 3 = 8\n        /// Вам дано неотрицательное целое число n, вы должны вернуть список первых n + 1 чисел последовательности Трибоначчи.\n        /// Примеры:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// \n        /// \n        /// </summary>\n        public static List<object> Tri (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Tri(3);\n            var expected1 = new List<object> {1,3,2.0,8.0};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Tri(4);\n            var expected2 = new List<object> {1,3,2.0,8.0,3.0};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Tri(5);\n            var expected3 = new List<object> {1,3,2.0,8.0,3.0,15.0};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Tri(6);\n            var expected4 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Tri(7);\n            var expected5 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Tri(8);\n            var expected6 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Tri(9);\n            var expected7 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Tri(20);\n            var expected8 = new List<object> {1,3,2.0,8.0,3.0,15.0,4.0,24.0,5.0,35.0,6.0,48.0,7.0,63.0,8.0,80.0,9.0,99.0,10.0,120.0,11.0};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Tri(0);\n            var expected9 = new List<object> {1};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Tri(1);\n            var expected10 = new List<object> {1,3};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Каждый знает последовательность Фибоначчи, которая была глубоко изучена математиками в последние пару столетий. Однако то, чего люди не знают, это последовательность Трибоначчи. Последовательность Трибоначчи определяется рекуррентностью:\ntri(1) = 3\ntri(n) = 1 + n / 2, если n четное.\ntri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), если n нечетное.\nНапример:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nВам дано неотрицательное целое число n, вы должны вернуть список первых n + 1 чисел последовательности Трибоначчи.\nПримеры:\ntri(3) = [1, 3, 2, 8]", "entry_point": "Tri", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/58", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Дано положительное целое число n, вернуть произведение нечетных цифр.\n        ///     Вернуть 0, если все цифры четные.\n        ///     Например:\n        /// \n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Digits(5);\n            var expected1 = 5;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Digits(54);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Digits(120);\n            var expected3 = 1;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Digits(5014);\n            var expected4 = 5;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Digits(98765);\n            var expected5 = 315;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Digits(5576543);\n            var expected6 = 2625;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Digits(2468);\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дано положительное целое число n, вернуть произведение нечетных цифр.\n    Вернуть 0, если все цифры четные.\n    Например:", "entry_point": "Digits", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/59", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Создайте функцию, которая принимает строку в качестве входных данных, содержащую только квадратные скобки. Функция должна возвращать True только в том случае, если существует допустимая подпоследовательность скобок, где хотя бы одна скобка вложена.\n        /// IsNested('[[]]') ➞ True\n        /// IsNested('[]]]]]]][[[[[]') ➞ False\n        /// IsNested('[][]') ➞ False\n        /// IsNested('[]') ➞ False\n        /// IsNested('[[][]]') ➞ True\n        /// IsNested('[[]][[') ➞ True\n        /// \n        /// </summary>\n        public static bool IsNested (string string0) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IsNested(\"[[]]\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IsNested(\"[]]]]]]][[[[[]\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IsNested(\"[][]\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IsNested(\"[]\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IsNested(\"[[[[]]]]\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IsNested(\"[]]]]]]]]]]\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IsNested(\"[][][[]]\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IsNested(\"[[]\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IsNested(\"[]]\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IsNested(\"[[]][[\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IsNested(\"[[][]]\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IsNested(\"\");\n            var expected12 = false;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IsNested(\"[[[[[[[[\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IsNested(\"]]]]]]]]\");\n            var expected14 = false;\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Создайте функцию, которая принимает строку в качестве входных данных, содержащую только квадратные скобки. Функция должна возвращать True только в том случае, если существует допустимая подпоследовательность скобок, где хотя бы одна скобка вложена.", "entry_point": "IsNested", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/60", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам дан список чисел.\n        /// Вам нужно вернуть сумму квадратов чисел в данном списке,\n        /// округлить каждый элемент в списке до ближайшего целого числа (в большую сторону).\n        /// Примеры:\n        /// Для lst = [1,2,3] вывод должен быть 14\n        /// Для lst = [1,4,9] вывод должен быть 98\n        /// Для lst = [1,3,5,7] вывод должен быть 84\n        /// Для lst = [1.4,4.2,0] вывод должен быть 29\n        /// Для lst = [-2.4,1,1] вывод должен быть 6\n        /// \n        /// \n        /// \n        /// \n        /// </summary>\n        public static int SumSquares (List<object> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SumSquares(new List<object> {1,2,3});\n            var expected1 = 14;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SumSquares(new List<object> {1.0,2,3});\n            var expected2 = 14;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SumSquares(new List<object> {1,3,5,7});\n            var expected3 = 84;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SumSquares(new List<object> {1.4,4.2,0});\n            var expected4 = 29;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SumSquares(new List<object> {-2.4,1,1});\n            var expected5 = 6;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SumSquares(new List<object> {100,1,15,2});\n            var expected6 = 10230;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SumSquares(new List<object> {10000,10000});\n            var expected7 = 200000000;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = SumSquares(new List<object> {-1.4,4.6,6.3});\n            var expected8 = 75;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = SumSquares(new List<object> {-1.4,17.9,18.9,19.9});\n            var expected9 = 1086;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = SumSquares(new List<object> {0});\n            var expected10 = 0;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = SumSquares(new List<object> {-1});\n            var expected11 = 1;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = SumSquares(new List<object> {-1,1,0});\n            var expected12 = 2;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дан список чисел.\nВам нужно вернуть сумму квадратов чисел в данном списке,\nокруглить каждый элемент в списке до ближайшего целого числа (в большую сторону).\nПримеры:\nДля lst = [1,2,3] вывод должен быть 14\nДля lst = [1,4,9] вывод должен быть 98\nДля lst = [1,3,5,7] вывод должен быть 84\nДля lst = [1.4,4.2,0] вывод должен быть 29\nДля lst = [-2.4,1,1] вывод должен быть 6", "entry_point": "SumSquares", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/61", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Создайте функцию, которая возвращает True, если последний символ заданной строки является буквенным символом и не является частью слова, и False в противном случае. Примечание: \"слово\" - это группа символов, разделенных пробелом.\n        /// \n        /// Примеры:\n        /// \n        /// CheckIfLastCharIsALetter(\"apple pie\") ➞ False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") ➞ True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") ➞ False\n        /// CheckIfLastCharIsALetter(\"\") ➞ False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter (string txt) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CheckIfLastCharIsALetter(\"apple\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CheckIfLastCharIsALetter(\"apple pi e\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CheckIfLastCharIsALetter(\"eeeee\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CheckIfLastCharIsALetter(\"A\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CheckIfLastCharIsALetter(\"Pumpkin pie \");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CheckIfLastCharIsALetter(\"Pumpkin pie 1\");\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = CheckIfLastCharIsALetter(\"\");\n            var expected7 = false;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = CheckIfLastCharIsALetter(\"eeeee e \");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = CheckIfLastCharIsALetter(\"apple pie\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = CheckIfLastCharIsALetter(\"apple pi e \");\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Создайте функцию, которая возвращает True, если последний символ заданной строки является буквенным символом и не является частью слова, и False в противном случае. Примечание: \"слово\" - это группа символов, разделенных пробелом.\n\nПримеры:", "entry_point": "CheckIfLastCharIsALetter", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/62", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Создайте функцию, которая возвращает наибольший индекс элемента, который не больше или равен элементу, непосредственно предшествующему ему. Если такого элемента не существует, верните -1. Данный массив не будет содержать повторяющихся значений.\n        /// \n        /// Примеры:\n        /// \n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange (List<int> arr) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CanArrange(new List<int> {1,2,4,3,5});\n            var expected1 = 3;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CanArrange(new List<int> {1,2,4,5});\n            var expected2 = -1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CanArrange(new List<int> {1,4,2,5,6,7,8,9,10});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CanArrange(new List<int> {4,8,5,7,3});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CanArrange(new List<int> {});\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Создайте функцию, которая возвращает наибольший индекс элемента, который не больше или равен элементу, непосредственно предшествующему ему. Если такого элемента не существует, верните -1. Данный массив не будет содержать повторяющихся значений.\n\nПримеры:", "entry_point": "CanArrange", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/63", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Создайте функцию, которая возвращает кортеж (a, b), где 'a' - наибольшее из отрицательных целых чисел, а 'b' - наименьшее из положительных целых чисел в списке. Если нет отрицательных или положительных целых чисел, верните их как None.\n        /// \n        /// Примеры:\n        /// \n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static List<object> LargestSmallestIntegers (List<int> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7});\n            var expected1 = new List<object> {null,1};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = LargestSmallestIntegers(new List<int> {2,4,1,3,5,7,0});\n            var expected2 = new List<object> {null,1};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = LargestSmallestIntegers(new List<int> {1,3,2,4,5,6,-2});\n            var expected3 = new List<object> {-2,1};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = LargestSmallestIntegers(new List<int> {4,5,3,6,2,7,-7});\n            var expected4 = new List<object> {-7,2};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = LargestSmallestIntegers(new List<int> {7,3,8,4,9,2,5,-9});\n            var expected5 = new List<object> {-9,2};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = LargestSmallestIntegers(new List<int> {});\n            var expected6 = new List<object> {null,null};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = LargestSmallestIntegers(new List<int> {0});\n            var expected7 = new List<object> {null,null};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6});\n            var expected8 = new List<object> {-1,null};\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = LargestSmallestIntegers(new List<int> {-1,-3,-5,-6,0});\n            var expected9 = new List<object> {-1,null};\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,1});\n            var expected10 = new List<object> {-3,1};\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = LargestSmallestIntegers(new List<int> {-6,-4,-4,-3,-100,1});\n            var expected11 = new List<object> {-3,1};\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Создайте функцию, которая возвращает кортеж (a, b), где 'a' - наибольшее из отрицательных целых чисел, а 'b' - наименьшее из положительных целых чисел в списке. Если нет отрицательных или положительных целых чисел, верните их как None.\n\nПримеры:", "entry_point": "LargestSmallestIntegers", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/64", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Факториал Бразилии определяется как:\n        ///     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        ///     где n > 0\n        /// \n        ///     Например:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFactorial(4);\n            var expected1 = 288;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFactorial(5);\n            var expected2 = 34560;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFactorial(7);\n            var expected3 = 125411328000;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFactorial(1);\n            var expected4 = 1;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Факториал Бразилии определяется как:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    где n > 0\n\n    Например:", "entry_point": "SpecialFactorial", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/65", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Вам дана строка, представляющая предложение,\n        ///     предложение содержит некоторые слова, разделенные пробелом,\n        ///     и вы должны вернуть строку, которая содержит слова из исходного предложения,\n        ///     длины которых являются простыми числами,\n        ///     порядок слов в новой строке должен быть таким же, как в исходной.\n        /// \n        ///     Пример 1:\n        ///         Ввод: sentence = \"This is a test\"\n        ///         Вывод: \"is\"\n        /// \n        ///     Пример 2:\n        ///         Ввод: sentence = \"lets go for swimming\"\n        ///         Вывод: \"go for\"\n        /// \n        ///     Ограничения:\n        ///         * 1 <= len(sentence) <= 100\n        ///         * предложение содержит только буквы\n        /// \n        /// \n        /// </summary>\n        public static string WordsInSentence (string sentence) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = WordsInSentence(\"This is a test\");\n            var expected1 = \"is\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = WordsInSentence(\"lets go for swimming\");\n            var expected2 = \"go for\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = WordsInSentence(\"there is no place available here\");\n            var expected3 = \"there is no place\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = WordsInSentence(\"Hi I am Hussein\");\n            var expected4 = \"Hi am Hussein\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = WordsInSentence(\"go for it\");\n            var expected5 = \"go for it\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = WordsInSentence(\"here\");\n            var expected6 = \"\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = WordsInSentence(\"here is\");\n            var expected7 = \"is\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дана строка, представляющая предложение,\n    предложение содержит некоторые слова, разделенные пробелом,\n    и вы должны вернуть строку, которая содержит слова из исходного предложения,\n    длины которых являются простыми числами,\n    порядок слов в новой строке должен быть таким же, как в исходной.\n\n    Пример 1:\n        Ввод: sentence = \"This is a test\"\n        Вывод: \"is\"\n\n    Пример 2:\n        Ввод: sentence = \"lets go for swimming\"\n        Вывод: \"go for\"\n\n    Ограничения:\n        * 1 <= len(sentence) <= 100\n        * предложение содержит только буквы", "entry_point": "WordsInSentence", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/66", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Ваша задача - реализовать функцию, которая упростит выражение x * n. Функция возвращает True, если x * n вычисляется как целое число, и False в противном случае. Оба x и n являются строковым представлением дроби и имеют следующий формат, <числитель>/<знаменатель>, где и числитель, и знаменатель являются положительными целыми числами.\n        /// \n        /// Вы можете предположить, что x и n являются допустимыми дробями и не имеют нуля в знаменателе.\n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify (string x, string n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Simplify(\"1/5\",\"5/1\");\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Simplify(\"1/6\",\"2/1\");\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Simplify(\"5/1\",\"3/1\");\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Simplify(\"7/10\",\"10/2\");\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Simplify(\"2/10\",\"50/10\");\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Simplify(\"7/2\",\"4/2\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Simplify(\"11/6\",\"6/1\");\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Simplify(\"2/3\",\"5/2\");\n            var expected8 = false;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = Simplify(\"5/2\",\"3/5\");\n            var expected9 = false;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = Simplify(\"2/4\",\"8/4\");\n            var expected10 = true;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = Simplify(\"2/4\",\"4/2\");\n            var expected11 = true;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = Simplify(\"1/5\",\"5/1\");\n            var expected12 = true;\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = Simplify(\"1/5\",\"1/5\");\n            var expected13 = false;\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Ваша задача - реализовать функцию, которая упростит выражение x * n. Функция возвращает True, если x * n вычисляется как целое число, и False в противном случае. Оба x и n являются строковым представлением дроби и имеют следующий формат, <числитель>/<знаменатель>, где и числитель, и знаменатель являются положительными целыми числами.\n\nВы можете предположить, что x и n являются допустимыми дробями и не имеют нуля в знаменателе.", "entry_point": "Simplify", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/67", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Напишите функцию, которая сортирует заданный список целых чисел в порядке возрастания суммы их цифр. Обратите внимание: если есть несколько элементов с похожей суммой цифр, упорядочьте их на основе их индекса в исходном списке.\n        /// \n        /// Например:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints (List<int> nums) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = OrderByPoints(new List<int> {1,11,-1,-11,-12});\n            var expected1 = new List<int> {-1,-11,1,-12,11};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = OrderByPoints(new List<int> {1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46});\n            var expected2 = new List<int> {0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = OrderByPoints(new List<int> {});\n            var expected3 = new List<int> {};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = OrderByPoints(new List<int> {1,-11,-32,43,54,-98,2,-3});\n            var expected4 = new List<int> {-3,-32,-98,-11,1,2,43,54};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = OrderByPoints(new List<int> {1,2,3,4,5,6,7,8,9,10,11});\n            var expected5 = new List<int> {1,10,2,11,3,4,5,6,7,8,9};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = OrderByPoints(new List<int> {0,6,6,-76,-21,23,4});\n            var expected6 = new List<int> {-76,-21,0,4,23,6,6};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию, которая сортирует заданный список целых чисел в порядке возрастания суммы их цифр. Обратите внимание: если есть несколько элементов с похожей суммой цифр, упорядочьте их на основе их индекса в исходном списке.\n\nНапример:", "entry_point": "OrderByPoints", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/68", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Напишите функцию, которая принимает массив чисел в качестве входных данных и возвращает количество элементов в массиве, которые больше 10 и у которых первая и последняя цифры числа нечетные (1, 3, 5, 7, 9). Например:\n        /// \n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter (List<int> nums) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = SpecialFilter(new List<int> {5,-2,1,-5});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = SpecialFilter(new List<int> {15,-73,14,-15});\n            var expected2 = 1;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = SpecialFilter(new List<int> {33,-2,-3,45,21,109});\n            var expected3 = 2;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = SpecialFilter(new List<int> {43,-12,93,125,121,109});\n            var expected4 = 4;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = SpecialFilter(new List<int> {71,-2,-33,75,21,19});\n            var expected5 = 3;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = SpecialFilter(new List<int> {1});\n            var expected6 = 0;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = SpecialFilter(new List<int> {});\n            var expected7 = 0;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Напишите функцию, которая принимает массив чисел в качестве входных данных и возвращает количество элементов в массиве, которые больше 10 и у которых первая и последняя цифры числа нечетные (1, 3, 5, 7, 9). Например:", "entry_point": "SpecialFilter", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/69", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дано положительное целое число n. Вам нужно создать целочисленный массив a длиной n.\n        ///         Для каждого i (1 ≤ i ≤ n) значение a[i] = i * i - i + 1.\n        ///         Вернуть количество троек (a[i], a[j], a[k]) из a, где i < j < k, \n        ///     и a[i] + a[j] + a[k] является кратным 3.\n        /// \n        ///     Пример :\n        ///         Ввод: n = 5\n        ///         Вывод: 1\n        ///         Объяснение: \n        ///         a = [1, 3, 7, 13, 21]\n        ///         Единственная допустимая тройка - (1, 7, 13).\n        /// \n        /// \n        /// </summary>\n        public static int GetMaxTriples (int n) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GetMaxTriples(5);\n            var expected1 = 1;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GetMaxTriples(6);\n            var expected2 = 4;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GetMaxTriples(10);\n            var expected3 = 36;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GetMaxTriples(100);\n            var expected4 = 53361;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дано положительное целое число n. Вам нужно создать целочисленный массив a длиной n.\n        Для каждого i (1 ≤ i ≤ n) значение a[i] = i * i - i + 1.\n        Вернуть количество троек (a[i], a[j], a[k]) из a, где i < j < k, \n    и a[i] + a[j] + a[k] является кратным 3.\n\n    Пример :\n        Ввод: n = 5\n        Вывод: 1\n        Объяснение: \n        a = [1, 3, 7, 13, 21]\n        Единственная допустимая тройка - (1, 7, 13).", "entry_point": "GetMaxTriples", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/70", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// В нашей солнечной системе восемь планет: ближайшая к Солнцу - Меркурий, следующая - Венера, затем Земля, Марс, Юпитер, Сатурн, Уран и Нептун. Напишите функцию, которая принимает два названия планет в виде строк planet1 и planet2. Функция должна возвращать кортеж, содержащий все планеты, орбиты которых находятся между орбитами planet1 и planet2, отсортированные по близости к Солнцу. Функция должна возвращать пустой кортеж, если planet1 или planet2 не являются правильными названиями планет. Примеры:\n        /// \n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf (string planet1, string planet2) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Bf(\"Jupiter\",\"Neptune\");\n            var expected1 = new List<string> {\"Saturn\",\"Uranus\"};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Bf(\"Earth\",\"Mercury\");\n            var expected2 = new List<string> {\"Venus\"};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Bf(\"Mercury\",\"Uranus\");\n            var expected3 = new List<string> {\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Bf(\"Neptune\",\"Venus\");\n            var expected4 = new List<string> {\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Bf(\"Earth\",\"Earth\");\n            var expected5 = new List<string> {};\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Bf(\"Mars\",\"Earth\");\n            var expected6 = new List<string> {};\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Bf(\"Jupiter\",\"Makemake\");\n            var expected7 = new List<string> {};\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "В нашей солнечной системе восемь планет: ближайшая к Солнцу - Меркурий, следующая - Венера, затем Земля, Марс, Юпитер, Сатурн, Уран и Нептун. Напишите функцию, которая принимает два названия планет в виде строк planet1 и planet2. Функция должна возвращать кортеж, содержащий все планеты, орбиты которых находятся между орбитами planet1 и planet2, отсортированные по близости к Солнцу. Функция должна возвращать пустой кортеж, если planet1 или planet2 не являются правильными названиями планет. Примеры:", "entry_point": "Bf", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/71", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Простая программа, которая должна возвращать значение x, если n - простое число, и должна возвращать значение y в противном случае.\n        /// \n        /// Примеры:\n        /// \n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// \n        /// </summary>\n        public static int XOrY (int n, int x, int y) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = XOrY(7,34,12);\n            var expected1 = 34;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = XOrY(15,8,5);\n            var expected2 = 5;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = XOrY(3,33,5212);\n            var expected3 = 33;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = XOrY(1259,3,52);\n            var expected4 = 3;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = XOrY(7919,-1,12);\n            var expected5 = -1;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = XOrY(3609,1245,583);\n            var expected6 = 583;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = XOrY(91,56,129);\n            var expected7 = 129;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = XOrY(6,34,1234);\n            var expected8 = 1234;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = XOrY(1,2,0);\n            var expected9 = 0;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = XOrY(2,2,0);\n            var expected10 = 2;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Простая программа, которая должна возвращать значение x, если n - простое число, и должна возвращать значение y в противном случае.\n\nПримеры:", "entry_point": "XOrY", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/72", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дан список чисел, вернуть сумму квадратов чисел в списке, которые нечетные. Игнорировать числа, которые отрицательные или не являются целыми числами.\n        /// \n        /// DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        /// DoubleTheDifference([-1, -2, 0]) == 0\n        /// DoubleTheDifference([9, -2]) == 81\n        /// DoubleTheDifference([0]) == 0\n        /// \n        /// Если входной список пуст, вернуть 0.\n        /// \n        /// \n        /// </summary>\n        public static int DoubleTheDifference (List<object> lst) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = DoubleTheDifference(new List<object> {});\n            var expected1 = 0;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = DoubleTheDifference(new List<object> {5,4});\n            var expected2 = 25;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = DoubleTheDifference(new List<object> {0.1,0.2,0.3});\n            var expected3 = 0;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = DoubleTheDifference(new List<object> {-10,-20,-30});\n            var expected4 = 0;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = DoubleTheDifference(new List<object> {-1,-2,8});\n            var expected5 = 0;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = DoubleTheDifference(new List<object> {0.2,3,5});\n            var expected6 = 34;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = DoubleTheDifference(new List<object> {-99,-97,-95,-93,-91,-89,-87,-85,-83,-81,-79,-77,-75,-73,-71,-69,-67,-65,-63,-61,-59,-57,-55,-53,-51,-49,-47,-45,-43,-41,-39,-37,-35,-33,-31,-29,-27,-25,-23,-21,-19,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99});\n            var expected7 = 166650;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дан список чисел, вернуть сумму квадратов чисел в списке, которые нечетные. Игнорировать числа, которые отрицательные или не являются целыми числами.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\n\nЕсли входной список пуст, вернуть 0.", "entry_point": "DoubleTheDifference", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/73", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам будет дано имя класса (строка) и список расширений. Расширения должны использоваться для загрузки дополнительных классов в класс. Сила расширения определяется следующим образом: пусть CAP - это количество заглавных букв в имени расширения, а SM - количество строчных букв в имени расширения, сила определяется дробью CAP - SM. Вы должны найти самое сильное расширение и вернуть строку в следующем формате: ClassName.StrongestExtensionName. Если есть два или более расширения с одинаковой силой, вы должны выбрать то, которое идет первым в списке. Например, если вам дан класс \"Slices\" и список расширений: ['SErviNGSliCes', 'Cheese', 'StuFfed'], то вы должны вернуть 'Slices.SErviNGSliCes', так как 'SErviNGSliCes' является самым сильным расширением (его сила равна -1). Пример:\n        /// \n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension (string class_name, List<string> extensions) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StrongestExtension(\"Watashi\",new List<string> {\"tEN\",\"niNE\",\"eIGHt8OKe\"});\n            var expected1 = \"Watashi.eIGHt8OKe\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StrongestExtension(\"Boku123\",new List<string> {\"nani\",\"NazeDa\",\"YEs.WeCaNe\",\"32145tggg\"});\n            var expected2 = \"Boku123.YEs.WeCaNe\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StrongestExtension(\"__YESIMHERE\",new List<string> {\"t\",\"eMptY\",\"nothing\",\"zeR00\",\"NuLl__\",\"123NoooneB321\"});\n            var expected3 = \"__YESIMHERE.NuLl__\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StrongestExtension(\"K\",new List<string> {\"Ta\",\"TAR\",\"t234An\",\"cosSo\"});\n            var expected4 = \"K.TAR\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = StrongestExtension(\"__HAHA\",new List<string> {\"Tab\",\"123\",\"781345\",\"-_-\"});\n            var expected5 = \"__HAHA.123\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = StrongestExtension(\"YameRore\",new List<string> {\"HhAas\",\"okIWILL123\",\"WorkOut\",\"Fails\",\"-_-\"});\n            var expected6 = \"YameRore.okIWILL123\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = StrongestExtension(\"finNNalLLly\",new List<string> {\"Die\",\"NowW\",\"Wow\",\"WoW\"});\n            var expected7 = \"finNNalLLly.WoW\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = StrongestExtension(\"_\",new List<string> {\"Bb\",\"91245\"});\n            var expected8 = \"_.Bb\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = StrongestExtension(\"Sp\",new List<string> {\"671235\",\"Bb\"});\n            var expected9 = \"Sp.671235\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам будет дано имя класса (строка) и список расширений. Расширения должны использоваться для загрузки дополнительных классов в класс. Сила расширения определяется следующим образом: пусть CAP - это количество заглавных букв в имени расширения, а SM - количество строчных букв в имени расширения, сила определяется дробью CAP - SM. Вы должны найти самое сильное расширение и вернуть строку в следующем формате: ClassName.StrongestExtensionName. Если есть два или более расширения с одинаковой силой, вы должны выбрать то, которое идет первым в списке. Например, если вам дан класс \"Slices\" и список расширений: ['SErviNGSliCes', 'Cheese', 'StuFfed'], то вы должны вернуть 'Slices.SErviNGSliCes', так как 'SErviNGSliCes' является самым сильным расширением (его сила равна -1). Пример:", "entry_point": "StrongestExtension", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/74", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам даны 2 слова. Вам нужно вернуть True, если второе слово или любая из его перестановок является подстрокой в первом слове.\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// \n        /// </summary>\n        public static bool CycpatternCheck (string a, string b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = CycpatternCheck(\"xyzw\",\"xyw\");\n            var expected1 = false;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = CycpatternCheck(\"yello\",\"ell\");\n            var expected2 = true;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = CycpatternCheck(\"whattup\",\"ptut\");\n            var expected3 = false;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = CycpatternCheck(\"efef\",\"fee\");\n            var expected4 = true;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = CycpatternCheck(\"abab\",\"aabb\");\n            var expected5 = false;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = CycpatternCheck(\"winemtt\",\"tinem\");\n            var expected6 = true;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам даны 2 слова. Вам нужно вернуть True, если второе слово или любая из его перестановок является подстрокой в первом слове.", "entry_point": "CycpatternCheck", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/75", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Для заданного положительного целого числа получить его эквивалент в римских цифрах в виде строки и вернуть его в нижнем регистре.\n        /// Ограничения: 1 <= num <= 1000\n        /// \n        /// Примеры:\n        /// >>> IntToMiniRoman(19) == 'xix'\n        /// >>> IntToMiniRoman(152) == 'clii'\n        /// >>> IntToMiniRoman(426) == 'cdxxvi'\n        /// \n        /// </summary>\n        public static string IntToMiniRoman (int number) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = IntToMiniRoman(19);\n            var expected1 = \"xix\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = IntToMiniRoman(152);\n            var expected2 = \"clii\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = IntToMiniRoman(251);\n            var expected3 = \"ccli\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = IntToMiniRoman(426);\n            var expected4 = \"cdxxvi\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = IntToMiniRoman(500);\n            var expected5 = \"d\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = IntToMiniRoman(1);\n            var expected6 = \"i\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = IntToMiniRoman(4);\n            var expected7 = \"iv\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = IntToMiniRoman(43);\n            var expected8 = \"xliii\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = IntToMiniRoman(90);\n            var expected9 = \"xc\";\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = IntToMiniRoman(94);\n            var expected10 = \"xciv\";\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = IntToMiniRoman(532);\n            var expected11 = \"dxxxii\";\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n            var actual12 = IntToMiniRoman(900);\n            var expected12 = \"cm\";\n            var result12 = compareLogic.Compare(actual12, expected12);\n            if (!result12.AreEqual) {throw new Exception(\"Exception --- test case 11 failed to pass\");}\n\n            var actual13 = IntToMiniRoman(994);\n            var expected13 = \"cmxciv\";\n            var result13 = compareLogic.Compare(actual13, expected13);\n            if (!result13.AreEqual) {throw new Exception(\"Exception --- test case 12 failed to pass\");}\n\n            var actual14 = IntToMiniRoman(1000);\n            var expected14 = \"m\";\n            var result14 = compareLogic.Compare(actual14, expected14);\n            if (!result14.AreEqual) {throw new Exception(\"Exception --- test case 13 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Для заданного положительного целого числа получить его эквивалент в римских цифрах в виде строки и вернуть его в нижнем регистре.\nОграничения: 1 <= num <= 1000\n\nПримеры:", "entry_point": "IntToMiniRoman", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/76", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Даны длины трех сторон треугольника. Вернуть True, если эти три стороны образуют прямоугольный треугольник, и False в противном случае. Прямоугольный треугольник - это треугольник, в котором один угол является прямым или равен 90 градусам. Пример:\n        /// \n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// </summary>\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = RightAngleTriangle(3,4,5);\n            var expected1 = true;\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = RightAngleTriangle(1,2,3);\n            var expected2 = false;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = RightAngleTriangle(10,6,8);\n            var expected3 = true;\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = RightAngleTriangle(2,2,2);\n            var expected4 = false;\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = RightAngleTriangle(7,24,25);\n            var expected5 = true;\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = RightAngleTriangle(10,5,7);\n            var expected6 = false;\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = RightAngleTriangle(5,12,13);\n            var expected7 = true;\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = RightAngleTriangle(15,8,17);\n            var expected8 = true;\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n            var actual9 = RightAngleTriangle(48,55,73);\n            var expected9 = true;\n            var result9 = compareLogic.Compare(actual9, expected9);\n            if (!result9.AreEqual) {throw new Exception(\"Exception --- test case 8 failed to pass\");}\n\n            var actual10 = RightAngleTriangle(1,1,1);\n            var expected10 = false;\n            var result10 = compareLogic.Compare(actual10, expected10);\n            if (!result10.AreEqual) {throw new Exception(\"Exception --- test case 9 failed to pass\");}\n\n            var actual11 = RightAngleTriangle(2,2,10);\n            var expected11 = false;\n            var result11 = compareLogic.Compare(actual11, expected11);\n            if (!result11.AreEqual) {throw new Exception(\"Exception --- test case 10 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Даны длины трех сторон треугольника. Вернуть True, если эти три стороны образуют прямоугольный треугольник, и False в противном случае. Прямоугольный треугольник - это треугольник, в котором один угол является прямым или равен 90 градусам. Пример:", "entry_point": "RightAngleTriangle", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/77", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// Вам дана строка s.\n        ///     Если s[i] - это буква, измените ее регистр с нижнего на верхний или наоборот,\n        ///     в противном случае оставьте ее без изменений.\n        ///     Если строка не содержит букв, переверните ее.\n        ///     Функция должна вернуть полученную строку.\n        ///     Примеры\n        /// \n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve (string s) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = Solve(\"AsDf\");\n            var expected1 = \"aSdF\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = Solve(\"1234\");\n            var expected2 = \"4321\";\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = Solve(\"ab\");\n            var expected3 = \"AB\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = Solve(\"#a@C\");\n            var expected4 = \"#A@c\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n            var actual5 = Solve(\"#AsdfW^45\");\n            var expected5 = \"#aSDFw^45\";\n            var result5 = compareLogic.Compare(actual5, expected5);\n            if (!result5.AreEqual) {throw new Exception(\"Exception --- test case 4 failed to pass\");}\n\n            var actual6 = Solve(\"#6@2\");\n            var expected6 = \"2@6#\";\n            var result6 = compareLogic.Compare(actual6, expected6);\n            if (!result6.AreEqual) {throw new Exception(\"Exception --- test case 5 failed to pass\");}\n\n            var actual7 = Solve(\"#$a^D\");\n            var expected7 = \"#$A^d\";\n            var result7 = compareLogic.Compare(actual7, expected7);\n            if (!result7.AreEqual) {throw new Exception(\"Exception --- test case 6 failed to pass\");}\n\n            var actual8 = Solve(\"#ccc\");\n            var expected8 = \"#CCC\";\n            var result8 = compareLogic.Compare(actual8, expected8);\n            if (!result8.AreEqual) {throw new Exception(\"Exception --- test case 7 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Вам дана строка s.\n    Если s[i] - это буква, измените ее регистр с нижнего на верхний или наоборот,\n    в противном случае оставьте ее без изменений.\n    Если строка не содержит букв, переверните ее.\n    Функция должна вернуть полученную строку.\n    Примеры", "entry_point": "Solve", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/78", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Дана строка 'text', вернуть ее эквивалентную строку хэша md5.\n        ///     Если 'text' является пустой строкой, вернуть null.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5 (string text) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = StringToMd5(\"Hello world\");\n            var expected1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = StringToMd5(\"\");\n            var expected2 = null;\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = StringToMd5(\"A B C\");\n            var expected3 = \"0ef78513b0cb8cef12743f5aeb35f888\";\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = StringToMd5(\"password\");\n            var expected4 = \"5f4dcc3b5aa765d61d8327deb882cf99\";\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Дана строка 'text', вернуть ее эквивалентную строку хэша md5.\n    Если 'text' является пустой строкой, вернуть null.", "entry_point": "StringToMd5", "canonical_solution": NaN, "natural_language": "Russian"}
{"task_id": "csharp/79", "prompt": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Вы эксперт в программировании на C#.\n        /// \n        /// Даны два положительных целых числа a и b. Вернуть четные цифры между a и b в порядке возрастания.\n        /// \n        /// Например:\n        /// \n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers (int a, int b) \n        {", "test": "\n\n        public static void Main(string[] args)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            var actual1 = GenerateIntegers(2,10);\n            var expected1 = new List<int> {2,4,6,8};\n            var result1 = compareLogic.Compare(actual1, expected1);\n            if (!result1.AreEqual) {throw new Exception(\"Exception --- test case 0 failed to pass\");}\n\n            var actual2 = GenerateIntegers(10,2);\n            var expected2 = new List<int> {2,4,6,8};\n            var result2 = compareLogic.Compare(actual2, expected2);\n            if (!result2.AreEqual) {throw new Exception(\"Exception --- test case 1 failed to pass\");}\n\n            var actual3 = GenerateIntegers(132,2);\n            var expected3 = new List<int> {2,4,6,8};\n            var result3 = compareLogic.Compare(actual3, expected3);\n            if (!result3.AreEqual) {throw new Exception(\"Exception --- test case 2 failed to pass\");}\n\n            var actual4 = GenerateIntegers(17,89);\n            var expected4 = new List<int> {};\n            var result4 = compareLogic.Compare(actual4, expected4);\n            if (!result4.AreEqual) {throw new Exception(\"Exception --- test case 3 failed to pass\");}\n\n        }\n    }\n}\n", "language": "csharp", "description": "Даны два положительных целых числа a и b. Вернуть четные цифры между a и b в порядке возрастания.\n\nНапример:", "entry_point": "GenerateIntegers", "canonical_solution": NaN, "natural_language": "Russian"}
